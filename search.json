[{"title":"Vue标签生成组件","url":"/2021/03/23/vue-tag-create/","content":"\n今天为大家带来一个基于Vue的标签生成组件。\n\n### 背景\n\n文章类页面一般都需要有标签来归类和检索，就会在编辑文章时需要创建标签的功能，标签是一个个独立的文字块。\n\n### 需要实现的功能：\n\n- 输入框\n- 某种特定的操作触发生成标签\n- 校验输入的内容是否符合标准\n- 判断标签总字数是否超出\n- 删除标签\n\n本文的主角便是实现这样一个功能的Vue组件——**vue_tag_create**。\n\n其实笔者遇到这样一个需求的时候，找过组件库，但并不完全符合要求，也找过有没有现成的包，同样体验不好，文档也不完善，索性自己写。\n\n### 目前实现的功能：\n\n- 特殊字符校验\n- 超出字数校验\n- 添加标签\n- 删除标签\n- “删除图标”自定义\n- “占位文字”自定义\n- 错误提示布局选择\n\n使用示例：\n\n```\nnpm install vue_tag_create -S\n\nimport vue-tag-create from \"vue_tag_create\"\n\n<vue-tag-create \n  :limit='20' \n  :inline=\"true\" \n  :iconClass=\"iconClass\" \n  :placeholder=\"placeholder\">\n</vue-tag-create>\n```\n\n注：目前已可用，不必安装多余依赖，Vue3版本未验证，应该也可以。\n\n但是，还需要更多来自开发者的反馈，继续优化之后方可正式投入使用，更多功能和更好的体验等你来一起定义，欢迎[vue_tag_create](https://github.com/linggan100/npm_package/tree/master/vue_tag_create)提issue。\n","tags":["开源"],"categories":["组件"]},{"title":"【轻聊前端】JavaScript中的数字游戏","url":"/2021/03/20/wechat_number/","content":"\n\n> 现今各种框架、工具‘横行’，到处在讲原理和源码，更有跨端技术需要我们去探索，但如果基本功不好，学什么都是事倍功半，效果很不好，花费时间的同时打击自信心。此篇文章，为我所计划的【轻聊前端】系列第（五）篇，旨在系统地、逻辑性地把原生JavaScript知识分享给大家，帮助各位较为轻松地理清知识体系，更好地理解和记忆，我尽力而为，望不负期待。\n\n数字，即本篇的主角Number，在程序的世界里能代表很多东西——状态、年龄、价格、计数器等，但由于存储机制的原因，Number并不能很健壮地适应所有场景，就会有一些细节问题，此篇文章，我们沿着Number的属性和方法一起讨论一下数字的应用场景、问题及解决方案。\n\n## 再谈基本类型\n\n在聊变量的那篇文章里，我们说JavaScript中原本有5种基本类型，加上ES6之后引入的Symbol（符号），是6种，但是，还有一种“预备役”的类型——BigInt，目前应该是在“建议推荐标准阶段”，可以按其字面意思理解叫“大整数”。\n\n说“大整数”，得先看看Number，JavaScript中是没有其他语言中的“int、float、double”这些类型的，统一为定义一个Number类型的数字，那么，是因为它不够大？还真是。\n\n## 精度的“陷阱”\n\n**大数**\n\nNumber能够表示的最大数字是 2的53次方 - 1。咱先看看这个数是多少：\n\n9007199254740991\n\n使用 Number.MAX_SAFE_INTEGER 即最大的安全整数也可获得这个值。\n\n类似地，Number中有这么几个值：\n\n```\nNumber.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n```\n\n乍一看，已经挺大了，用正常的计数法已经读不出来，一旦超过这个值，就会被转换为科学计数法，形如：1.79e+308，且精度上会有误差。\n\n问题来了，什么时候会用这么大的数？比如，前后端进行Long型数据传递的时候，就可能出现这种情况，而且这种情况是需要处理的，在之前，一种常见的方法是把它转换为字符串，逐位进行计算，之后再组合。一些专门用于大数处理的库也是这么做的，比如：**big.js**。\n\n有了BigInt类型之后，就可辅助处理这种情况。比如，可以像下面这样定义：\n\n```\n10n，或者调用函数BigInt()\n```\n\n它类似Number，但也有一些不同，它不能用 Math 对象中的方法；也不能和任何 Number 实例混合运算，两者必须转换成同一种类型。当然，还有一件自然的事情，就是带小数的运算会丢掉小数部分取整。\n\n说了这么多，看看它能够发挥的作用吧。\n\n```\nlet testInt = 9007199254740991;\ntestInt * 1000000   // 9.007199254740991e+21\nBigInt(testInt * 1000000)  //  9007199254740990951424n\n```\n可以看出，在进行BigInt处理后，数字不再会被“科学化”。但这个类型不能乱用，只有当确定数字会超过 2的53次方时才用，且不宜进行 Number 装换。\n\n**小数**\n\n既然会有精度问题，涉及大数就很可能涉及小数。比如大家喜闻乐道的“0.1 + 0.2”的问题。\n\n我们在控制台输入这个表达式，会发现：\n\n```\n0.1 + 0.2 //    0.30000000000000004\n```\n结果并不是0.3，而是很长的一串，末尾还有个4。\n\n不熟的可能想不到，对人来说很容易的运算，计算机居然出错了，什么道理？简要解释一下：\n\n计算机有能够表示的最大值，也有能表示的最小值（大于零的），即上文提到的 Number.MIN_VALUE（5e-324） 。\n\n计算机中的数字都是以二进制存储的，所以要先将 0.1 和 0.2 转化成二进制，对于十进制转二进制，整数部分除二取余，倒序排列，小数部分乘二取整，顺序排列。\n\n0.1 转化为二进制\n0.0 0011 0011 0011 0011 0011 0011 ... （0011循环）\n\n0.2 转化为二进制\n0.0011 0011 0011 0011 0011 0011 0011 ... （0011循环）\n\n接下来就是两个二进制数的计算。\n\n二进制数之间的计算规则是：进位“逢二进一”，借位“借一当二”。\n\n最终得到的二进制数是**0.010011001100110011001100110011001100110011001100110100**\n\n然后又要转成十进制。\n\n二进制转十进制的方法是：小数点后第一位 *2 ^ -1，第二位 *2 ^ -2，以此类推。\n\n转换后结果是**0.30000000000000004**，即我们之前看到的值。\n\n既然只要数字够小就会出问题，同理的，“0.3 - 0.2”也有问题，会得到  0.09999999999999998。\n\n光知道问题不行，要解决。\n\n- 方法一：\n\n既然数字小的情况下出的问题，变大再缩小不就行了？这和CSS中单像素之类效果的实现如出一辙。\n\n```\n(0.1*1000+0.2*1000)/1000   // 0.3\n```\n\n- 方法二：\n\nES6后，Number新增了一个属性——Number.EPSILON，两个“可表示数”之间的**最小间隔**。为数字之间的误差提供了一个范围，我们打印出来看看：\n\n```\nNumber.EPSILON   // 2.220446049250313e-16\n```\n这个值刚好等于\n\n```\n2**-52    // 2.220446049250313e-16\n```\n你可能想到了，仅仅一个范围并不能使得“0.1 + 0.2 == 0.3”真正成立，而是让“忽略误差”之后的布尔成立。\n\n```\nlet a = 0.1 + 0.2;\nlet b = 0.3;\nMath.abs(a-b)<Number.EPSILON  // true\n```\n虽然不是真正解决，但这也提供了一种变相成立的情况是吧。\n\n## 词法“误会”\n\n已经聊了两个问题，索性继续聊下去，前面的文章里，提到过JavaScript中的一个常见方法，toString(),用于将一切具备这个方法的类型的值转为字符串类型的值。通常情况下，都能得到预期的结果。比如：\n\n```\nlet a = 1;\na.toString()  // “1”\n```\n但是，如果写成：\n\n```\n1.toString()\n```\n这就有点纠结了，按照书写上的意愿，我们是想把1转换成字符串，但是按照数字的看法，“1.”也能理解为小数的前半部分，这怎么弄。\n\n这就涉及到了词法规则，计算机对于程序，或者说字符的读取，并不会完全按照人的“真正意图”来进行，而是它读到的内容只要符合规则，就按规则来。\n\nJavaScript当中的最小语义单元叫“词”，只要符合词的规则，就构成词。\n\n我们知道，代码当中有空白、换行、注释，然后就是我们写的有具体含义的代码了。\n\nJavaScript词的规则中，**十进制的 Number 可以带小数，小数点前后部分都可以省略，但是不能同时省略**\n\n```\n.01\n1.\n1.01\n```\n以上几种写法都是合法的。\n\n那么“1.toString()”中的“1.”就会被当做省略了小数点后面部分的数字来处理，自然就不会得到正确的结果，而是报错。\n\n那正确结果的写法是什么呢？以下两种均可：\n\n```\n1 .toString()  //中间隔了个空格\n1..toString()  //中间多加一个点符号\n```\n## 回正轨\n\n在文章开头，为了引入 BigInt，讲了个精度的问题，就直接铺开讲了几个常见问题，从这段开始正常聊聊Number中最常见的属性和方法。\n\n**toString()**\n\n上面刚看过toString，咱就趁热打铁接着聊。\n\ntoString是很多对象的原型上都会有的通用方法，但在通用的前提下，每种类型可能有自己独特的作用，比如，Number类型的toString支持传入一个参数（radix），表示以“几进制”来转换数字。\n\n```\nlet a = 10;\na.toString()   // \"10\"  不传值的时候默认“十进制”\na.toString(2)  // \"1010\"  传了2，就会转换成“二进制”\na.toString(8)  // \"12\"  传了8，就会转换成“八进制”\n```\n上面代码已经能够简单看到效果了，但进制的总体要比我们常用的更多。比如，我们所熟知的，CSS当中的色值，就有十六进制表示。#FFF 表示白色。所以，如果转换的基数大于10，则会使用字母来表示大于9的数字。\n\n```\na.toString(16)  //\"a\"   嗯，这真的是个巧合~\n```\n\n**parseInt()/parseFloat()**\n\n这两个方法就很好理解了，Number上的这两个方法和全局对象的方法没有不同，通常用于将字符串转换为数字。\n\n看一下效果：\n\n```\nlet a = \"1.5\";\nparseInt(a);   // 1\nparseFloat(a);  // 1.5\n```\n但它的处理机制不止这么简单，再看\n\n```\nlet a = \"1.5b\";\nparseInt(a);  // 1\nparseFloat(a); // 1.5\n```\n当处理的字符串是“数字+其他字符”的时候，它们会把后面的值给砍掉，返回前面的数字。\n\n这在一些需要输入数字的场景下很有用，比如，有个表单输入框的价格，限制只能输入数字，而不能输入其他字符，就派上了用场。\n\n凡事有个但是，如果字符加在了前面呢？\n```\nlet a = \"c1.5b\";\nparseInt(a);  // NaN\nparseFloat(a); // NaN\n```\n这就真的无能为力了...\n\n慢着，前面好像说到限制表单输入，你说，我何必用这些方法，我用input的 number 类型不就完了么。理想很丰满，现实很骨感，input的 number 交互体验不完美不说，它绑定的值也是被处理成字符串的，而不是 Number。\n\n除了限制输入只能是数字之外，有时还会限制输入几位小数，怎么办？不用怕，也是有方法的。\n\n**toFixed()**\n\ntoFixed()就是用来保留小数位数的，称为“定点表示法”，直接看：\n\n```\nlet a = 1.5;\na.toFixed()  // \"2\"\n```\n嚯，这一看不打紧，发现两个问题。\n\n不传值默认不保留小数位，这很明显就不说了。重点在于另外两项：\n\n- 返回值是字符串类型，而不是数字\n- 当小数位为5（或者大于5），结果会进行四舍五入。\n\n可以再验证一下。\n\n```\nlet a = 1.4;\na.toFixed()  // \"1\"\n```\n\n第一点还没什么，稍加注意就好，第二点显然就会出问题，如果你限制输入两位小数，在输入框里输入“14.56”，然后多输了一个数字“14.565”，就会被处理成“14.57”，看起来一个数字之差，也是不该被允许的。所以，在便利之余，这是它的一点小瑕疵。\n\n如何处理呢，还记得前面我们处理“0.1+0.2”问题的方法吗？用在这个地方更合适，即，保留几位小数，就先乘以“10的n倍”，再除以“10的n倍”，就可以得到原本的数字了。\n\n**toPrecision()**\n\n跟toFixed()效果类似的一个方法是保留值的精度，或者换个说法，**指定数字的有效位数**。\n\n```\nlet a = 1.4;\na.toPrecision(2) // \"1.4\"\na.toPrecision(1) // \"1\"\n```\n它也有个同样的问题，就是四舍五入，会把“1.6”保留为“2”，但作为保留几位数的常规定义来说，好像又是合理的，所以，只需要在使用的时候注意一下就好。\n\n至此，常用的数字处理方法介绍差不多了，再看两个数字判断的方法。\n\n## 数字判定\n\n**isNaN()**\n\n做程序处理的时候，总会遇到异常情况，预期是数字，或者能转换成数字的，如果真的不能，就可能是 NaN，这时候，用其他的值或者方法来判断NaN是不凑效的，isNaN()方法就派上用场了。\n\n```\nNumber.isNaN(Number('a'))  // true\n```\n\n**isInteger()**\n\n某些数值只适合用整数表示，需要有个整数判定方法，如果用常规方法，可以先看是不是数字，然后看是不是小数，而用isInteger()只需一步。\n```\nlet a = 1.4;\nNumber.isInteger(a)  // false\n```\n\n## Math\n\n说完Number数字本身的属性和方法，该来看一下另一个重要角色了，即内置的Math对象。\n\nMath的属性和方法多且强大，我们挑几个常用的说说。\n\n**Math.PI**\n\n大家知道，PI是数学中的圆周率，读书的时候，我们使用的都是圆周率的近似值“3.14”，而Math方法给我们提供了现成的属性可直接调用Math.PI。\n\n既然是圆周率，当然是会用在圆或者圆弧的场景，比如画一个圆。\n\n也经常会涉及弧度和角度的转换，弧度除以 (Math.PI / 180) 可转换为角度，同理，角度乘以这个数则能转换为弧度。\n\n**Math.abs(x)**\n\n这个方法在上面已经见到过，我们在比较两个数值的时候，如果只需知道它们的差值，而不在乎谁大谁小，就可用此法。\n\n**Math.round(x)**\n\n前面聊保留位数的时候，多次提到“四舍五入”，本尊终于出现了。\n\n```\nMath.round(1.4)    // 1\nMath.round(1.6)    // 2\n```\n“四舍五入”本身不是问题，只是某些场景的默认处理不合适罢了，这个算法是很经典的算法，在很多方面都能发挥作用，虽然如此，还有一种它不适合的场景，比如下一位。\n\n**Math.ceil(x)/Math.floor(x)**\n\n有时候，我们需要对计算的结果做取整处理，比如返回的小数有“1.4、1.6”,如果大于1的都按2处理，或者小于2的都按1处理，就要用到取整算法。\n\n```\n//向上\nMath.ceil(1.4)    // 2，下同\nMath.ceil(1.6)\n\n//向下\nMath.floor(1.4)   // 1，下同\nMath.floor(1.6)\n```\n\n初记可能总记不住，只需要记得floor有“地面、地板”的意思，自然就是向下了~\n\n**Math.max()/Math.min()**\n\n如果对Math对象不熟悉，碰到一组数据需要取到它们当中的最大或者最小值，你可能会写一个逐项比较的算法取结果，但这样复杂度是最高的，显得不太划算，有这么个好方法就要善用。\n\n```\nlet a = [1,2,3,4,5];\nMath.max(...a)   // 5\nMath.min(...a)   // 1\n```\nPS：此方法只能直接处理数字，此处用展开运算符将数组中的数值进行了展开处理。\n\n**Math.pow()**\n\n这个方法前面已经见过面了，求数值的多少次方。而且我们也提过，现在有了新的运算符来做这件事，即’**‘。\n\n比如2的3次方可写成“2**3”，不再赘述。\n\n**Math.random()**\n\nMath中最后一个常用方法就是random()，也就是“随机数”。\n\n很多时候，有规律会显得整齐、美观，但有些时候无规律更显自然和多样。\n\nrandom()方法本身只会返回从0到1中间的一个数字，但如果发挥想象，它就能做很多有用的事。\n\n比如，0到1可理解为比例，百分之几，那么就可以输出任意两个数中间的数，先算出差值，再用随机数乘以差值，加上其中一方。\n\n```\nw = m - n;\nMath.random()*w + n\n```\n或者，有时我们需要进行无规律的重复，球弹的高度，雪花飘落的速度和距离等，就可以先定一个值，再用随机数与之相乘，就能控制从0%到100%不同范围的值随机出现。\n\n至此，Math对象的介绍也告一段落，Math中还有很多其他方法，比如三角函数等，鉴于使用场景比较特殊，这里就不详述，如有需要，可自行深入研究。\n\n## 总结\n\n编程中数字的话题，说小也小，小到我们使用它的时候就顺手一写的事儿，但说大也大，拿之前说的输入框限制输入几位小数，就需要把每种输入的可能性都考虑到才能做到没有bug，终归，编程是个细活儿，不论工具箱有多丰富和强大，还是要使用它的人思路清晰、思维缜密，才能写出bug更少的代码。\n\n这是第五篇了，行程将将过半，后面也会逐渐进入深水区，为大家揭开一些看似复杂概念的神秘面纱，我们继续加油！~","tags":["分享"],"categories":["JavaScript"]},{"title":"【轻聊前端】那些“无理取值”的运算","url":"/2021/03/13/wechat_operation/","content":"\n> 现今各种框架、工具‘横行’，到处在讲原理和源码，更有跨端技术需要我们去探索，但如果基本功不好，学什么都是事倍功半，效果很不好，花费时间的同时打击自信心。此篇文章，为我所计划的【轻聊前端】系列第四篇，旨在系统地、逻辑性地把原生JavaScript知识分享给大家，帮助各位较为轻松地理清知识体系，更好地理解和记忆，我尽力而为，望不负期待。\n\n**凡有数据参与且得出某种结果的，都叫运算**——灵感\n\n本系列文章讲求循序渐进，说完变量，聊完对象，是时候讲运算了，前文说过，程序就是在做“数据存储”和“数据处理”，存储说完就是处理，运算便是处理的方式。\n\n## 四则运算（之外）\n\n说起运算，不得不让人联想到数学，最熟悉的就是“加、减、乘、除”四则运算，你一定能想到，JavaScript当中也有这几种运算，因为有数字类型，但它远不止这四种，而且就这四种而言，跟数学当中也不完全一样，在某些场景下，会发生“神奇的转换“。为什么？别忘了，作为计算机，对给它的任何一行代码，一个字符，都需要做出反应，特别是JavaScript这种动态弱类型语言，相当宽容，会在不知道变量是什么的情况下尽量做出反应。\n\n暂把“神奇的转换”留后，四则运算也不做赘述，先看四则运算之外它还有什么。\n\n## 两元运算\n\n什么是两元，“元”就是参与运算的数据的个数，两元即有两个数据参与运算。\n\n**（完全）等于/不等于**\n\n先说等于，这很简单，但新手程序员都需要一段时间适应，即JavaScript中的等于和数学中的不一样，需要用“==”符号，而不是“=”，“=”在JavaScript中代表“赋值”。\n\n```\nif(a = 3){\n}\n```\n这是把3赋给a，而不是判断两者是否相等，须多加注意。\n\n另外，数学当中只有等于、大于、小于之类，没有”不等于“，而程序里加入了“不等于”，这就可以用一个运算统一两种情况。写法如下：\n\n```\na!=b\n```\n按照功能来说，这么写就够了，但并不保险，因为一个小小的是否相等，浏览器都会试图对它进行类型转换之后再比较。比如\n\n```\n0 == ' '  //true  这里是空串儿，不是''\nnull == undefined //true\n```\n0和空格字符显然是两个概念，null 和 undefined 也不能等同。不能判定为相等，但返回是true，所以，在判断两个值是否相等时，建议使用“完全运算符”。示例如下：\n\n```\n0 === ‘ ’ //false\nnull === undefined //false\n```\n\n完全运算符会在比较的同时检查类型，类型不一样就肯定不等。完全不等即“!==”。\n\n这样就能准确判定了。\n\n**取模（余数）**\n\n相比之下，取模（%）运算不是很常见，它的效果是这样的：\n\n```\nlet result = 55 % 10;  // 5\n```\n即看两数是否能整除，如果不能，得到余数。\n\n应用场景有：判断是不是某个数的整数倍（本职），通过这个本职，可以判断一个数字是不是2的整数倍，进而判断“奇/偶”。\n\n**指数**\n\n以前，我们求一个数字的多少次方，可以用上一篇文提到的Math对象的pow方法：\n\n```\nlet result = Math.pow(3,2);  //9\n```\nES7之后引进了新的操作符——**，于是可以写成下面这样。\n\n```\nlet result = 3**2;\n```\n书写上更简洁。\n\n**赋值**\n\n前面说了“=”是赋值，但除此之外还有一系列有关**运算后赋值**的简化写法。统一的表达式是：**变量 运算符= 变量（常量）**。\n\n意思就是，将某变量进行运算之后再把值赋给原变量。示例如下：\n\n```\na += 1;  //等同于 a = a+1 下同\na -= 1;\na *= 1;\na /= 1;\na %= 2；\n```\n\n**逻辑操作**\n\n什么是逻辑？在JavaScript中逻辑运算得到的结果是“真/假”、“是/否”，即判断一个条件成立与否。\n\n“&&”——与操作，均为真，结果才是真。\n\n最为直观的：\n\n```\nlet result = true && false;  //false\n```\n但平时一般不会这么直接操作布尔值，而是使用其他运算得出的结果。比如：\n\n```\nlet a = 4;\nlet result = a > 3 && a < 5;  // true\n```\n\n\"||\"——或操作，有一个为真即为真，否则是假。\n\n```\nlet a = 4;\nlet result1 = a < 3 || a > 5; // false\nlet result2 = a > 3 || a > 5; // true\nlet result3 = a > 3 || a < 5;  // true\n```\n\n这两种运算符为日常开发的很多场景提供了便捷的判断方式，常用于流程控制中的条件判断，但有时候会被自己绕进去，比如，当需要a和b两种场景都适用时，可能会因为这个“和”字，本能地选择了“与”运算，即“&&”，这就不对了，都适用的意思是“a”或者“b”，要用“||”才对。\n\n另外，逻辑运算符不仅仅能用来得到“是”或“否”，还有一种常见的用法，称为“短路运算”。\n\n先看一段代码：\n\n```\nlet result;\n\nif(a){\n   result = b\n} else {\n   result = a\n}\n\nif(a){\n    result = a;\n} else {\n    result = b;\n}\n```\n第一种情况，当a有值且不为false(包括隐式类型转换)，result得到b，否则得到a。\n\n第二种情况，当a有值且不为false（包括类型转换），就不往后看了，result得到a，否则得到b。\n\n但上面的写法显得略繁琐，如果使用“短路运算”，可以像下面这样：\n\n```\nlet result = a && b;\nlet result = a || b;\n```\n效果是一样的。\n\n短路的写法为我们提供了赋值的“优先级”。逻辑运算的思路并没有改变，只是会发生赋值的动作。\n\n所以，当我们要在两个值之间做取舍时，就可以考虑使用“短路算法”，一行代码搞定，简洁、清晰。\n\n## 一元运算\n\n先说两元是因为两元大家都熟悉，易接受，一元也很好理解，一个操作符，一个操作数。\n\n**+/-**\n\n\"+\"和\"-\"除了作为两元操作，同样可作为一元使用，最常见的就是“正负数”。\n\n```\n+1\n-1\n```\n但是，如果不是直接放在数字的前面，而是变量的前面，就会有不同。\n\n比如：\n\n```\nlet a = '1'; \nlet result = +a;  // 1\nlet result = -a;  //-1\n```\n这段代码里，a原本是字符串的“1”，在前面加上了“+”或“-”号之后，就转变成了数字，为什么呢？因为在字符串前面加代表“正负”的符号是没有意义的，JavaScript会试图使其变得合理。\n\n注意两个字“试图”，说明并不总成功，如果值没法转换成数字，就会失败。\n\n```\nlet a = 'a';\n+a  //NaN\n```\n虽然一元操作符有这么一个功能，仍属于隐式转换的范畴，只有当拿到的值和想要的值的类型不匹配的时候才需要用到，如果对自己的操作很确定，且从代码的易读性出发的话，可以直接使用Number()方法进行显式转换。\n\n\n**++/--**\n\n说完一个的，说说两个的，两个叫“自增”或“自减”，因为没有另外的数据跟它结合，也正因为没有数据结合，每次都只能“自增”或“自减”1。\n\n```\na++  //自增1\na--  //自减1\n```\n功能简单，但放的位置就有讲究了，放前放后有区别。\n\n```\nlet  result = a++;   // 符号在后，先赋值后增加\nlet  result = ++a;   // 符号在前，先增加后赋值\n```\n\n这两种运算符常被用在需要重复执行的代码段，经过多次运算后达到一个临界值，再进行其他操作，或停止操作，最常见的就是for循环。\n\n```\nfor(let i = 0;i<=length;i++){\n    //执行操作\n}\n```\n每循环一圈儿，i加1，直到达到length停止。\n\n**!**\n\n“!”叫“取反”运算符，按说它也属于逻辑运算，是对结果的值进行取反，结果是真，取反后是假，结果是假，取反后是真。\n\n```\nlet a = false;\nif(!a){\n    //a为假时执行的操作,假不只是false，还包括能够布尔转换为假的其他值\n}\n```\n\n你可以在任何需要的时候使用“!”运算符，一个常用场景就是状态切换。\n\n```\nlet on = true;\nfunction changeStatus(){\n    on =!on;\n}\n```\n给需要切换状态的元素绑定点击事件，然后执行函数changeStatus，每点击一次，就会变为相反的值，从而达到反复点击切换状态的效果。\n\n## 三元运算\n\n三元运算，又叫“条件运算”。JavaScript当中三元运算符也很常见。格式如下：\n\n**表达式？值1：值2**\n\n示例：\n\n```\nlet a = 3;\nlet result = a>2?'真':'假';\n```\n这段代码表达的是，当a的值大于2，取前值，否则取后值。即根据表达式是否成立来决定值是什么。\n\n这个运算和前面聊的“||”运算的效果有相似的地方，各位可根据具体情况选择使用。\n\n## 需要注意的点\n\n**+**的连接性\n\n关于“+”，我们习惯的作用是数字相加，但到了JavaScript领域，“+”还有另一个常见的作用是“连接字符串”。如下：\n\n```\nlet result = 'a'+'b';   // \"ab\"\n```\n虽然字符串本身也有连接的方法，相比之下，“+”更直接和简洁。\n\n但如果仅此而已，就没什么可注意的，JavaScript世界最大的不确定就是“拿到的变量是什么”。\n\n如果是这样：\n\n```\nlet result = 1 + 'b';\n```\n数字和字符串相加，得到的什么呢？是“1b”。\n\n可能你会说了，后面那个是b，没法转换成数字，才有的这个结果。那换一下：\n\n```\nlet result = 1 + '2';\n```\n结果是“12”，显然上面的猜测并不对。\n\n当使用“+”号进行二元运算的时候，任何一方的数据是字符串类型，或者被转换成了字符串类型，结果都是字符串类型。比如：\n\n```\nlet result = \"\";\nresult + 2  //\"2\"\nresult + undefined  // \"undefined\"  \nresult + null   //  \"null\"\n```\n\n为什么单拎“+”号呢，因为只有“+”号有这个特殊作用，其他运算符没有。\n\n**字符串比较**\n\n在业务需求中，常有给一组数据按照大小排序的情况，这时候就有一个陷阱在等着我们——字符串的比较。\n\n字符串比较有两个算法：\n\n- 逐位比较，直到得出结果\n- 比较的是ASCII码值\n\n这样的算法就会出现如下情况：\n\n```\n100 < 20   //true\n```\n\n事实上这个结果是不对的，我故意这样写，因为有时候，用眼睛看着是数字的，其类型可能是字符串，可能比较的是“100”和“20”，就会出现上面的情况。\n\n用 charCodeAt() 方法可以查看字符的ASCII码值，'1'是49，而'2'是50。比较完第一位就已经分出大小了。\n\n再看个例子：\n\n```\n'13' > '123'   //true\n```\n首位1是相等的，第二位3的ASCII码比2的ASCII码大，出结果。\n\n所以，在进行数据排序的时候，一定要注意类型，否则可能和预期不一致，数字如此，字母或其他特殊符号也是一样，不再赘述。\n\n**对象的隐式转换**\n\n面试题放送时间到~\n\n\n问“什么情况下，a == 1 && a == 2 && a == 3 是成立的？“\n\n这...看起来很不合常理，不是故意刁难吗？\n\n先别急，我们讲一下上面一直没提过的东西。上面一直在说基本类型会转换，而没说对象。\n\n拿值和对象作比较看似没有实用的地方，但程序依然允许运行，且会有相应的处理机制。\n\n对象到数字（number）和字符串（string）类型值的转换，是直接与valueOf()以及toString()方法相关的。规则如下：\n\n- 如果试图转换为字符串，则先尝试toString()方法，然后再尝试valueOf()方法。\n\n- 否则，先尝试调用valueOf()方法，再尝试调用toString()。\n\n有人要问了，这俩方法哪来的？还记得上篇文章的内容吗？它们是来自原型的内置方法。\n\n于是，上面的题目便找到了使其成立的途径：\n\n```\nlet a = {\n  i: 1,\n  valueOf: function () {\n    return a.i++;\n  }\n}\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('我成真了!');\n}\n\n// 我成真了!\n```\n可以利用类型转换时会调用valueOf（也可以是toString）方法的特性，在里面写我们想要的其他效果，就可以了。\n\n明白了这个道理，是不是一点都不怕了？\n\n当然，这道题不仅这一种方案，只是另一种方案稍微偏离主题，我们后面聊到对象的时候再深挖~\n\n\n## 总结\n\nJavaScript中的运算，说多不多，说少也不少，特别是隐式类型转换的处理机制，需要较多经验的积累，大坑没有，小坑不断。\n\n鉴于篇幅原因，这里把不常用的和一些细节略了，但不管哪种情况，可概括为两条：\n\n- 取值：不论数学计算，字符串连接，甚至“短路算法”，目的都是获取一个值，当无法得到合法值时，就会返回NaN或者报错之类期望之外的结果。\n- 逻辑判断：使用“&&、||、!”或者隐式转换的情况，作为流程控制的条件判断。\n\n这样以来，我们就只需要关心自己要做什么，每碰到一种意外情况就记下，慢慢就都清楚了。\n\n说完变量（值的存储）、对象系统（编程的土壤）、运算（数据处理的方式）之后，接下来就是对不同的类型进行各个击破了。\n\n下篇见~\n","tags":["分享"],"categories":["JavaScript"]},{"title":"人呐，就是容易在前不着村后不着店的时候懈怠","url":"/2021/03/13/keep_moving_never_stop/","content":"\n家里有根跳绳，挺久没拿出来跳了，出去跑步又嫌麻烦，某天突然想，楼下不是有块空地么，干嘛不去那跳呢，说去就去。\n\n好家伙，放眼望去，不是阿姨、老太太、老大爷，就是一帮穿着校服的娃娃，我一个青...中青年男子往那儿一站似乎格格不入，不管，跳呗，谁也不碍着谁，兴许凑巧那会儿人少呢，可是跳了几天下来就发现，那不是偶然，是真的没有一个跟我同龄的人去那种地方，好吧，这么讲不严谨，时不时有一两个露面跑步的女性。\n\n于是我就想了，是不是老人和小孩才需要，或者更喜欢运动，而我这个年龄段的人既不喜欢也不需要呢？\n\n老人，不论是腿脚还是各个脏器，都随着年龄增长而衰老，僵化，锻炼是为了保持状态，减缓衰老。\n\n小孩，一可能是单纯喜欢玩儿，二是精力旺盛，好动，三也可能是为了多运动长个儿。\n\n中间的呢？衰老“遥遥无期”，也不爱玩儿，也不会长个儿了，此所谓，“前不着村后不着店”，还有什么理由“运（nu）动（li）”吗？\n\n人生中有太多这样的阶段。\n\n## 读书时\n\n读书时，每逢开学，不论是学霸还是学渣，都有一股子新鲜劲儿，领新书，上第一节课，都会很受规矩，认真听讲，笔记最细致，作业最认真。没过几天，就“该干嘛干嘛”去了，学霸依然专心，中不溜的当一天和尚敲一天钟，学渣放飞自我。到了期末考前，又是另一番景象，像是待上战场的士兵，各个哇哇地背书、刷题，甚至学渣也跟着做做样子。\n\n说完考前，考后又是新一个轮回，考完了，心情无比开心，管他考成什么样，也不管老师留了多么一大堆假期作业，先乐呵着，乐呵完了，趁心情好，怒写一波假期作业，然后相互攀比。\n\n“嘿，你写暑假作业了吗？我数学作业就剩一章啦！”\n“你厉害什么呀，我语文作业就剩一章啦！”\n\n为什么剩一章呢？留个念想呗，刚放假就写完，放着那么长的假期有什么用呢？放心，肯定能写完。\n\n到了假期结束的前一天。\n\n“嘿，你作业写完了吗？”\n“没呢，数学还一章，语文没写...”\n“我也是...语文剩一章，数学没写。”\n“那你给我抄抄呗？”\n“好，你也给我抄抄！”\n\n假期愉快地结束了~\n\n## 工作后\n\n入社会后，第一份工作，很稚嫩，特别是既非名校又没有实习经历的，如果能够通过某公司的面试，得兴奋地跳起来，然后从领导交给自己的第一件事起，小心谨慎，生怕出错，哪件事该怎么做，跟着师傅一步步地学，下班回家可能还会在脑海里回想一下，或者继续充电。\n\n过个两三年，该掌握的技能差不多了，经验也积累了一些，有些人就满足了，神经放松了，业余生活丰富了起来，打打游戏，追追剧，谈个恋爱，旅旅游，这时候你跟他说，要坚持学习呀，听不进，要突破职责边界，拓宽职业道路，觉得多余。当然，也不是不能有业余生活，或者不能玩乐，当然能，必须有，但人总爱走极端，要么死拼，要么玩儿不够，一股子劲儿。等到考核成绩差，工作快丢了，或者年龄越来越大，面临的竞争和挑战越来越大，才猛然发现，自己已经是一只老鸟，一只跟菜鸟差不多水平的老鸟。\n\n所以，中年焦虑不仅仅是社会，是市场造成，很大程度上，也是由人自己造成。你没有和资历相称的水平，失去了和市场谈条件的资本，​自然左右两难。\n\n## 热爱吧，奔跑吧\n\n人活得是个盼头，是个劲头，如果你不热爱、不向往，就没有了乐趣和意义。\n\n求学是马拉松，职业是马拉松，人生亦是马拉松，不需要每天百米冲刺拼劲全力，也不能让偷懒成为习惯停在原地，奔跑吧，慢慢地就好，但不要停~\n\n\n\n\n","tags":["思考"],"categories":["总结"]},{"title":"【轻聊前端】为什么说一切皆对象？","url":"/2021/03/07/why_all_is_object/","content":"\n> 现今各种框架、工具‘横行’，到处在讲原理和源码，更有跨端技术需要我们去探索，但如果基本功不好，学什么都是事倍功半，效果很不好，花费时间的同时打击自信心。此篇文章，为我所计划的【轻聊前端】系列第三篇，旨在系统地、逻辑性地把原生JavaScript知识分享给大家，帮助各位较为轻松地理清知识体系，更好地理解和记忆，我尽力而为，望不负期待。\n\n前端er们经常看到这么一句话：“JavaScript的一切皆为对象”。\n\n也有说“JavaScript是一门面向对象”的编程语言，还有说“不对，JavaScript不具备正统面向对象的特征，应该说是基于对象。”\n\n谁是谁非？\n\n## 我们“不是”对象\n\n上篇文章我们讨论了JavaScript的数据类型，列出了这么几种：\n\nNumber、String、Null、Undefined、Boolean、Symbol\n\n称为基本类型，它们有自己的类型，不可再分。它们是对象吗？\n\n回答这个问题，得先看两个小问题：\n\n- 对象长什么样\n- 对象有什么特点\n\n**长什么样**\n\n第一篇文章里聊编程的时候，我们就定义过对象，长这样：\n\n```\nlet people = {\n    sex:'男',\n    age:20,\n    occupation：'程序员',\n    eat:function(){\n    \t//吃饭\n    }\n}\n```\n\n**有什么**\n\n它有什么呢？\n\n属性：性别、年龄、职业\n\n方法/能力：吃饭\n\n由此看，基本类型并不是对象，**既没有对象的外表，也没有对象的特质**。\n\n## 从“值”到“对象”\n\n我们说过，基本类型存储的是值本身，但如果不论什么时候，值都只是值，那么这门语言等于废了一半的武功。\n\n所以，**当需要的时候，基本类型的值就会被转化成对应的对象**，又称“包装类型”。简单理解，就是被包装成了对象。\n\n就算不懂编程，看过代码的人应该对几个东西眼熟，比如：toString()、parseInt()/parseFloat()等。\n\n如果你到代码里找它们的定义，发现并找不到，哪儿来的呢？\n\n就来源于“包装类型”。\n\n数字、字符串和布尔值对应的包装类型就是“Number、String、Boolean”。\n\n像这样一段代码\n\n```\nlet a = 1;\na.toString();\n```\n\n当运行的时候，会在内部经历三个过程：\n\n- 创建Number类型的实例\n- 调用实例方法toString()\n- 销毁实例\n\n创建实例的过程可理解为执行了这么一行代码：\n\n```\nlet a = new Number(1);\n```\n\n使其具备了和对象一样的可访问属性和可调用方法。\n\n值得注意的是第三步也很关键，即销毁实例，虽然在以上代码执行的当时，变量具备了调用方法或者访问属性的能力，但是，在执行完毕之后实例会被立即销毁，恢复它本来“身份”，这就使得你想再给它添加属性或者方法是不会生效的。\n\n```\nlet a = 1;\na.toString();\na.name = 'a的名字';\nconsole.log(a.name); // undefined\n```\n\nString 和 Boolean 原理同 Number，不再赘述。\n\n除了以上三者，JavaScript中还有几种基本的引用类型，这里一并介绍：\n\n**Date(日期)**\n\nDate是有很多使用场景的类型，比如：生日、文章发布时间、活动截止时间等等，都要用到日期。\n\n这个类型不需要开发者自己定义，可以直接使用，可以拿到毫秒数，也可以拿到具体的年份，月份，星期，时/分/秒等，十分灵活，开发者按照需要进行格式的转换和组合就好。\n\n**RegExp**\n\n正则，一般以正则表达式的形式存在，而正则表达式通常被用来**检索、替换**符合某个**规则**的文本**。\n\n比如我们最常见的，邮箱、电话号码、身份证号，当用户输入一个有格式要求的信息时，在前端交互上就要对数据进行校验，如果格式不符，就提示用户输入正确格式的内容，如果在提交之后再发现不对，体验就很不好了。\n\n示例：\n```\n^[0-9]*$  //匹配数字  \n^[\\u4e00-\\u9fa5]{0,}$  //匹配汉字\n```\n正则表达式有很多符号的属性和规则，能够发挥的作用十分强大，这里不再赘述，读者可以找专门的资料进一步了解。\n\n## 集合引用类型\n\n介绍完基本引用类型，再看集合引用类型。\n\n**Array**\n\n数组用来存储一系列同类型的数据，当然，通常我们是这么做的，但JavaScript中的常规数组不受类型限制，允许存储任意类型的数据。\n\n为什么说数组是对象呢？它和上面提到的一样，具有包装类型 Array。\n\n当我们对其进行访问时：\n\n```\nlet a = [1,2,3];\na.length   // 访问属性  3\na.push(4)  //调用方法  [1,2,3,4]\n```\n均会调起包装类所具备的属性和方法来为我们服务。\n\n**Object**\n\n按理说，讲对象应该第一个提到**Object**，为什么现在才提：\n\n一、它就叫对象。\n\n二、它是用来自定义的对象，本身没有固定的属性和方法，开发者定义了才有。\n\n基于以上两点，它是最好理解的对象类型，就放在后面，当然，关于对象，还会有另一篇文章详细介绍。\n\n除了以上二者，JavaScript中新增了几种集合引用类型。\n\n**Map**\n\nES6之前，存储键值对都是用Object，Map是一种新的类型，它在多数场景下和 Object 表现出的特性一致，但仍存在差异。\n\n比如:\n\n```\nlet a = new Map();\na.set('name','idea');\na.set('age',18);   //使用set添加键值对\na.size     //2 使用size获取键值对数量\na.has('name')   //true  使用has查看是否具有某个键\na.get('name')  //idea 使用get获取某个键的值\n```\n还有其他方法不再赘述，但Map和Object还有两点明显不同：\n\n一是键的类型不再有限制，可以是任意类型。\n\n二是它会维护插入的键的顺序。\n\nPS：其他差异及如何选择使用，后续文章再详聊。\n\n**Set**\n\nSet类型也是ES6后新增的，它跟Map很像，大多数方法和API也是共有的。\n\n但它不是专门用来存储键值对，而是存储值，可以存储任何类型的值。\n\n示例：\n\n```\nlet a = new Set([1,2,3]);  //初始化\na.add(4)  //添加一个值\nconsole.log(a);  //{1,2,3,4}\na.add(4)  //重复添加的值无效\n```\n\nSet使用add()方法添加值，Set同样会维护值的插入顺序且不允许值有重复，这一点给开发过程中的一些场景提供了很大便利，比如常见的数组去重，往常我们需要专门写个方法处理，现在只需要将数组使用Set方法处理一次就好。\n\nPS:Set其他内容同上略过。\n\n## Function\n\n聊完以上几种类型，就是函数了，函数也是对象？虽然我们很少像常规对象那样来用，但它也是对象。\n\n它具备哪些属性和方法呢？\n\n每个函数都至少有两个属性：length和prototype，length表示函数命名参数的个数，prototype则并非函数独有，以上所提及的其他类型的对象也都有，它是保存引用类型所有实例方法的地方，譬如：toString()、valueOf()等。\n\n函数还有三个很有用的方法：call()、apply()、bind()，这三个方法用于将函数调用时的this 指向传给它们的对象。比如：\n\n```\nvar color = \"red;\"\nlet o = {\n    color:\"blue\"\n}\n\nfunction getColor(){\n    console.log(this.color)\n}\nlet objectColor = getColor.call(o);\nobjectColor();  // \"blue\"\n```\n如果没有call，输出会是 \"red\"，现在是 \"blue\"。\n\n除此之外，函数曾经有过一种重要用途——**构造函数**。\n\n```\nfunction Person(name, age, job){\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function(){\n      alert(this.name);\n      }\n};\n\nvar person1 = new Person(\"tom\",18,\"teacher\");\nvar person2 = new Person(\"lili\",16,\"doctor\");\n```\n\n在ES以前的版本当中，这曾是很流行也很经典的一种定义“类”和创建“实例”的模式。\n这里的函数和普通函数没什么区别，区别就在于使用了new关键字，从而触发了内部的一些特殊处理，这里点到为止~\n\n## 其他内置对象\n\n**Math**\n\n除了Date对象，Math对象是另一个非常有用的内置对象，有很多实用的方法，比如：\n\n- 求最大、最小值——max()/min()\n- 四舍五入、上下取整——round()/ceil()/floor()\n- 随机数——random()\n- 绝对值——abs()\n...\n\n这些方法为数字处理提供了极大便利。\n\n**Window**\n\n有些对象在开发时并不会显式调用，有些属性和方法也不属于以上提到的任何一种对象，比如：全局定义的变量和函数，内置方法parseInt()和parseFloat()等。window作为浏览器中全局对象的代理对象就担当了这么一个角色，它们自动归属于window。\n\n同时，很多浏览器API及相关构造函数都以window对象属性的形式暴露出来，以便开发者使用。\n\n常见的有窗口宽高、像素比、滚动、打开窗口等，都是window对象的范畴。\n\nwindow对象并不孤独，它属于BOM（Browser Object Model）浏览器对象模型这个大的类当中，BOM是很丰富的，这里简单介绍一下其他包含在BOM中的对象：\n\nlocation对象：可获取所访问的URL的各种信息（协议、域名、端口号等）。\n\nnavigator对象：客户端信息（名称、网络、电池、地理位置、语言、多媒体设备等）。\n\nscreen对象：屏幕宽高、屏幕朝向等。\n\nhistory对象：当前窗口用户的导航历史记录。\n\n## 总结\n\n行文至此，可以告一段落。\n\n为什么说完变量就说对象？这和很多文章的逻辑都不一样，本文并没有意图说清楚所有对象，只是帮助大家理清这么个关系。\n\n你也看到了，就算是基本类型，它们也有对象的表现，在使用过程中会触发对象的行为（访问属性、调用方法），另外有若干内置对象可供使用，如果没有“它们也是对象”的概念，后面很多东西就是说不通的，难免有困惑。\n\n但这就是“一切”了吗？\n\nJavaScript程序的整体是由ES、BOM、DOM文档对象模型（Document Object Model）组成，上文只提了ES和BOM，DOM同样也是对象，不仅如此，跟DOM紧密相关的“事件”也是，包括我们在业务当中会接触到的File，前后端请求用到的XMLHttpRequest等等，它们都是对象。\n\n那么，回到文章开头，说JavaScript是基于对象的编程语言是相对准确的，它整个运行在由多种对象构成的系统里，建立了这样的认识之后，再去看JavaScript的程序，就清晰很多，因为大多的程序都只是在干一件事儿：\n\n>创建某个对象的实例，访问或者改变属性，调用方法。\n\n好了，我们下篇文见~","tags":["分享"],"categories":["JavaScript"]},{"title":"【轻聊前端】小角色，大用途——变量","url":"/2021/02/26/wechat_varible/","content":"\n> 现今各种框架、工具‘横行’，到处在讲原理和源码，更有跨端技术需要我们去探索，但如果基本功不好，学什么都是事倍功半，效果很不好，花费时间的同时打击自信心，所以，踏实学好基础是前提。此篇文章，为我所计划的【轻聊前端】系列第二篇，旨在系统地、逻辑性地把原生JavaScript知识分享给大家，帮助各位较为轻松地理清知识体系，更好地理解和记忆，我尽力而为，望不负期待。\n\n上篇文提到，不论什么程序语言，都在做三件事：\n\n**数据存储、数据处理、数据传输**\n\n本文就聊存储。\n\n存储，即为数据找到一个空间来存放，这个空间的载体就是“变量”。\n\nJavaScript发展到现在，数据类型没有大的变化，但声明数据的方式发生过明显变化。\n\n先看数据类型。\n\n## 数据类型\n\nJavaScript当中的数据类型有7种（原本是6种，ES6之后新增一种）：\n\n字符串（String）、数字（Number）、布尔（Boolean）、Null、Undefined、符号（Symbol）、对象（Object）\n\n它们又分为**基础类型**和**引用类型**。\n\n基本类型可理解为——**不可再分的，不包含任何其他类型的类型**，存在空间中的就是值本身。\n\n如：String、Number、Boolean、Null、Undefined、Symbol\n\n而引用类型，存的是一个地址，这个地址又可以存放各种不同类型的数据，包括“基本类型”和“引用类型”。\n\n如：Object、Array等。\n\n用一个简单的例子来看它们的区别。\n\n基本类型\n```\nvar a = 3；\nvar b;\nb = a;\na = 4;\nconsole.log(a);  //4\nconsole.log(b);  //3\n```\n引用类型\n```\nvar c = {\n    name:'张三'\n} \nvar d;\nd = c;\nconsole.log(d.name);  //张三\nc.name = '李四';\nconsole.log(d.name);  //李四\n```\n可以看出，基本类型在传递时，相当于把值拷贝了一份，二者相互不影响，而引用类型的赋值行为仅仅传递了地址，它们指向的仍是同一个空间，所以一个变另一个也会变。\n\n注意措辞：“赋值行为”。并非不能够做到相互不影响，只是单纯地“赋值”做不到。\n\n这就引出了前端圈经常讨论的话题——**深拷贝**和**浅拷贝**，先提一下，不细说，领会引用类型是什么即可。\n\n关于基本数据类型，看似不打眼，但几乎每份前端笔试题里都会有它，也正因为平时不太在意，写错、写漏、多写的情况经常发生，应该怎么记呢？\n\n- String和Number很好记，只有数字能够进行数学运算，而字符串通常用来表示文本信息。\n\n- Boolean，用于条件判断，true（真）/false（假）。\n\n- Null，只有值null；\n\n- Undefined，只有值undefined；\n\n前面三种较好理解，只需注意后两种。\n\n从逻辑上说，null是空对象指针，访问不存在的对象时会是null，也常用null来初始化一个尚未赋值的对象；\n\nUndefined是为了区分null和未赋值变量而添加的，“未赋值变量”包括基本类型变量、数组中没有值的索引位及未定义值的对象属性等。\n\n如此以来，前五种基本类型就记住了，再加上ES6新增的Symbol，就是完整的基本类型。\n\n至于同样很常见的Object、Array、Function之类，都不是，为什么，它们符合“不可再分，不包含任何其他类型”吗？显然不~\n\n## 变量声明\n\nES6之前，声明一个变量只能用 var 关键词，ES6之后多了 let 和 const。\n\n后两者和前者的区别就是，后两者使得JavaScript当中具备了**块级作用域**。\n\n提到“块级作用域”，就先讲一下什么是“**作用域**”。\n\n顾名思义，作用域就是能够起作用的区域，起什么作用？——**可获取，可操作**。\n\n作用域跟什么有关呢？跟在哪里声明有关，即**声明位置决定作用域**。\n\n而且作用域遵循“由内向外”的查询规则，先就近在小的范围查询，查不到再往外，直到全局作用域。\n\nES6之前，JavaScript当中最为大家熟知的就是“全局作用域”和“函数作用域”。\n\n**var**\n\n比如:\n\n- 在代码的最外层定义一个变量a\n\n```\nvar a;\n```\n它就属于全局，其他任何代码都可以对其进行访问或者修改。\n\n- 在函数当中定义一个变量a\n\n```\nfunction test(){\n  var a = 10;\n}\ntest();\nconsole.log(a)  //Uncaught ReferenceError: a is not defined\n```\n会得到a并没有定义的报错。\n\n但也存在另一种“疏忽”的情况，就是未使用 var 关键字\n\n```\nfunction test(){\n  a = 10;\n}\ntest();\nconsole.log(a)  //10\n```\n这时a会暴露到全局，又可以被访问，这类疏忽最好不要犯。\n\n只有“函数”才有自己的作用域吗？严格说不是，但因为那些语句少有使用场景且背离最佳实践，所以暂不了解也没有影响。\n\n**let**和**const**\n\nES6之前没有真正被广泛定义的“块级作用域”。\n\n“块”是指“代码块”，被大括号包裹起来的一段代码可以看做一个代码块。如if、while、function等。\n\nJavaScript当中的变量除了被定义在全局，就是被包裹在各种代码块中，但并不代表它们被限制在了代码块中。\n\nlet、const，和var最明显的三点不同。\n\n- 将变量限制在了代码块\n- 不可重复定义\n- 不会被提升\n\n一个个看.\n\n**块作用域**\n\n```\n\nif(true){\n    let a = 4;\n    const b = 6;\n}\nconsole.log(a,b)  //undefined undefined\n```\n\n我们在if条件判断的代码里定义了两个变量a,b，外部访问均为undefined，这说明，在if代码块的外部无法正常访问代码块内定义的变量。\n\n**重复定义**\n\n```\nif(true){\n    let a = 4;\n    var a = 6;\n}\nUncaught SyntaxError: Identifier 'a' has already been declared\n```\n\n变量a已经被let声明，就不能再次被声明。\n\n**不被提升**\n\n前面没有说提升，放在这里刚好做比较。\n\n使用 var 声明的变量，在其作用域内会被提升到最顶部，以便被其他代码使用。\n\n```\nfunction test(){\n  console.log(a)  //undefined\n  var a = 10;\n}\ntest();\n```\n咦，这不是 undefined 么，也不是 10 啊，提升到哪了？\n\n“坑”就在此。\n\n```\nvar a;  //这叫'声明'\nvar a = 10; //这是在声明的同时定义初始值\n```\n所以，提升**只是声明被提升，而赋值未提升**，才会看到上面输出的是undefined。\n\n当然，变量提升不止如此，函数（function）同样，可以在声明函数的前面使用，到函数部分再详聊。\n\n上面说了最明显也是最重要的三个区别，还有一个区别，即在全局定义变量时，使用 var ，变量属于全局对象 window，而使用 let 和 const 不会这样。\n\n再来看 let 和 const \n\n```\nfunction test(){\n    console.log(a,b);\n    let a = 10;\n    const b = 10;\n}\ntest();  //Uncaught ReferenceError: Cannot access 'a' before initialization\n```\n这段代码甚至没走到声明变量的地方就报错了，在初始化之前不能访问变量a，就证明 let 和 const 的声明不会被提升。\n\n值得说明的是，虽然ES6之前的 var 存在提升的现象，但比较提倡的做法仍是在所属代码块的顶部将所有变量一起定义，而不是随意散落在代码段中，ES6中增加了 let 和 const 后更是如此，像这样：\n```\nfunction test(){\n   let a = \"\",\n   \t   b = 0,\n       c = true;\n   //其他代码\n}\n```\n说完 let、const 和 var 的区别，说说 let 和 const 的区别。\n\nconst 可看做 constant 的缩写，constant 的意思是“固定的、常量”，即不可修改。\n\n所以，**const 在声明的同时必须赋值，且在使用范围内不可修改**\n\n其实ES6之前，我们就需要在程序中定义常量，且约定常量使用大写字母和下划线结合的方式命名，比如：MAX_COUNT。\n\n至于是否可变，就靠程序员来遵守规则，程序员往往是不可靠的...\n\nconst的出现从语言层面加了限制，使其不可更改。\n\n```\nconst a = 7;\n      a = 8;\n//Uncaught TypeError: Assignment to constant variable.\n```\n可以看到，用 const 定义了一个变量并赋值之后，改变它的值时就报错了。\n\nbut，并不是用 const 声明的一切都不可更改，**const声明的限制只应用到变量类型的最外层**。换句话说，如果变量类型为基本类型，其本身不可更改，如果是引用类型，则引用类型本身受限制，键不受限制。\n\n像下面这样就可以正常运行。\n\n```\nconst a = {\n    name:'张三'\n} \na.name = '李四';\nconsole.log(a.name)  //李四\n```\n\n综上，现在定义变量依然可以使用 var，但多数项目中都已被 let 或 const 占据，所以，在确定值不变的情况下就用 const，否则可使用let。\n\n## 变量命名\n\n很多人在刚学编程时不会想到，**命名**会是个让人头疼的问题。\n\n有几个方面原因：\n\n一、本身词汇量匮乏\n\n二、每个变量都会有关联变量，无形中增加了用词量\n\n三、不仅意思要对，还不宜太生僻\n\n四、要考虑适用范围，较通用还是更具体，某种程度上也会形成一个“命名空间”。\n\n大致需要遵循如下几个原则：\n\n- 表意\n较为明晰地表达意思，比如：\n\n是什么，isXX\n\n有什么，hasXX\n\n干什么，getXX\n\n等等。\n\n- 统一/通用\n业界通用结合团队通用，这样一来，不论是团队进新人，还是你突然要介入一个新项目，都不用花太多时间或沟通成本来搞懂程序的意图和逻辑。\n\n- 少定义全局\n一、全局变量是一直存在的，长期占用内存。\n\n二、全局变量全局可用，这就为其修改增加了不确定性，增加了意外出现的风险。\n\n所以多数情况下，我们只需定义必要的全局变量，其他变量定义在局部就好。\n\n- 少定义变量\n\n语言本身对变量的定义是不限制的，所以容易变得随意，减少不必要的变量定义，可以适量减少存储空间、传递次数和处理环节。\n\n但也不必矫枉过正，还是要兼顾“简洁、高效、易读”，仅仅简洁了，却很难读，就得不偿失了。\n\n## 附赠\n\n- 常见面试题之 变量如何存储？\n\n基本类型存储在**栈**中，引用类型存储在**堆**中。\n\n栈：只能在某一端进行添加或者删除的数据结构，比较形象的比喻是“叠盘子”，后进先出。存取速度较快，但数据大小和生命周期确定。\n\n堆：生活中有“书堆”、“垃圾堆”等，指可动态分配的空间，用于动态分配和释放程序所使用的对象。因为对象可以扩展，放在堆中可以不断扩展。\n\n- 常见面试题之 for循环——输出几？\n\n```\nfor ( var i=1; i<=5; i++) { \n    setTimeout( function timer() { \n        console.log( i ); \n        }, i*1000 ); \n}\n```\nsetTimeout是定时器函数，由“时间间隔”和“回调函数”组成，可以在某间隔时间后执行特定动作，如上是打印一个值。\n\n按道理，这段代码应该是隔一秒输出一个数字，从1到6。\n\n实际情况是，连续输出5个6，为什么？\n\n一、for中用var定义的变量会泄露到全局\n\n二、setTimeout是异步函数，javascript代码在浏览器中执行的任务是有优先顺序的，当异步函数执行的时候，外层循环已经进行完毕，即i的值已经被加到6。\n\nES6之前，解决这个问题的常见方法是“闭包”，这个后面会聊，但ES6之后，有了更方便的处理方案，就是使用let来声明变量i。修改如下：\n\n```\nfor ( let i=1; i<=5; i++) { \n    setTimeout( function timer() { \n        console.log( i ); \n        }, i*1000 ); \n}\n```\n这个时候，当循环每进行一次，变量i都进入了一个独立的作用域当中，然后被单独输出，就会得到预期的结果。\n\n## 总结\n\n到此，关于“变量”的讨论告一段落。\n\n标题叫“小角色，大用途”，因为变量就像是程序大楼的一砖一瓦，很不起眼，却无处不在。\n\n常用的数字、字符、对象、函数、数组等等，不论简单或是复杂，都是数据，都存储在变量中。\n\n不仅如此，变量还能起到“缓存”的作用，比如，经常会获取页面DOM元素的时候将其保存在一个变量内，然后拿这个变量去做其他的事，或者把从数据库当中请求回来的值存到一个变量中，后续再用直接拿变量的值，毕竟DOM查询和发请求拉数据都需要时间，这无疑节省了时间。\n\n编程正是由于变量的存在而被赋予无限可能，如果没有变量，都是固定的值，就没有变化和个性可言，有了变量，就能在需要的时候产生不同的数据，构成各种丰富的、个性化的网页内容。\n\n聊的够多了，我们下篇见。\n","tags":["分享"],"categories":["JavaScript"]},{"title":"【轻聊前端】编程是什么？","url":"/2021/02/22/what_is_coding/","content":"\n最近在知乎上看到个问题。\n![知乎回答](/img/what_is_coding/zhihu_question.png)\n然后微博上有网友评论说：这就是“道”。\n\n写的时候没想那么多，但这么形容也没错，这篇文章，就聊聊编程的“道”。\n\n提到编程，多数人会有一个印象：一面黑色屏幕上，密密麻麻的代码。\n\n那一行行代码是什么呢？专业的人也需时间去读懂，对于其他人，无异于天书。\n\n其实大可不必，不懂程序，无非两点：\n\n一、**不知缘由，没有头绪**\n二、**不懂概念，不会用法**\n\n## 积少成多\n\n笔者计算机专业出身，但前端开发不在课程范围，算是自学一点皮毛，刚参加工作时，公司电脑还没到位，没法干活，确切地说也不会，就按照主管的吩咐坐在导师旁边看了两天，提的第一个问题就是：“这么多代码都是你写的？你怎么知道哪里是什么呢？”\n\n导师对我说：“这些是我一行一行写出来的，我自己的定义和设计，当然知道是什么了。”\n\n所以，代码不管是一行、一百行、还是一万行，都是由开发者一个个敲出来的，都有其来由和目的，不必被代码量吓到，这是其一。\n\n## 现实天然是程序\n\n知道了代码是积少成多的，那么代码本身是什么？\n\n代码是由计算机能够理解的语言写出来的东西，跟人能够理解自然语言一个道理，而且两种语言之间有着对应的关系，每一个熟练的程序员都会在编程的时候在脑海中自动地转换。\n\n程序设计语言多种多样，每一种都有其擅长做的事情，普通的开发岗位不会要求一个人懂多种语言，会有所分工，比如：前端至少要掌握HTML、JavaScript、CSS，而后端要掌握Java、Go、Python之类的语言和数据库等。\n\n但不论是什么语言，写出的程序都在做三件事：\n\n**数据存储、数据处理、数据传输**\n\n本系列文章就来跟大家分享一些使用JavaScript编写程序的知识。\n\n问题来了，怎么写？探索怎么写，要先了解一件事情，什么是程序。\n\n**现实天然是程序**，拿人一天的生活举例：\n\n到点闹钟响起，起床——穿衣、洗漱——出门（如果有垃圾把垃圾带着）\n——交通（有车的开车，没车的由路程及便利性决定是步行、单车、公交还是地铁）——早餐——上班——开会——搬砖/修bug——加班——下班——交通（同上班）——晚餐——娱乐/读书/锻炼…——玩手机——睡觉。\n\n程序员的一天大体如此。\n\n跟写好的一段计算机程序一样，一行行执行，一件件做。\n\n那么这段描述用编程语言如何表达？它们有着怎样的对应关系？\n\n**对象**：人\n\n**属性**：性别、年龄、职业、所在公司等。\n\n**流程**：起床、穿衣洗漱…\n\n流程中的某些环节带着条件判断（有无垃圾、选择哪种交通工具）\n\n**方法**：吃饭、搬砖。\n\n编程就是这么个路子。\n\n具体到写代码，该如何着手和处理呢？简单概括如下：\n\n**定义变量**：当需要存储一个数据，不管是什么，数字、字符串、对象等，都可以定义一个变量。\n\n**定义函数**：当需要执行某个动作，而且需要重复执行，就可以封装一个函数（或者叫方法）。\n\n**条件判断语句**：当需要根据不同条件执行不同动作，就用到了条件判断。\n\n**绑定事件**：当需要点击、滚动、触摸等得到反馈，就用到了事件。\n\n**操作DOM**：当需要获取/操作网页上的元素，就用到了DOM。\n\n…\n\n简单吗？简单，但也不简单，那又复杂在哪里？\n\n## 丰富的工具箱\n\n为什么要写程序，“人的想法”加上“程序的本领”来满足日常需求，需求是多种多样的，“巧妇难为无米之炊”，如果语言本身不具备那个能力，程序员又如何做到呢？\n\n什么能力？譬如：\n\n画图(CSS/SVG/Canvas)，音视频(Audio/Video)，地理位置(Geolocation)，通知(Notification)…\n\n先抛开特定场景的需求不谈，最常规的人机交互，也需要DOM/BOM这些浏览器提供的接口来做到。\n\n故而，语言所具备的，多种类型的数据，每种类型所具备的属性和方法，繁多的特点、特性、API，都是为我们编写程序提供便利的，是丰富的工具箱。\n\n面对这个工具箱，你可能惧怕太多东西一时无法记住，但当你需要的时候，又会庆幸它们的存在。\n\n## 优雅的代码\n\n我们做每件事情，都是从不会到会，到熟练，再到强大（规模上）、细致（细节质量）的。明白了怎么写程序，有什么“工具”可用，就是个能做事的程序员了，但离优秀的程序员还有距离。\n\n如果你编码经历尚少，或许觉得有点故弄玄虚，但迟早会有所体会。\n\n优雅的代码是什么？笔者认为，需要综合考虑多方面因素，而不只是“代码量少”、“实现巧妙”等。\n\n**组织性**\n\n说白了，就是文件的命名及存放，业界有不少做法，占比最大的是两种：\n一、按文件类型，html、js、css，图片，每个大类里又可按照用途划分小类\n二、按业务模块，首页、登录、个人中心等\n\n当然，也可以将二者进行适当的结合。\n\n合理的代码组织，能够使得一个大型项目的代码显得多而不乱，利于维护、查找问题，也利于团队协作。\n\n**可读性**\n\n有句话说得好——“代码是写给人看的，顺便给机器运行”。\n\n给机器运行的代码只要没有语法错误，怎样都可以，但人不行，还有另一句自我调侃的话叫“我现在写的代码是干什么的只有上帝和我知道，再过两个月就只有上帝知道。”\n\n这就很不好，没有任何一段代码是能够保证不再回头去看、去调整，或者某一天交到别人手里维护和加工，如果不易读，是一件左右为难的事，继续用，该怎么写保持风格不变且不出问题，不用，代码冗余会增多，且可能越来越乱，不可收拾。\n\n**健壮性**\n\n也可理解为“适应性”，越健壮的代码，越能适应更多场景甚至状况，越少出现问题，两个简单的例子，你的网页是否能够在iphone5和iphone12上都能良好展现，或者当页面图片加载失败/文件找不到，是否有备用措施来弥补，以使用户体验不会大打折扣。做好了这些，代码靠谱，人也靠谱~\n\n**扩展性**\n\n也可理解为代码的通用性、复用性，比如，网页换肤、根据用户的不同身份展示不同内容，在现有的模块当中持续地添加新的模块等。代码扩展性越好，迭代过程的成本就越低。\n\n**性能**\n\n在编程领域，性能问题百说不厌，具体到代码层面，就是代码的执行时间，体验是否流畅。\n\n同一件事情用代码可以多种写法，除了“写对”之外，还要考虑是否够快，能否给用户的操作提供符合预期的反馈，多是细节，这里不赘述。\n\n以上几点，如果做不到，程序也能正常运行，但做得到，对自己持续性的编码，对用户体验，对团队协作，都是很有利的，也会给他人留下好的印象。\n\n## 代码之外的工具\n\n如果只写页面，三驾马车足够，但随着技术迭代，需求变更，项目规模等变化的发生，有追求的程序员们动用自己的聪慧和技术做出很多更利于现代开发的工具，比如：npm（包管理器）、gulp（任务处理工具）、webpack（模块打包工具）等，当然，还有丰富的组件库和流行框架，起初这并不是一名开发者的必备技能，但它们的确因为提供了便利而被广泛使用，久而久之成为标配，你可以不全学，但不能都不会，这就成了编程语言之外我们需要学习的东西。\n\n上述的内容，构成了一名前端开发者在当下需要掌握的技能的主要部分。\n\n## 总结\n\n到这里，你应该大体看到了编程是什么样子，它不难，但对于初学者足够复杂，需要，也仅仅需要投入足够多的时间就能征服。\n\n后面我们一起征服~\n\n\n\n\n\n","tags":["分享"],"categories":["JavaScript"]},{"title":"我们这一生，努力便是最好的奖励","url":"/2020/12/25/hardly_to_happy/","content":"\n>我们一生的追求\n>\n>无非是\n>\n>想要的生活\n>\n>和想要的自己\n\n毕业那年，南下深圳，一堆东西，朋友说快递过去，但费用太贵，只寄了被子和衣服。\n\n工作两年，搬三次家，每次拖着行李挤公交，来回跑几趟，下雨天就更惨。\n\n第五年，终于可以叫货车搬家。\n\n第七年，依然挤着地铁，住城中村。\n\n......\n\n我崇尚纯粹的理想，可是在2020，经历了离职、疫情、生娃，终肯直面现实——作为普通人，“想挣更多钱”的想法一点都不俗，它跟铜臭味无关，是过上理想生活的基本前提。\n\n## “对”的事需要勇气\n如果可以，裸辞一定不是好的选择。\n\n一年前，也就是在鹅厂工作五年之后，我做了这个选择。\n\n原因有很多，工作不顺是其一，职业转型是其二，更重要的，是来自家人的支持和鼓励。\n\n爱人说：你想好了，觉得对的就去做，实在不行，我们可以回老家去过平凡的生活，也挺好。\n\n她的想法通常简单到不顾后果，我都不会当真，但往往想太多只会束缚手脚、一拖再拖，所以这次听她的。\n\n行动之后就会发现，绝路很少，退路很多，看不到的前方多走几步就看到了，连续的失败隔天可能就是成功。\n\n“对”的事需要勇气，感谢爱人帮我做了“对”的决定。\n\n## “对”的事就去付出\n之前的几年，我写了很多有关生活的文章，幻想有一天能出书，成为作家，但没人能随随便便成功，哪怕自认为的一点点天分，也只是千万个自认有天分的人之一，更何况，很多人比我更努力，我凭什么？\n\n于是辞职后又把重心转回职业本身，也算还以前欠下的债。\n\n职场中动力最足的有两种人，刚入职场的嫩鸟，和不上不下的老鸟，后者也就是爱谈“中年危机”那群人，我显然更接近后者，怎么办，只能自助。\n\n没读过的书找来读，读过的书重新读，以一名嫩鸟的心态看待本职，放下包袱，弥补不足。\n\n过程中重新认识了两个道理：\n\n1、大多的不自信，只是因为陌生，而不是真的不行。\n\n2、再简单的东西，不懂都很正常，“反复”是最好的法宝。\n\n大半年过去，效果不错，最难的坎儿过来了，纵使前路仍漫漫，又有何惧？\n\n## 努力便是最好的奖励\n什么是真正的收获？\n\n高中时出黑板报，我花很久写了一首诗，最后没被采用，回家跟爸抱怨，爸说，不用气馁，没有白费，起码你写出了让自己满意的一首诗，对自己是一种锻炼。\n\n今年有不少公司倒闭，不少人失业，也有很多人没有年终奖，我就没有，钱多当然好，但相比这一年的付出和收获，就没那么重要了，努力便是最好的奖励。\n\n我还在路上，看接下来会发生什么。\n\n## 后记\n\n公众号上次发文是4月5号，断更比坚持更难，是对订阅者失信，也是对我自己失信，但我仍忍痛断更，原因很简单，我不想为了坚持而坚持，与其花很多时间去找一些前后不相干的，甚至质量并不是很好的文章发出去，自己充电的时间也被占用，不如我先下功夫好好提升自己，然后把真正能帮到大家的干货分享出来。\n\n短暂地停歇只是为了更好的出发，所以接下来会推出一系列前端知识分享，形式包括“文字”和“B站视频”，内容包括“原生JS、Node、设计模式、算法”等，2021，我们共同进步！\n\n\n","tags":["经历"],"categories":["总结"]},{"title":"为什么要持续学习","url":"/2020/10/11/why_we_need_always_study/","content":"\n工作原因，半年没有更文，偶为一事所动，聊一些东西。\n\n## 路和眼界\n\n先说一点看似无关的背景。\n\n今天周日，跟家人出门，本想去宝安人民政府，那里有一块大空地，还有草坪、绿植，很适合休闲放松。\n\n有一定距离，但不是特别远，所以没有坐车，步行减减膘，快到的时候，路过宝安体育馆，家人说要不就到那儿溜达一下。\n\n将近一个小时的时间，晚上6点，看天不早了，索性直接回家，又不好再走原路，就顺着宝体门前那条路往前走，刚到路口，就听家人说了句：“你看那栋楼是大仟里（住处附近的商场）旁边的吗？”\n\n我顺着指的方向看了一眼，带着嫌弃的语气说：“怎么可能，哪儿跟哪儿啊。”\n\n接着往前走，走过两个路口之后，我看手机导航，产生了自我怀疑，地图显示是一条直线，而且快到了，难道...我往前看了一眼，居然真的看到前方的路口就是家附近的那个路口，而之前家人提到的那栋楼也确定没错了。\n\n那时那刻，我既惊讶，又惭愧。惊讶于，原来我现在住的\"坪洲\"和之前住的\"翻身\"是这样一个相对位置，原来宝体门前那条路可以直接通到坪洲地铁站；惭愧于，我又一次武断地认为本来可能正确的东西是错误的。\n\n结论就是，原本我想象中需要绕挺远的路才会到的地方，其实出门之后左转直走大概十几分钟就到了。\n\n**一切误解都因为那段路我没走过**，这情形何等的熟悉，生活又给我上了一课。\n\n而它的意义不止于此。\n\n几年前住同乐村的时候，位于南山区，而翻身在宝安区，且从没去过，它在我眼里就是犄角旮旯；住翻身的时候，生活和交通都很方便，也很繁荣，又觉得坪洲是犄角旮旯，就这样一次次地转移，哪怕就在一个城市，甚至一个区，我都不知道它们之间有着怎样的联系。\n\n所以，如果你不曾涉足，哪怕一个地方跟你只有一墙之隔，一街之隔，你对它就是陌生的，这是多么可怕却又平常的事情，这就是认知的局限。\n\n## 持续、反复学习\n\n以上算是引子，但和正题紧密相关。\n\n生活的路和学习的路类似，生活的见识和学习的知识也类似。\n\n学习的过程无非是知道、记忆、熟练和理解，而这个过程不能一蹴而就，需要“持续”和“反复”。\n\n“持续”和“反复”有重叠的部分，“反复”的表现也是“持续”，没有断掉，但二者还是有区别。\n\n“反复”在内容，“持续”在行为。\n\n“反复”可以让我们对已有的知识更熟练。\n\n“持续”则侧重尝试、探索，突破边界，就如上面所述走更多的街道一样。\n\n不论你是新手，还是老手，都或多或少存在两个问题：\n\n- 某个知识点，学过，但慢慢模糊了，忘了\n- 随着工作内容的稳定，岗位的稳定，掌握的知识够用了，很长时间没有长进了\n\n不瞒你说，这两个问题我都有，而且是过了而立之年，到了所谓“中年危机”的时候才被激发着做出改变。\n\n改变之一：不自满。\n\n认为自己熟到不能再熟的东西，不会像之前那样“永远不管”，而是重新翻开资料（比较新或经典的优质资料）再看，看一种也不够，多看，这样就会在并不完全重复的情况下去巩固同一块知识点。\n\n如果你也做了这件事，就会有两点发现：\n\n一、就算再熟，也只是你的视角和经验领域，别人总会给出你没有的\n二、确实还不够熟（不信去面试看看？）\n\n即使你没有做这件事，想必也有过看别人在分享知识点或者解决方案的时候发出惊叹：原来可以这样？\n\n你就知道自己还有一些东西是缺失的。\n\n改变之二：不局限。\n\n以前我不会去碰岗位技能之外的东西（业余阅读除外），虽然我知道有些牛人很博学，也只是默默地佩服，而不觉得自己要怎样。\n\n但其实，有些东西就真的是“岗位之外”么？\n\n职场普遍存在一种类型的员工叫“螺丝钉”，大厂尤为明显，介绍的时候会说，业务有多丰富，技术栈多广，你的空间多大，但如果你去的时机不对，选型不需要你做，架构不需要你做，工具不需要你做，构建部署不需要你做，库也不需要你做，简单说，什么都不需要你做，听产品经理安排需求然后写bug就好~\n\n那么，这样的工作内容能给你带来多大的锻炼和成长？你的工作内容等于岗位需要的技能和经验范畴吗？显然不是。\n\n**“不需要管”的轻松工作才是最危险的**，不曾面对困难和问题，就不会有相应的能力，就失去了提升自己，增强竞争力的机会。\n\n走出局限并不可怕，它之所以成为很多人的一道坎，不是能力问题，是惰性使然。这其实就像玩儿一种新的游戏，很有趣，而且会消除它在你心中的神秘感，觉得“不过如此”，增加新技能的同时，也会增强征服更多领域的勇气。\n\n所以，不要只看着自己眼前的一亩三分地，要有清醒的认识，做的项目是暂时的，它需要的技能也是暂时的，但你不能由此就让自己的能力也是暂时的，你需要能够hold住更多东西，哪怕仅仅出于兴趣或者追求，这样，当有一天产生变化，或者考虑寻找新机会的时候，别人问“谁行”，或者“你行不行”的时候，你可以自然地说出“我行”，那你就真行了。\n\n## 小结\n\n已经说不少，也没有新的观点，但会随着时间推移，经历的不同，有新的感悟，遂重新沉淀、凝结出一点东西分享出来，可能少有岗位是需要走出校门之后还学很多理论的东西，去理解，去记忆，去挖耳挠腮，并且会更新换代、拓宽到令人望而生畏的地步，使“持续学习”变得必要，但换个角度看，这何尝不是行业的幸事，说明它仍在蓬勃发展，有很大市场，这是我们广阔就业空间存在的前提，也是设想美好职业道路的前提。\n\n欢迎交流，End~","tags":["思考"],"categories":["思考"]},{"title":"防抖、节流及应用","url":"/2020/05/15/debounce_throttle/","content":"\n“防抖”和“节流”是很多公司的面试常见问题，有些人不知道是什么意思，有些知道意思，却难以分清两者的区别，还有一些人，明白二者区别，但没有遇到过合适的应用场景，以至于无法真正理解它们，本文就试图把这些问题逐个击破。\n\n## 防抖\n\n顾名思义，防止抖动，什么叫抖动，事件被高频触发，想象你在用鼠标点击按钮操纵一个小人让他有跳跃的动作，你狂点鼠标，小人狂跳，这就是最直观的抖动现象。\n\n现在我们需要防止抖动，怎么做呢？当我们快速点击鼠标的时候，仅有一次动作是生效的，就可以解决这个问题。\n\n怎么做呢？这就取决于鼠标点击的有多快，也就是我们设定一个时间，当两次点击的时间间隔小于那个时间，就只有最后一次点击才会生效。\n\n这也就可以引出“防抖”的定义：**任务频繁触发的情况下，只有触发的间隔超过指定间隔，任务才执行**。\n\n用代码来表现就是：\n\n```js\nfunction debounce(fn,delay) {\n    let timer;\n    return function(){\n      let args = arguments;\n      if(timer){\n        clearTimeout(timer);\n      }\n      timer = setTimeout(()=>{\n        fn.call(this,args);\n      },delay)\n    }\n}\n```\n\n使用的话可以像下面这样：\n\n```html\n<div>\n    <p class=\"text\">1</p>\n    <button class=\"btn\">点击加一</button>\n</div>\n```\n\n```js\nlet btn = document.querySelector(\".btn\");\nlet txt = document.querySelector(\".text\");\n\nbtn.addEventListener(\"click\",debounce(()=>{\n  console.log(\"执行一次\");\n  txt.textContent++;\n},1000))\n```\n\n大家试着在浏览器里运行这段代码，就会发现，只要我们两次点击的间隔小于一秒，那么多出来的点击就是无效的，只会最后一次生效，也就是说，如果慢慢地点击\n\n\n\n其中的奥秘就在于，每次点击时，只要timer还在，就清空定时器重新计时。\n\n## 节流\n\n可以这么比喻，节流就像排队，比如我们在车站候车，当听到检票进站的通知，不论你有多紧急，跑得多快，还是得跟着排队，一个个地过闸机口，你的通过速度不可能比闸机口开关的速度更快了。\n\n引出定义：**指定时间间隔只执行一次任务**。\n\n到这里你可能会困惑，防抖也有时间间隔，节流还是时间间隔，它俩啥区别？\n\n好的，到这里，你遇到了区分它们的唯一一个难点。\n\n防抖：超过指定时间间隔，不论点击多少次都只执行一次。\n节流：指定时间间隔只执行一次，执行频率不受操作频率影响，但会把所有的都执行完。\n\n所以我们继续看代码：\n\n```js\nfunction throttle(fn,delay){\n  let flag = true;\n  return function(){\n    if(flag){\n      flag =false;\n    }\n    timer = setTimeout(()=>{\n      fn();\n      flag = true;\n    },delay)\n  }\n}\n```\n","tags":["JavaScript","学习"],"categories":["总结"]},{"title":"this指向知多少","url":"/2020/05/08/js_this_guide/","content":"\n”this“在JavaScript中很常见，用起来也很”香“，每当我们想访问一个值或者设置一个值，常会用到它，原生和框架都是，但它同时又让人困惑，使我们写的代码达不到预期效果，甚至引起bug，本文我们就来看看，this的指向遵循哪些规律。\n\n## this等于自己？\n\n先看几个看似正常却错误的理解。\n\n### 指向自身\n\n比如下面这段代码：\n\n```js\nfunction add(num){\n  //记录add被调用的次数\n  this.count++;\n  console.log(\"计数\" + num)\n}\nadd.count = 0;\n\nadd(1)\nadd(2)\nconsole.log(add.count) // 0\n```\n\n可以看到，结果跟预期的不一样，count未发生改变。\n\n实际上，这段代码无意间创建了一个全局变量 count，在执行add的时候，并未改动add的count。\n\n### 指向所在作用域\n\n还是先看代码\n\n```js\nfunction one(){\n  var a = 2;\n  this.two();\n}\nfunction two(){\n  console.log(this.a)\n}\none();  // a is not defined\n```\n\n这种情况略特殊，因为并不总是错的，这里one调用two能够成功，但却无法因此利用two里面的this来访问one里面的a，这是做不到的。\n\n看了两个错误用法，怎样是对的呢？接着往下看。\n\n## this是什么\n\nthis指代变量或者方法和对象之间的从属关系，但它是在运行时进行绑定，而不是编写时，这取决于函数调用时的多种条件，所以，**this的绑定和函数声明的位置无关，取决于函数调用的方式**。\n\n上面这句话不难理解，因为在哪调用函数似乎显而易见，其实不然，在某些编程模式下，调用位置可能被隐藏，这时我们就要顺着调用的路径找到调用位置，然后判断它符合哪种绑定规则。\n\n## 绑定规则\n\n### 默认绑定\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar a = 2;\nget();  // 2\n```\n\n这种属于独立的函数调用，应用的是函数的默认绑定，this指向全局对象。\n\n怎么判断默认绑定呢，因为它是使用不带任何修饰的函数引用进行调用的。但也要注意，只有在非严格模式下，this才绑定到全局，否则会提示undefined。\n\n### 隐式绑定\n\n看调用位置是否被某个对象拥有或者包含。\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj = {\n  a:2,\n  get\n}\nobj.get()  // 2\n```\n\n这里我们把get函数放在了obj内，但严格来说，它仍不属于obj，只是被obj包含和调用，这个时候，this就指向了obj，this.a 就和 obj.a等价了。\n\n只是这种情况需要注意的是，它有个就近的规则，就是它只属于离this最近的一层。像下面这段：\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj2 = {\n  a:3,\n  get\n}\n\nvar obj1 = {\n  a:2,\n  obj2\n}\n\nobj1.obj2.get(); // 3\n```\n\n这段代码中，this绑定在了obj2上，而不是一直向上追溯。\n\n###  隐式丢失\n\n一个常见的问题就是被隐式绑定的函数丢失了绑定对象，导致应用默认绑定，this就到了全局或者undefined。\n\n第一种情况：**方法传递**\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj = {\n  a:3,\n  get\n}\n\nvar getNum = obj.get;\n\nvar a = \"global\";\n\ngetNum(); // global\n```\n\n这里我们会发现，我们把obj的get方法给了getNum，却不是想象中的效果，其实我们上面就说了，这里的get并不真实属于obj，而只是在调用时，this被绑定到了obj，不信你可以像下面这么改一下：\n\n```js\nvar a = \"global\";\nvar getNum = obj.get();\nconsole.log(getNum)  // 3\n```\n又是3，跟期望的一致，这就是细微差别导致结果的不同。\n\n第二种情况：**回调**\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nfunction doGet(get){\n  get();\n}\n\nvar obj = {\n  a:3,\n  get\n}\nvar a = \"global\";\ndoGet(obj.get);  // global\n```\n\n这种情况跟上面的类似，因为参数传递就是一种隐式赋值，这个时候，执行get方法的时候，还是全局的get，this绑定的就是全局对象了。\n\n回调很常用，所以，因为回调函数而丢失this的情况也常见，甚至于，调用回调函数的函数可能会修改this，这就让代码行为更加地难以捕捉。\n\n所以有什么好办法弥补这些不确定问题的发生么。\n\n## 显式绑定\n\n通过上面的例子可以看到，要想把一个函数的this绑定到对象上，需要下面两个条件：\n\n- 函数作为对象的属性\n- 通过属性间接调用函数\n\n如果不想这么做呢？\n\n### 一、call/apply\n\nJavaScript中的函数都有一些有用的特性，可以用来解决这个问题，比如：call 和 apply，因为可以直接指定this的绑定对象，所以称之为显式绑定。\n\n可看如下代码：\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj = {\n  a:3,\n}\nget.call(obj); //  3\n```\n\n通过get.call()，我们把this强制绑定到了obj上。\n\n从绑定this的角度看，call和apply的区别只是参数的形式不同，call可以直接写参数，而apply需要以数组的形式传参。\n\n遗憾的是，这仍无法解决上面提到的绑定丢失问题，但它的一种变通方法可以解决。\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj = {\n  a:3,\n}\n\nvar getNum = function(){\n  get.call(obj);\n}\n\ngetNum()  // 2\n```\n\n可以看到，这里创建了一个函数给getNum，然后函数内部进行显式地绑定，这样以来，不论再怎样调用getNum，get的this都不会变了。\n\n### 二、bind\n\n因为上面提到的绑定方式较为常用，ES5直接提供了一个内置的方法——Function.prototype.bind。\n\n```js\nfunction get(){\n  console.log(this.a);\n}\n\nvar obj = {\n  a:3,\n}\n\nvar getNum = get.bind(obj);\n\ngetNum()  // 3\n```\nbind()会返回一个硬编码的新函数，把指定的参数设置为this的上下文并调用原函数。\n\n### 三、API调用上下文\n\n有一些库，或者ES新版本的内置函数，会提供一个可选参数，它的作用和bind()类似，确保回调函数使用指定的this，比如：\n\n```js\n\nlet arr = [1,2,3];\n\nfunction get(el){\n  console.log(el,this.id);\n}\n\nvar obj = {\n  id:\"item\",\n}\n\narr.forEach(get,obj);\n// 1 \"item\"  2 \"item\"  3 \"item\"\n```\n\n类似的这些函数实际就是通过call()或者apply()实现了显式绑定，这样可以少写一些代码。\n\n## new绑定\n\n我们很熟悉的一句话：”没有对象就new一个“。\n\nJavaScript 中有一些内置对象函数和自定义函数的构造调用，都会用到new关键字，它会经历以下过程：\n\n- 创建一个新对象\n- 新对象执行prototype连接\n- 新对象绑定到函数调用的this\n- 如果函数没有返回其他对象，就返回这个对象\n\n就会有如下代码的效果：\n\n```js\nfunction Get(a){\n  this.a = a;\n}\nvar getNum = new Get(2);\nconsole.log(getNum.a)  //  2\n```\n\n这是大家熟悉的用法，只是中间经历的过程不是表面那么简单，需要理解一下。\n\nnew是本文提到的最后一种可以影响this绑定的方法，下面看看这些规则的优先级。\n\n## 规则优先级\n\n显然的，默认绑定优先级是最低的，它可以轻易被改变，所以，我们主要关心隐式绑定和显式绑定的优先级。可按照如下顺序进行判断：\n\n- 是否通过new调用来绑定，是，则绑定新创建的对象\n```js\nvar getNum = new Get(); \n```\n- 是否直接或间接通过call、apply、bind绑定，是，绑定指定对象。\n```js\nvar getNum = get.call(obj);\n```\n- 是否在某个上下文对象中调用，是，则绑定那个上下文对象\n```js\nvar  getNum = obj.get();\n```\n- 如果都不是，使用默认绑定。\n\n## 箭头函数\n\n曾有人问我，ES6当中比较喜欢哪个设计，我没多想，就说箭头函数，然后他问我，它跟之前的函数有什么不同，this绑定就是它们的不同之一。\n\n**箭头函数不使用this的那几种规则，而是根据外层函数/全局作用域来决定**。\n\n```js\nfunction get(){\n  return (a) =>{\n    console.log(this.a);\n  }\n}\nvar obj1 = {\n  a:3,\n}\n\nvar obj2 = {\n  a:2,\n}\n\nvar getNum = get.call(obj1);\ngetNum.call(obj2); // 3,不是2\n```\n\n因为get内部创建的箭头函数会捕获调用get时的this，getNum也会跟着一起绑定到obj1，且这种绑定无法被修改。\n\n这种就像bind方法一样，确保函数被绑定到指定对象，它取代了传统的this机制。\n\n实际上，在ES6之前，我们常用另外一种方法来实现它。\n\n```js\nfunction get(){\n  var self = this;  //  就是这里\n  console.log(self.a);\n}\nvar obj = {\n  a:2\n}\nget.call(obj); //2\n```\n\n## 总结\n\nthis绑定是个看似简单，又有一点复杂的东西，除了默认绑定和构造函数调用可以比较自然地理解，其他都绕了那么一点弯儿，但也不用怕，只要经过反复地思考和实践，掌握它们就是本能反应了。\n\n本文尽量全面，仍难免疏漏，鉴于篇幅太长会增加学习负担，索性没有提及某些特殊情况，多数场景已经够用，欢迎交流探讨。\n\n下篇见！~\n","tags":["JavaScript，学习"],"categories":["总结"]},{"title":"JavaScript模块化历程","url":"/2020/04/26/js_modules_history/","content":"\n现代前端，模块化已成必备，不仅有多种工具类的库，还被写进规范当中，不论大小公司，代码都遵循模块化思想在开发，它已经成为独立于技术的一种经验和能力。\n\n本文我们就来聊聊这个话题。\n\n## 需求\n\n网页刚出现的时候，只是很简单的文档，样式简单，极少的交互，极少的设计元素，一个页面不会依赖很多文件，逻辑代码少。\n\n但随着Web技术的发展，网页变得越来越丰富，于用户来说是绝对的福音，但对开发者来说，问题逐渐凸显。\n\n- 代码多，命名冲突概率大\n- 代码冗余，请求过多拖慢速度\n- 文件间依赖增多，易出现引用错误，导致代码运行出错\n- 难复用，重写？copy一份？\n- 修改或者改版时，要去成百上千行代码里找，难维护\n\n综上所述，不论是从开发还是体验角度，都需要解决方案。\n\n## 模块\n\n无数实践证明，小的、组织良好的代码远比庞大的代码更易理解和维护。因此，优化程序的结构和组织方式，把它们分成小的、耦合相对松散的片段，不失为更明智的做法，这些片段就称为模块。\n\n还好，JavaScript有一种原生的组织方式——函数。\n\n### 函数\n\n函数用来做什么？封装具备一定功能的代码，它里面可以包裹所有类型的东西，且有自己独立的作用域，然后在需要的地方调用即可。譬如：\n\n```js\nfunction f1(){\n  //...\n}\nfunction f2(){\n  //...\n}\nfunction f3() {\n  f1();\n  f2();\n}\n```\n这样做功能明了，实现了代码的清晰组织和分离，但是它们散落在整个文件当中，可能污染全局命名空间，且维护成本较高，继续探索。\n\n### 对象\n\n对象可以有属性，而属性既可以是数据，也可以是方法，这就能够很好地满足需求，而且对象的属性通过对象来访问，相当于设定了一个命名空间。\n\n```js\nlet myModule = {\n  name: '张三',\n  getName() {\n    console.log(this.name);\n  }\n}\n```\n这么一来，在一定程度上解决了命名的问题，但是它的属性仍然是暴露的，可以被外部更改。比如：\n\n```js\nmyModule.name = '李四';\nmyModule.getName() // ‘李四’\n```\n\n还是不够理想。\n\n### 匿名闭包\n\n这种方式在项目中有不少应用，是利用了闭包的特性——私有数据和共享方法，关于这一点，我们在[闭包](https://ideazhao.com/2020/03/22/js_closure/)中有提及。\n\n代码如下：\n\n```js\n//module.js\n(function(window) {\n  let name = 'idea'\n  //操作数据的函数\n  function getName() {\n    console.log(`${name}`)\n  }\n  //暴露方法\n  window.myModule = { getName } \n})(window)\n```\n\n这个时候，可以通过`myModule.getName()`来获取`name`，但无法通过`myModule.name`访问`name`。\n\n```js\nmyModule.getName() // \"idea\"\nmyModule.name  // undefined\n```\n\n看起来很不错，同时解决了两个问题，但如果这个模块需要依赖另一个模块呢？\n\n也有办法，别忘了，匿名函数也是函数，可以传参~\n\n```js\n//module.js\n(function(window,$) {\n  let name = 'idea'\n  //操作数据的函数\n  function getName() {\n    console.log(`${name}`);\n    $('body').css('color', 'red');\n  }\n  //暴露方法\n  window.myModule = { getName } \n})(window,jQuery)\n```\n\n当然，这里的jQuery是另一个地方定义好的模块，通过这种方式引入，就可以在myModule内部使用，而且这就是现代模块实现的思想来源，只是方式不同。\n\n说了上面那么多，模块的实现也有了一些改变和优化，但还有一个东西是没有变的，文件的组织方式，像上面的代码，在页面中会是这样：\n\n```js\n<script type=\"text/javascript\" src=\"jquery-1.10.1.js\"></script>\n<script type=\"text/javascript\" src=\"module.js\"></script>\n<script type=\"text/javascript\">\n  myModule.getName()\n</script>\n```\n我们解决了命名冲突，数据保护，和引入依赖，但没有解决依赖与文件加载顺序的强相关性，另外还存在请求过多的问题。\n\n所以，仍然需要更好的方案来解决这些问题。\n\n## 模块化规范\n\n上面都是开发者运用语言本身的特性不断摸索出来的成果，各有用武之地，但又都存在不足。\n\n接下来我们介绍几个应用较广的、更理想的模块化规范。\n\n### CommonJS\n\nCommonJS规范中，每个文件就是一个模块，有自己的作用域，模块的变量、函数、类，都是私有的，外部不可见。\n\n```js\n// num.js\nvar a = 5;\nvar b = 3;\nvar add = function (a,b) {\n  return a + b;\n};\n```\n\n既然数据受保护，想用怎么办？——主动暴露。\n\n```js\nmodule.exports.a = a;\nmodule.exports.b = b;\nmodule.exports.add = add;\n```\n\n`module.exports`就是暴露的方法。\n\n另一个文件中需要这样引用：\n\n```js\n//index.js\nvar num = require('./num.js');  // ./代表相对路径\nconsole.log(num.a); // 5\nconsole.log(num.b); // 5\nconsole.log(num.add(a,b)); // 8\n```\n\n`require`命令负责读入并执行一个JavaScript文件，并返回该模块的exports对象，如果没有找到会报错。\n\nCommonJS的特点可总结如下：\n\n- 所有代码运行在模块内部，不污染全局。\n- 模块可以多次加载，但只会在首次加载时运行一次，结果被缓存，再次加载直接读取缓存，想让模块再次运行，必须清除缓存。\n- 模块的加载顺序，按照代码出现的顺序。\n\n关于CommonJS，多数人可能知道怎么用，却不知道原理是什么，它看起来跟普通的js文件一样，区别在哪？\n\n简单剖析一下：\n\n首先，像很多Web工具一样，它依托于Node，Node内部提供一个Module构造函数，所有模块都是Module的实例。\n\n```js\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  // ...\n```\n每个模块内部，都有一个module对象，该对象有以下几个常见属性：\n\n- module.id 识别符，通常是带有绝对路径的模块文件。\n- module.parent 返回一个对象，表示调用该模块的模块。\n- module.children 返回一个数组，表示该模块要用到的其他模块。\n- module.exports 表示模块对外输出的值。\n\n这么看，应该知道它跟普通js还是有区别，只是这种区别是无感知的，对开发十分友好了。\n\nCommonJS很好地解决了之前提出的所有问题，但还有一点瑕疵，它是同步的，在Node服务端应用当中，模块一般存在本地，加载较快，同步问题不大，在浏览器中就不合适了，所以还需要异步模块化方案。\n\n### AMD\n\nAMD（异步模块定义）是为浏览器环境设计的，它定义了一套异步加载标准来解决同步的问题。\n\n语法如下：\n\n```js\ndefine(id, dependencies, factory);\n```\n\n- id 是模块的名字，字符串，可选。\n- dependencies 是依赖模块列表，数组，可选。\n- factory 包裹了模块的具体实现，是“函数”或者“对象”，如果是函数，返回值就是模块的输出接口或者值。\n\n看个示例：\n\n**有模块依赖**\n\n```js\n//  定义\ndefine('myModule', ['jquery'], function($) {\n    // $ 是 jquery 模块的输出\n    $('body').text('hello world');\n});\n// 使用\nrequire(['myModule'], function(myModule) {});\n```\n\n**模块输出**\n\n```js\ndefine(['jquery'], function($) {\n    var HelloWorld = function(selector){\n        $(selector).text('hello world');\n    };\n    // HelloWorld 是该模块输出的对外接口\n    return HelloWorld;\n});\n```\n\n**RequireJS**\n\nRequireJS是一个遵守AMD规范的工具库，用于客户端的模块管理。它通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载，使用时需要下载和导入项目。\n\n```js\n//无依赖模块\n// msg.js\ndefine(function() {\n  let msg = 'www.baidu.com'\n  function getMsg() {\n    return msg.toUpperCase()\n  }\n  return { getMsg } // 暴露模块\n})\n\n//有依赖模块\n// showMsg.js\ndefine(['msg'], function(getMsg) {\n  let name = 'idea'\n  function showMsg() {\n    alert(msg.getMsg() + name)\n  }\n  return { showMsg } // 暴露模块\n})\n```\n使用的时候只需要像下面这样:\n\n```js\n<!-- 引入require.js并指定js主文件的入口 -->\n<script data-main=\"js/main\" src=\"js/libs/require.js\"></script>\n```\n\n### CMD\n\nCMD规范可说是站在巨人的肩膀上，它整合了CommonJS和AMD规范的特点，专门用于浏览器模块异步加载。\n\n直接看代码：\n\n```js\n//无依赖\ndefine(function(require, exports, module){\n  exports.xxx = value  \n  module.exports = value\n})\n```\n\nexports 参数是 module.exports 对象的一个引用。只通过 exports参数来提供接口有时无法满足开发者的所有需求。 比如当模块的接口是某个类的实例时，需要通过 module.exports来实现。\n\n```js\n//有依赖\ndefine(function(require, exports, module){\n  //同步引入\n  var module = require('./module')\n  //异步引入\n  require.async('./module', function (module) {\n  })\n  //条件引入\n  if (status) {\n      var x = requie('./x');\n  }\n  //暴露模块\n  exports.xxx = value\n})\n```\n\n相比之下，CMD规范推崇代码职责更单一，且没有全局require，看起来，头部较轻，所需模块就近引入。\n\n**SeaJS**\n\nCMD规范的集大成者是SeaJS，笔者之前所在的组就是使用SeaJS作为模块加载器。它的使用同RequireJS类似，需要下载和引入页面。\n\n```js\n<script type=\"text/javascript\" src=\"js/libs/sea.js\"></script>\n<script type=\"text/javascript\">\n  seajs.use('./js/modules/main')\n</script>\n```\n看完以上几个方案，是时候介绍原生实现了。\n\n### ES6模块\n\nES6之前没有专门的模块机制，为提供这些能力，ES6引入两个关键字。\n\n- export——设定模块的对外接口。\n- import——将其他模块的功能导入。\n\n它设计思想是尽量静态化，使得编译时就能确定模块的依赖关系以及输入和输出的变量。\n\n```js\n/** math.js **/\nvar basic = 0;\nvar add = function (a, b) {\n    return a + b;\n};\nexport { basic, add };\n/** 引用模块 **/\nimport { basic, add } from './math';\nfunction test(ele) {\n    ele.textContent = add(66 + basic);\n}\n```\n\n导入和导出都既可以是单独的，也可以是集合形式，此处只列集合形式。\n\n除此之外，它还提供了一些不一样的东西：\n\n- as \n\n```js\n// name.js\nlet myName = \"idea\";\nexport { myName as exportName }  // 别名导出\n\nimport { exportName as name } from \"./name.js\";  // 别名导入\nconsole.log(name);  //  idea\n```\n\n它提供了更改模块导出或者导入接口名称的能力，但名称之间必须是一一对应的关系。\n\n- export default\n\n```js\n// xxx.js\nvar a = \"My name is idea!\";\nexport default a; // 只能有一个\n\n// 可以使用任意变量接受\nimport b from \"./xxx.js\"; \n```\n\n这种称为默认导出，就是什么都不管，默认就是它，跟构建工具当中的默认任务类似，直接跑就是。\n\n不过它看起来方便，却可能引起一些潜在的问题，这些问题超出本文讨论范围，相信大家能够以最好的方式去使用它们~\n\n以上两种方法都非刚需，看各自的编码喜好和需要使用。\n\n不论语法，从形式上看，ES6的模块跟CommonJS很像，那它俩有什么区别？\n\n- CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值的引用。即CommonJS中的值的改变，对引用了它的模块没有影响了，ES6模块则仍然会有影响。\n\n- CommonJS模块是运行时加载，加载的是一个对象，运行时才会生成；ES6模块是编译时输出接口，在代码的静态解析阶段就会生成。\n\n- 运行机制不同，ES6模块是动态引用，不会缓存值，模块变量绑定其所在的模块。\n\n不论怎样，模块化已经被加入规范，且看起来更简洁和直观，很多地方都能看到它的应用，其一是不需要再使用第三方工具，其二，即使浏览器没来得及支持，我们也有类似Babel的工具来辅助使用。条件允许的话，还是可以愉快地用起来~\n\n## 总结\n\n内容已经很长，很多东西仍不是很详细，但相信你能够对模块化的发展有个大概的了解，也能感受到它的魅力。\n\n按理说，对于任何一种工具或者工作方式，我们不必知道它是怎么来的，只需知道当下哪种最好用以及怎么用，就可以了，但对它们产生的背景和发展历史有所了解能让我们更加有的放矢，在没人替我们做选择，或者遇到问题时，能有自己的判断和解决方法。\n\n就聊到这儿了，不保证完全正确，欢迎交流，下篇见！~\n\n参考：\n\n[前端模块化详解](https://github.com/ljianshu/Blog/issues/48)\n[AMD规范](http://shouce.jb51.net/webpack/amd.html)\n《JavaScript忍者秘籍》等","tags":["JavaScript、模块化、总结"],"categories":["总结"]},{"title":"认识“新”朋友—conic-gradient","url":"/2020/04/21/conic_gradient_intro/","content":"\n曾经，我们需要用图片来完成很多视觉效果，代码难以实现的形状、色彩等等，还好后来有了CSS3，很多新的属性可以实现以前无法想象的元素，帮我们节省了大量的开发成本和网络传输成本。\n\n本篇我们聊一种新的渐变—conic-gradient，说新其实也不算新，早在两三年以前，就有书籍和开发者做过分享，但那个时候浏览器的支持情况很不乐观，即便是现在，也只有较新版本的浏览器支持，不过这不影响我们去学习。\n\n## 现役成员\n\n我们熟悉的渐变有线性渐变（linear-gradient）和径向渐变（radial-gradient），并且在日常需求中用处很广，而它们也往往不负所托，能发挥奇效。\n\n比如：\n\n**三角**\n\n```CSS\nbackground-image:linear-gradient(to bottom right,orange 0,orange 49%,transparent 50%,transparent 100%)\n```\n\n![](/img/conic_gradient/sanjiao.png)\n\n**条纹**\n\n```CSS\nbackground:repeating-linear-gradient(45deg,#fb3,#fb3,5px ,#58a 0,#5ba  10px);\n```\n![](/img/conic_gradient/tiaowen.png)\n\n**镂空**\n\n```CSS\nbackground-image:radial-gradient(transparent 0,transparent 49%,orange 50%,orange 100%)\n```\n![](/img/conic_gradient/loukong.png)\n\n当这些创意第一次出现时，无不令人惊叹，但现在大家已经习以为常了。\n\n今天介绍的这位就更具特色，你可能真没听过。\n\n## 锥形渐变\n\n我们知道，线性渐变是颜色沿着一条笔直的轴线变化，还可以调整角度；径向渐变则是以一个点为圆心向四周扩散，锥形是怎样的呢？\n\n不妨直接看个效果：\n\n>以下代码在新版Chrome中均可正常运行\n\n```CSS\nbackground: conic-gradient(green, orange);\n```\n\n这是个简单的例子，看起来要比之前的那些简单许多。效果如下：\n\n![](/img/conic_gradient/zhuxing01.png)\n\n这么看来，它的工作原理似乎明了,和径向渐变类似，它也是以一个点为中心起始点，不同的是，不是由内向外扩散，而是**沿着圆周**变化。\n\n正式看一下语法规则：\n\n>conic-gradient( from 起始角度  at 中心点位置, 渐变断点 )\n\n从上面的例子可以看出，前两个参数是可以省略的，不影响代码执行，不过还有一个细节这里没有体现，即**颜色断点是可以添加角度（或者百分比）的**，就像线性渐变可以添加断点一样。\n\n我们索性把上面的例子用新数据改一下看看效果：\n\n```CSS\nbackground: conic-gradient(from 60deg at 20% 20%, green 40%, orange 40%);\n```\n![](/img/conic_gradient/percent_conic.png)\n\n哇偶，乍一看有点奇怪，但不觉得有点神奇么？换个角度思考，如果让你实现这么个效果，是不是会摸不着头脑？\n\n我们往往对规则图形敏感，一遇到不规则，就脑瓜短路，所以，多思考，多尝试~\n\n好了，是时候看看我们可以用它实现哪些实用的效果了！\n\n### 色盘\n\n```CSS\nbackground: conic-gradient(red, magenta, blue, aqua, lime, yellow, red);\n```\n![](/img/conic_gradient/sepan.png)\n\n美轮美奂。\n\n### 饼图\n\n```CSS\nbackground: conic-gradient(#3ebd3e 0, #3ebd3e 30%, #ff9800 30%, #ff9800 70%, #03a9f4 70%, #03a9f4 100%);\n```\n\n![](/img/conic_gradient/bingtu.png)\n\n无缝衔接\n\n既然这些可以，那么彩色边框也就可以。\n\n![](/img/conic_gradient/caiseborder.png)\n\n环状图也不在话下。\n\n![](/img/conic_gradient/huanborder.png)\n\n类似loading应该也可以。\n\n![](/img/conic_gradient/loading.png)\n\n咋不上天呢？~\n\n好了，效果是说不完的，先展示到这儿了，部分代码没有列出，想看的话可以来[这里](https://codepen.io/ideazhao/pen/LYpbYLO)。\n\n它能做的当然不止这些，但笔者一向以实用为准则，花样是其次，就不玩儿那么多了，有兴趣你可以随意玩儿~\n\n## 总结\n\n虽然我向来认为JavaScript要比CSS难一些，但总有一些人会说CSS才是最难的，也不无道理，但它的难，也正是它出彩的地方，每一个属性出来感觉都很简单，但如果能够充分发挥想象力，再结合数学、图形以及动画方面的能力，就能做出很多意想不到的效果。\n\n不知你看完感觉如何呢，是否跃跃欲试？那就撸起来吧！下篇见！~\n","tags":["CSS、学习"],"categories":["总结"]},{"title":"对象拷贝与应用剖析","url":"/2020/04/19/object_copy_and_use/","content":"\n## 来由\n\n首先铺垫一点背景知识，JavaScript中值的类型分为基本值和引用值。基本值存储变量的实际值，而引用值存储的是一个地址，该地址指向内存中的某个位置，这个位置才是存储变量的实际值。\n\n所以，如果存在以下操作：\n\n```js\nvar a = {}; \nvar b = a;  \n\na.name = 'idea';\n\na.name  // 'idea'\nb.name  // 'idea'\n\nb.age = 18;\n\nb.age  // 18\na.age  // 18\n\nconsole.log(a == b);// true\n```\n\n可以看出，直接”把a交给b“的操作会让两者相互影响，因为它给的是地址，二者共用一个地址，而拷贝本身的意思是，多一个副本出来，我可以随便操作而不影响原先的那个，这就是为什么需要有”额外“的拷贝方法存在。\n\n## 实现\n\n方法有很多，有原始，有先进，随着ES6+的出现，由语言本身帮助我们包装了很多强大又方便的方法，比如数组去重，一个`Set`就搞定，对象拷贝同样，但我们还是要看一看，一些方法的实现原理是怎样的。\n\n上一段解释了”拷贝“的意思，再来解释一下”浅拷贝“和”深拷贝“是什么？\n\n- 浅拷贝：顾名思义，只复制一层，如果对象有子对象，并没有复制。\n- 深拷贝：父子对象全部复制。\n\n### 浅拷贝\n\n有些文章把”赋值“操作也算浅拷贝，就像上面举的例子那样，这么说也对，也不对，对的是，它的确是多一个对象出来，只是这个对象和父对象共用同一个地址，改变b会连累到a。\n\n那么真正的浅拷贝是怎样的？看代码：\n\n```js\nfunction shallowCopy(src) {\n    var target = {};\n    for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n            target[prop] = src[prop];\n        }\n    }\n    return target;\n}\n```\n\n思路就是，**建立一个新的空对象，然后遍历源对象的自有属性，并将它们逐个赋给新建的对象，最后返回新对象**。\n\n做个实验：\n\n```js\nvar obj1 = {\n    'name' : 'idea',\n    'age' :  18,\n    'car' : [\"奔驰\",\"宝马\"]\n};\n\nvar obj2 = shallowCopy(obj1);\n\nobj2.age // 18\n\n//修改一下\n\nobj2.age = 20;\nobj1.age // 18  并未被改变\n\n//再尝试修改\n\nobj2.car[2] = \"卡宴\";\nobj1.car  //  [\"奔驰\", \"宝马\", \"卡宴\"]\n```\n像之前说的一样，在浅拷贝中，源对象的外层拷贝成功，子对象并未彻底拷贝。\n\n**原生新方法**\n\n`Object.assign()`\n\n这是ES6新增的一个方法:\n\n>用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。并返回目标对象。\n\n所以下面的操作可以实现浅拷贝。\n\n```js\nconst obj2 = Object.assign({}, obj1);\n```\n\n它还可以做到下面这种类似合并的效果。\n\n```js\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }\n```\n\n“浅拷贝“说差不多了，来看看”深拷贝”。\n\n### 深拷贝\n\n明白了浅拷贝，就能推测出深拷贝应该是怎样。思路如下：\n\n- 判断数据类型，基本类型直接返回\n- 不是基本类型，是对象或者数组，则新建空对象/空数组\n- 执行浅拷贝步骤，将src的每一项复制给target\n- 重复以上步骤处理src的子属性\n\n可以看出，深拷贝实际也是使用了浅拷贝的方法，只是将拷贝的动作一层一层进行到底。代码如下：\n\n```js\n//判断类型\nfunction getType(obj){\n    let isType = Object.prototype.toString.call(obj);\n    if(isType =='[object Object]'){\n        return 'Object';\n    }else if(isType =='[object Array]'){\n        return 'Array';\n    }else{\n        return 'nomal';\n    }\n}\n//拷贝方法\nfunction deepCopy(obj) {\n    if (getType(obj)=='nomal') {\n        return obj ;  // 基本类型直接返回\n    }else{\n        var newObj = getType(obj)=='Object'?{}:[];  // 对象或者数组\n        for(var key in obj){\n            if(obj.hasOwnProperty(key)){\n                newObj[key] = deepCopy(obj[key]) ;  // 子对象递归调用deepCopy方法\n            }\n        }\n    }\n    return newObj;\n}\n```\n\n还拿上面的对象做实验，做同样的修改，看结果怎样。\n\n```js\nvar obj2 = deepCopy(obj1);\nobj2.car //  [\"奔驰\", \"宝马\", \"卡宴\"]\nobj1.car //  [\"奔驰\", \"宝马\"]\n```\n\n可以看到深拷贝的效果出来了~\n\n当然，你可以使用ES6+的语法进行重写，不过思路是一样的，不再重复。\n\n**其他方法？**\n\n- JSON解析\n\n说实话，第一次看到这个方法时着实觉得有想法，但转念又一想，程序是死的，人是活的，正是人的想象力赋予技术更多可能性。来看代码：\n\n```js\nvar src ={\n  name:\"idea\",\n  age :18,\n  friend :['小志','小鸟','小明']\n}\nvar target = JSON.parse(JSON.stringify(src))\ntarget.age = 20\ntarget.friend.push('小聪');\nsrc.age  // 18\nsrc.friend // ['小志','小鸟','小明']\n```\n它的原理就是利用JSON.stringify 将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象。\n\n实现很简单，但在有些情况下可能出错，比如对象中有Date、RegExp、Error、函数或者循环引用的时候，所以，虽然看起来简单，应该在合适场景下使用才好。\n\n- lodash的_.cloneDeep()\n\n不少人推荐这种方法，因为它支持循环引用和大量的内置类型，细节处理好，一般不会出错，相比之下用着放心。\n\n用法就是引用cloneDeep.js文件，直接使用就好：\n\n```js\nvar target = cloneDeep(src);\n```\n想研究源码的可以戳这里[cloneDeep](https://github.com/lodash/lodash/blob/master/cloneDeep.js)\n\n## 总结\n\n本文旨在分享”常见常新“的对象拷贝问题，以及”浅“、”深“拷贝的对比和代码实现。\n\n这个问题之所以常见，其一是有用，其二，涉及的知识点较多：\n\n- 引用类型\n- 类型判断\n- 对象遍历\n- 自有属性\n- 递归等\n\n能通过这样一个问题考察基础掌握情况。\n\n当然，实现方式有多种，能力有大小，很多人在实际开发中都是用库封装好的代码解决，确实方便快捷有保障，不过了解一下它的背景和原理还是有好处的，希望对你有帮助。\n\n### 题外思考\n\n拷贝我们聊完了，但可以跳出去重新想一下，我们拷贝是为了什么呢？b对象使用a对象的属性和方法，既然这样，直接继承不也是可以达到效果吗？而且继承之后可以改变属性且不影响原型对象。那么二者分别适用什么场景呢？留给大家衡量吧~\n\n下篇见！~","tags":["JavaScript","总结"],"categories":["总结"]},{"title":"Webpack上手指北","url":"/2020/04/18/webpack_important/","content":"\n近几年，打包构建工具层出不穷，前有Grunt、Gulp，后有Webpack、Rollup等，它们各有优势，均受到部分开发者的欢迎，本文聊聊Webpack的使用。\n\n## 模块化\n\n不论是新工具还是新技术，都是为了解决问题而存在，那么构建工具解决什么问题呢？\n\n众所周知，最初的网页十分简单，没有多少交互，代码量也少，但随着技术的发展，JavaScript已经不仅仅用来实现简单的表单提交等功能，引入多个js文件到页面中成为常态，但这种做法有很多缺点：\n\n1）需要手动维护文件的加载顺序。且多个js之间通常有依赖关系，难以清晰分辨谁依赖了谁。\n\n2）每一个`<script>`标签都需要向服务器发送请求，过多的请求会严重拖慢渲染速度。\n\n3）每个`<script>`标签都暴露在全局作用域，如果没有任何处理而直接在代码中进行变量或函数声明，就会造成全局污染。\n\n模块化解决了这些问题：\n\n- 通过分离模块，导入和导出，可以清晰地看到模块间的依赖关系。\n\n- 借助工具进行打包，页面中只需要加载合并后的资源文件，减少了网络开销。\n\n- 模块之间作用域隔离，彼此不会有命名冲突。\n\n## 使用Webpack的理由\n\n打包工具众多，为什么选择Webpack？Webpack具备以下几点优势。\n\n1）默认支持多种模块标准，包括AMD、CommonJS，以及最新的ES6模块。这对于某些同时使用多种模块标准的工程非常有用，Webpack会帮我们处理好不同类型模块之间的依赖关系。\n\n2）完备的代码分割解决方案。可以分割打包后的资源，首屏只加载必要的部分，不重要的放到后面动态加载。这对于体积较大的应用尤为重要，可有效减小资源体积，提升首页渲染速度。\n\n3）可以处理各种类型的资源。除JavaScript以外，还可以处理样式、模板、图片等，而开发者需要做的仅仅是导入它们。比如你可以从JavaScript文件导入一个CSS或者PNG，而这一切最终都可以由下面讲到的loader来处理。\n\n4）庞大的社区支持。除了Webpack核心库以外，还有无数开发者为它编写周边插件和工具，大多数的需求你都可以找到现有解决方案。\n\n## 配置与方法\n\n看看怎么使用。\n\n依赖Node，这几乎是前端开发的标配，不多说。\n\n学习一种东西的时候最怕看到各种陌生概念，这里先捋一捋。\n\n为了便于理解，按照工作流程的阶段：\n\n`entry`:流程的入口，告诉webpack从哪个文件开始打包，方式包括：字符串、对象、函数等。\n\n**字符串写法**：\n\n```js\nconst config = {\n  entry: './entry/file.js'\n};\n\nmodule.exports = config;\n```\n\n**对象写法**：\n\n```js\nconst config = {\n  entry: {\n    app: './src/app.js',\n    vendors: './src/vendors.js' //第三方库入口\n  }\n};\n```\n\n**多页面**：\n\n```js\nconst config = {\n  entry: {\n    pageOne: './src/pageOne/index.js',\n    pageTwo: './src/pageTwo/index.js',\n    pageThree: './src/pageThree/index.js'\n  }\n};\n```\n\n至于函数的方式，可以有逻辑处理的发挥空间，最终返回的还是字符串或者对象。\n\n`chunk`:字面意思是代码块，存在依赖关系的模块在打包时被封装为一个chunk\n`bundle`:由chunk得到的打包产物\n\n所以三者的关系如图：\n\n![](/img/webpack_use/chunk.jpg)\n\n>先消除一个可能的误解，并非是一个entry项对应一个chunk，对应一个bundle，都可能是多个，后面会再说。\n\n`output`:设置输出路径和文件\n\n**单入口**\n\n```js\nconst config = {\n  output: {\n    filename: 'bundle.js',\n    path: '/public/assets'\n  }\n};\n\nmodule.exports = config;\n```\n\n**多入口**\n\n```js\n{\n  entry: {\n    app: './src/app.js',\n    about: './src/about.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n}\n```\n\n这里就遇到了上面提到的”多对多“的关系。\n\n其中filename是输出资源文件名，不仅可以是名称，还可以是相对路径，而且目录不存在也没关系，会自动创建。\n\n可以看到，filename 使用了`[name]`，这是因为多个文件需要生成多个对应的文件，`[name]`类似模板语言，意图是根据入口文件动态生成文件名，以确保唯一性。\n\n当然，`[name]`只是模板变量之一，还有可以控制客户端缓存的`[hash]`、`[chunkhash]`等，可以精确地让相应文件在客户端得到更新。就像这样\n\n```js\noutput:{\n  filename:'[name]@[hash].js'\n}\n```\n\n`loader`:字面意思是装载器，可以理解为”预处理器“，Webpack本身只认识JavaScript，对其他类型，比如：样式、图片等，必须预定义一个或多个loader对其进行转译，所以loader赋予webpack处理不同资源的能力，丰富了扩展性。\n\n用法示例如下：\n\n首先说明，loader不是webpack自带的，需要安装，比如我们处理样式。\n\n>npm install --save-dev css-loader style-loader\n\n```js\nmodule: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']     \n      }\n    ]\n  }\n```\n可以看出，loader的套路很简单：\n\n1) 文件类型\n2) 对应loader\n\n需要说明的是：\n\n1) css-loader 本身仅处理样式的加载，并不负责将样式插入页面，所以通常配合 style-loader 一起使用，预处理器同样。\n2) use数组当中的loader顺序是有讲究的，它是从后往前进行处理，搞错了顺序同样无法达到想要的效果。\n\n`plugin`: loader是做某些类型文件的模块转换工作，相比之下，plugin是用来完成一些loader职责之外的任务，更多，更丰富，也增强了webpack的能力。\n\n用法如下：\n```js\nplugins: [\n    new HtmlWebpackPlugin({template: './src/index.html'})\n]\n```\n\n它的可配置项有很多，这里不再列举，只要知道它是一个具有 apply 属性的 JavaScript ，可以携带参数，所以要向plugin属性传入 new 实例。\n\n## 配置文件\n\n说到这儿，你可能觉得都是零散的概念，它们应该放在哪儿？\n\n有一种”最佳实践“叫配置分离，即配置文件单独放在一个文件当中，node有package.json，webpack也有，我们上面提到的所有，都应该写在一个叫`webpack.config.js`的文件当中。譬如：\n\n```js\n//webpack.config.js\nvar path = require('path');\n\nmodule.exports = {\n  mode: 'development',  //模式，分为 development 和 production\n  entry: './index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'index.bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']     \n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n```\n最基本的配置就是这样了，如果看做是一条生产线的话，就是从入口文件进，从dist输出。\n\n实际开发中会加入更多逻辑和工具，代码量会大大增加，但使用方法类似。\n\n[更多配置](https://www.webpackjs.com/configuration/)\n\n## 常用loader\n\n说到这儿，你可能会问，我知道webpack拿loader作为工具，但有哪些工具可用呢？下面介绍几个：\n\n- babel-loader\n\n用途大家都很熟，把ES6+代码编译为ES5，可以让大家在浏览器支持度不是很充分的情况下用新方法编码。\n\n推荐安装：`babel-loader @babel/core @babel/preset-env`\n\n- ts-loader\n\n用于连接Webpack和Typescript。\n\n- html-loader\n\n前面说过，Webpack只认识js，这个loader用于将HTML文件转化为字符串并格式化，通过js加载。\n\n- file-loader\n\n打包文件类型资源，返回publicPath。\n对publicPath稍作解释，前面我们看到过path，它是资源打包路径，而publicPath是资源引用路径，即页面当中做引用的静态文件（图片等）。\n\n- vue-loader\n\n这个应该很多人在用，处理vue组件，除此之外，可能还要安装vue-template-compiler以及前面提到的样式处理loader等。\n\n[更多loader](https://www.webpackjs.com/loaders/)\n\n## 常用插件\n\n- html-webpack-plugin\n\n自动生成html文件，并且引用相关的 assets 文件。\n\n- mini-css-extract-plugin\n\n分离CSS，将CSS提取到单独的文件中，支持CSS和sourceMap的按需加载。\n\n- uglifyjs-webpack-plugin\n\n对js进行压缩混淆。\n\n- Hot Module Replacement\n\n浏览器自动更新，实时预览修改效果\n\n- CommonsChunkPlugin/SplitChunks\n\n把多个chunk中的公共部分提取出来，减少重复打包，缩小资源提及，可以更有效利用客户端缓存。\n\n[更多插件](https://www.webpackjs.com/plugins/)\n\n## 总结\n\n文章已经有点长，但仍有很多东西没有讲到，没有深入，旨在跟大家分享webpack的用途以及大致用法，更详细内容及工具可移步[官网](https://www.webpackjs.com/)查看。\n\n但对于建立初步的认识应该足够，剩下的，各公司或者业务的特点都不一样，大家可根据具体情况进行定制，总之，工具是为我所用的，是为开发者提供便利的，而不是拦路虎，应该学会并掌握它。\n\n下篇见！~","tags":["Webpack","总结"],"categories":["总结"]},{"title":"Console很飒，不止log","url":"/2020/03/31/console_deep_learning/","content":"\n日常工作中，难免存在为了代码调试而试验性地输出一些东西，曾经都爱用alert()，高兴了弹个数据，但让人头疼的是，它会中断代码执行，得手动关掉，所以有人就用 document.write()，这样也有弊端，它会把内容写到网页上，我们是调试代码，这样显得多余，种种原因，console.log()就成了香饽饽，它不会影响代码运行，且只会把内容输出到控制台，挺好。\n\n## 别把console不当对象\n\nJavaScript语言中，到处是对象的运用，有很多内置和自定义的对象闪耀光芒。\n\n我们一般不会用console做什么实质的事情，更别提业务逻辑，所以，会忽略它本身也是对象，不过，它不属于原生js，而是宿主（通常是浏览器）的内置对象，用来在控制台输出一些代码执行情况的信息，既然是对象，就有方法，log仅仅是其中之一。\n\n## console的方法\n\n**提示类**\n\n这类方法，它们的目的和效果类似，都是提示，只是提示的类型不同。\n\n`log`\n`debug`\n`info`\n`warn` \n`error`\n\n既然类型不同，就应该在UI上有所区别，这是浏览器做得比较贴心的一点。\n\n![](/img/console/console_info.png)\n\n有了这个区分，甚至不需要看图标，扫一眼就能知道是哪一类。\n\n除此之外，它们有各自的职责所在。\n\n`info`用于输出信息或者通知，跟log很像，但没log常用和强大。\n\n`debug`输出“调试”的信息，且控制台配置为显示时才能看到。它常出现在代码里，就像这样：\n\n```js\nfunction func(){\n  debugger;\n  console.log(\"bug\"); \n}\n```\n\n这段代码当运行到 debugger 的地方就会停下，这样可以辅助定位问题，程序是在前面出错，还是后面出错，最终精确到哪一行出错。\n\n当然，相比手动书写，我们经常是在控制台里通过可视化工具进行操作，更方便，也更灵活。\n\n除此之外，更常见的是下面这两种。\n\n`warn` 和 `error`\n\n这两个方法是对代码执行情况最直接的反馈，不需要手动去写，控制台就会有很多警告和报错...我们当然不希望看到，但一旦出错，有提示信息总比没有好。\n\nwarn 代表代码中有不太推荐的写法或者将来可能存在的错误，但在当下不影响运行。\n\nerror 就没有那么友善了，轻则某段代码无效，重则页面停止解析执行。\n\n常见的是如下几类：\n\n- SyntaxError解析错误\n  \n这种算低级错误，比如，漏写个括号，少写个引号，引号写成了中文的等等，属语法解析层面。表现为：\n\n  >Uncaught SyntaxError: Unexpected ...\n\n如果使用的编辑器没有提醒功能，找起来还挺费劲儿的，通过控制台来帮助定位就很方便了。\n\n- ReferenceError引用错误\n\n这个错误也常见，比语法解析稍微高级一点，但也不值得骄傲~它代表引用一个不存在的对象，或者不合法的赋值，有时是真的忘记定义，有时可能就是单词拼错。\n\n  >Uncaught  ReferenceError: a is not defined\n\n- TypeError类型错误\n\n变量或参数不是预期类型时发生的错误。\n\n  >Uncaught TypeError: a is not a function(…)\n\n这种错误常出现在你以为某个方法或者对象已经存在或者引用，却由于疏漏不能正常引用的情况。\n\n通常错误信息会自动在控制台输出，但如果你需要在其基础上自定义输出并呈现给用户，有这么几个可使用的属性和方法：\n\n- message 描述信息\n- name 类型名称\n- toString 包含错误信息的字符串\n\n比如：\n\n```js\ntry {\n    adddlert(\"Hello!\");\n}\ncatch(err) {\n    console.log(err.name);  //  ReferenceError\n    console.log(err.message);  //  adddlert is not defined\n}\n```\n\n此处仅列三种极为常见的异常，更多种类可自行查阅资料。\n\n`assert`\n\nassert 方法在很多地方被翻译成”断言“，譬如一本很不错的书《JavaScript忍者秘籍》中，就随处可见它的身影。\n\n它接收两个参数，第一个是表达式，第二个是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。\n\n```js\nconsole.assert(1 > 2, \"条件不成立\")\n// Assertion failed: 条件不成立\n```\n\n**计算**\n\n`console.count`\n\n```js\nfunction func(){\n  console.count(\"order\");   // 此处如果不填，默认是 default\n}\n\nfor(let i = 0;i<3;i++){\n  func();\n}\n```\n\n这段代码输出\n\n>order:1\n>order:2\n>order:3\n\n可以看到，它能起到统计代码执行次数的作用。\n\n`console.time()`和`console.timeEnd()`\n\n这两个方法也常被提到，就是测试一段代码的执行时间，在进行代码优化之后，对比哪种写法的执行效率更高。\n刚好，我们前面就有一段代码，索性来测试一下它的运行时长。\n\n```js\nconsole.time();\nfunction func(){\n  console.count(\"order\");   // 此处如果不填，默认是 default\n}\n\nfor(let i = 0;i<3;i++){\n  func();\n}\nconsole.timeEnd();\n```\n\n输出在最后多了一行\n\n>default: 0.349853515625ms\n\n说明这段代码执行用了大概0.35毫秒。\n\n## 花样\n\nconsole还有什么花样？有的。\n\n`trace`\n\n追踪函数调用轨迹，比如，有个求和方法：\n\n```js\nfunction add(x,y){\n    console.trace();\n　　return x+y;\n}\n//  假设调用如下:\nvar result = add3(1,1);\nfunction add3(x,y){return add2(x,y);}\nfunction add2(x,y){return add1(x,y);}\nfunction add1(x,y){return add(x,y);}\n```\n\n控制台就会这样显示：\n\n![](/img/console/console_trace.png)\n\n`table`\n\n语法格式是：`console.table(tabledata, tablecolumns)`\n\n第一个是填充到表格的数据，可以是数组或者对象，必填，第二个是标题栏名称，选填。\n\n```js\nvar table = [\n     {\"name\": \"张三\", \"sex\": \"F\"},\n     {\"name\": \"李四\", \"sex\": \"M\"},\n     {\"name\": \"王二\", \"sex\": \"F\"},\n     {\"name\": \"麻子\", \"sex\": \"F\"},\n];\nconsole.table(table);\n```\n![](/img/console/console_table.png)\n\n相比常规输出，这种格式开发者会觉得更加舒适。\n\n`占位符`\n\n占位符，是用某种特定规则的符号替代真正的内容来占位，看代码。\n\n```js\n  console.log('%d年%d月%d日',2020,03,30);  //  2020年3月30日\n```\n\n这里的 %d(还有%i) 代表整数，它还支持字符串（%s）、浮点数（%f）和对象（%o）。\n\n```js\nlet person = {\n  name:'idea',\n  age:18\n}\nconsole.log(\"%o可以用来创建人的类\",person);  //  {name: \"idea\", age: 18}可以用来创建人的类\n```\n\n占位符跟函数中的参数作用差不多，方便了数据的引用和操作。\n\n`样式`\n\n什么？你说的是那个样式吗？对，是那个样式~\n\n语法是：`console.log(\"%c内容\",样式）`\n\n这里%c起到了关键作用，它的功能是**根据提供的样式代码对输出内容进行格式化**。\n\n```js\nconsole.log(\"%c3D Text\",\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\");\n```\n\n控制台里就能看到如下炫酷的效果：\n\n![](/img/console/console_css.png)\n\n有点意思吧，不过这个效果是拿来做试验的，略显招摇，没有实际用途，如果你想自定义输出的字体，改个字号和颜色就好。\n\n## 总结\n\n作为一名开发者，我确实曾以为 console 就只能 log，也觉得控制台那些乱七八糟的东西没什么用，没规律可循，更觉得某些人直接在控制台里写代码是在卖弄技巧，后来就是被“啪啪”打脸的过程，所以，哪块知识都不宜小看，不断挖掘和探索才是正解~\n\n本文就到此了，鉴于笔者水平有限，可能有遗漏或者错误，欢迎指正和交流~\n\n","tags":["学习，JavaScript"],"categories":["总结"]},{"title":"你总问input多少种","url":"/2020/03/29/input_all/","content":"\n第一次听到这个问题，是一位前辈分享他面试别人的题目，乍一听，这么没营养的也问？\n\n或许他只是随便一说，我却记住了，因为转念一想，好像真说不全，text、submit、checkbox、radio...还有啥来着？\n\n常见的需求：\n\n- 登录/注册\n- 输入金额\n- 填写个人资料\n\n除此之外，其他场景貌似不多，但就算这些，也不是每款产品都需要，再加上HTML5加入的新成员，更加难以捉摸。\n\n本篇文章我们就一起回顾一下，当然，鉴于其本身内容较多，我们只看那些较“实用”的。\n\n## 表现\n\n为更好区分和记忆，可分为如下几类。\n\n### 手动输入\n\ninput本意就是输入，所以，它肯定存在一个 text （文本）类型.\n\n但是，虽然都是文本，也有不同形式的特定需求。\n\n`text`:文字\n\n`number`:数字\n\n`password`:密码\n\n`tel`:电话号码\n\n`email`:邮箱地址\n\n`search`:搜索框\n\n`url`:链接\n\n以上几种，从输入框的表面来看，只有数字是不同的，可以使用箭头操作。\n\n更多细节：\n\n- number类型可以设置最大和最小值，且可以设置数字变化的幅度（step）\n\n    <input type=\"number\" min=\"10\" max=\"20\" step=\"2\">\n\n- 密码的输入不可见\n\n- 号码、url和邮箱类型，输入框获得焦点后，会弹出更利于输入的键盘种类，比如：纯数字，或者带有@、.com等符号。\n\n- 跟搜索框相关的，一个是联想列表 datalist，每输入一个字，就会出现相关的搜索列表或者热搜词（当然，这些需要js和数据作为支撑），更强大的是，一边输入，一边直接出现相关的搜索结果。\n\n- 它们中的大多数，看起来没有明显区分，但在浏览器实现层面，如果你使用了某个类型，而格式又不相符的时候，可能会有错误提示。\n\n### 点击选择\n\n`radio`:单选\n`checkbox`:复选\n`time`:时间\n`date`:日期\n`month`:月份\n`week`:周\n`color`:颜色\n`range`:范围、界限\n\n这里需要注意的是，日期和时间，以及月份、周之间有什么区别呢？\n\n- 时间，几点几分\n- 日期，某年某月某天\n- 月，某年某月\n- 周，某年第几周\n\n它们都是指代某个时间点，但由于粒度不同，可以分别适配特定的场景，而不用再对数据进行额外的处理，当然，需要的话，也可以组合使用。\n\n### 功能性\n\n`file`：上传文件。\n\n`image`：可以把图片当做表单元素（按钮）来使用。\n\n### 按钮\n\n`button`:按钮\n`submit`:提交\n`reset`:重置\n\n三者看起来都是按钮的样子，且提交和重置按钮会自带文案，button则需要增加value才可以。\n\n从用处看，提交按钮是用来提交整个表单，而重置是将表单重置为默认值，一般来说，这是一个带有风险的操作，需谨慎使用。\n\n而button类型就是单纯地按钮，没有默认操作，需要JS绑定事件进行操作。\n\n还有一种，并非由用户输入，就是`hidden`类型，它可用于那种并不需要在页面展示，但仍用得到的数据。\n\n## 属性\n\nHTML的属性是个易忽视的点，大家习惯于用CSS实现样式，用JS来实现交互甚至数据传输，却忽视了HTML本身也可以做一些事情，譬如，笔者就曾被`editable`属性给惊呆了，所以，本文我们来看看，关于表单，有哪些能发挥重要作用的属性。\n\n`disabled`:字面意思，我们定义类名时也常用，就是禁用。\n\n`checked`:首次加载即被选中。\n\n`readonly`:只读，不可更改。\n\n`placeholder`:可输入内容的提示。\n\n`autocomplete`:自动补全，一个增强体验的属性，很多时候可减少输入。\n\n`autofocus`:自动获取焦点，在打开页面之后，帮助用户直接获取某表单的焦点进行输入。\n\n`pattern`:规定输入字段的正则匹配模式。\n\n`required`:必填项。\n\n`novalidate`:提交表单时不验证。\n\n它们当中，有些不需要被设定某种值的属性是不需要写属性值的，比如：checked、required、readonly等。具体用法和效果，还请读者自行试验了~\n\n## 小结\n\n我相信，你可能真的没想到，小小input居然有这么多种，就像曾经有人问我，我说”反正就是很多“，这么说也没错，但肯定是不会加分的，所以，本文简单汇总一下，就算温习了。\n","tags":["学习，HTML"],"categories":["总结"]},{"title":"有趣的API—Page Visibility","url":"/2020/03/27/interesting_api_visible/","content":"\n>语言为技术服务，技术为需求服务。\n\n我们在日常浏览网页的时候，经常会遇到这样的情况，有些页面元素，当你在当前网页的时候，它正常进行，切换到其他页面的时候，或者最小化的时候，它就停了。比如：\n\n- 当视频加载到可播放状态，根据用户是否停留在当前页面来决定是否自动播放；\n\n- 视频正在播放时，用户有事离开页面了，是否要暂停播放；\n\n- 需要播放给用户的一次性开场动画，当用户打开页面之后就切换了，是否暂停。\n\n等等。\n\n如果首次遇到，可能会觉得哪里跟之前不一样，但仔细想一下，这种实现不仅有趣，且是合理的。\n\n怎么实现呢？\n\n## 实现方式\n\n相当简单，有这么几个主要的API：\n\n### document.hidden\n\n表示页面是否隐藏的布尔值，页面隐藏，包括：页面在后台标签中或者最小化。\n\n### document.visibilityState\n\n4个可能状态的值：\n\n- 页面在后台标签中或最小化\n- 页面在前台标签中\n- 实际的页面已经隐藏，但用户可看到页面的预览（win7系统的应该有体会，鼠标放在任务栏，无需打开就可看到小窗页面）\n- 页面在浏览器外预渲染\n\n### visibilityChange\n\n这是一个事件，当文档的可见性发生变化时触发。\n\n## 注意点\n\n### 第一个是浏览器兼容\n\n如果需要兼容较低版本，就需要在代码中做检测，然后向后兼容。\n\n```js\nvar hidden, visibilityChange;\nif (typeof document.hidden !== \"undefined\") {\n    hidden = \"hidden\";\n    visibilityChange = \"visibilitychange\";  //标准\n} else if (typeof document.mozHidden !== \"undefined\") {\n    hidden = \"mozHidden\";\n    visibilityChange = \"mozvisibilitychange\";  //火狐\n} else if (typeof document.msHidden !== \"undefined\") {\n    hidden = \"msHidden\";\n    visibilityChange = \"msvisibilitychange\";  //IE\n} else if (typeof document.webkitHidden !== \"undefined\") {\n    hidden = \"webkitHidden\";\n    visibilityChange = \"webkitvisibilitychange\";  //Chrome\n}\n\n// 添加监听器\ndocument.addEventListener(visibilityChange, function() {\n    console.log(\"当前页面是否被隐藏：\" + document[hidden]);\n}, false);\n```\n\n### 第二个是实现差异\n\nvisibilityState 在不同浏览器（版本）可能有不同实现方式.\n\n比如IE，是表示状态的数字。\n\n- document.MS_PAGE_HIDDEN(0)\n- document.MS_PAGE_VISIBLE(1)\n- document.MS_PAGE_PREVIEW(2)\n- document.MS_PAGE_PRERENDER(3)\n\n而在chrome里，是字符串。\n\n- “hidden”\n- “visible”\n- “prerender”\n\n## 小结\n\n本文介绍了一个相对较新，也不那么常用的API属性和方法，但如果你需要，它就会很方便地帮到你。\n\n下篇见！~","tags":["学习，javascript"],"categories":["总结"]},{"title":"【JS启示记】—闭包","url":"/2020/03/22/js_closure/","content":"\n## 前言\n\n“闭包”，可以排进JavaScript最难理解概念的前三，连那些正在从事“前端”职业的人，可能都没懂。\n\n这么说不是吓唬人，它并不难，但它的名字本身就有点不友好，“闭”什么？“包”什么？“闭什么包”？（此处自行脑补马某梅~）\n\n技术圈儿里从不缺少这类一部分人很懂，一部分人很不懂的晦涩概念。\n\n所以，在此先把名字的意思重塑一下，**闭包 == 封闭 + 包裹**。\n\n## 作用域\n\n**“闭包”就是一种突破数据访问能力的方法**。\n\n那么本身的访问机制是怎样的呢？\n\n我们知道，JavaScript的作用域，分全局和局部，局部其实也可称为“块级”。\n\n“块”即一对大括号包含的代码块。\n\n```js\n    {\n      // 代码块\n    }\n```\n不论是循环，还是条件判断语句，都在此范畴，但是在ES6之前，这样的包裹没有起到限制作用域的效果，所以，JavaSctipt的局部作用域通常由“函数”构成。\n\n变量定义在全局，就全局可访问，甚至修改，但定义在局部，只在局部可用，外部不可访问。\n\n## 函数就是闭包？\n\n相信很多人曾为搞懂“闭包”看过不少资料，看着看着，就会看到这句话“函数就是闭包”。\n\n这句话简直是雪上加霜，为理解“闭包”增添了新一层迷雾。\n\n别怕，我们来段代码：\n\n```js\n    function outer() { \n      var a = 2;\n      function inner() { \n        console.log( a );\n      }\n      return inner; \n    }\n    var global = outer();\n    global(); // 2 \n```\n\n得嘞，这就是闭包达成的效果~\n\n我特意使用了方便理解的命名方式，这段代码的特点是：\n\n- 全局作用域定义了一个函数 outer\n- outer 内部嵌套定义函数 inner\n- inner 访问了 outer 的变量a\n- outer 执行结果返回 inner\n- 返回的结果赋给了另一个全局变量 global\n\n于是，效果就是，**global 成功访问了 outer 的所管辖区域的变量**。\n\n这一路看下来是不是觉得挺正常的？可是，它本来无法访问的呀~\n\n先来看一句话：\n\n>JavaScript的函数可以嵌套在其他函数中定义，这样它们就可以访问它们被定义时所处的作用域中的任何变量。这意味着JavaScript函数构成了一个闭包（closure），它给JavaScript带来了非常强劲的编程能力。\n\n这句话来自《JavaScript权威指南》函数章节的引言，有两个重点：\n\n一、函数**构成**闭包\n二、可访问它被**定义**时所处的作用域\n\n所以，函数并不是闭包，而是闭包形成的土壤，上例中的global只是作为一种引用标识符，调用的还是内部的inner。\n\n可访问的，不是函数被调用时的作用域，而是定义时，这么一说，似乎一切都合理了。\n\n或许你有一种常识——垃圾回收机制，不再使用的内存空间会被释放掉。当函数在被调用、代码执行之后，其内部作用域就被销毁了，闭包的神奇之处就是消除这种机制所造成的影响。\n\n到这儿，我们回头再看看“封闭+包裹”是什么意思，“闭”就是局部作用域，而“包”是作用域的嵌套。\n\n## 还有么？\n\n它只有一种形式吗？答案是否定的，不然它就没那么多用处了。\n\n**只要是传递了一个函数类型的值，不论形式，当函数在别处调用，都可以看到闭包的形成。**\n\n比如这样：\n\n```js\nfunction outer() { \n  var a = 2;\n  function inner() { \n    console.log( a ); // 2\n  }\n  another( inner ); \n}\nfunction another(fn) {\n  fn(); // 妈妈快看，这是闭包!\n}\n```\n\n这段代码中，anothier 是 outer之外的一个函数，但因为它传递了一个outer内部的函数 innner，继而能够访问到 outer 中定义的a。\n\n再看：\n\n```js\nvar fn;\nfunction outer() {\n    var a = 2;\n    function inner() { \n      console.log( a );\n    }\n    fn = inner; // 将 inner 分配给全局变量 \n}\nfunction another() {\n    fn(); // 妈妈快看，这也是闭包!\n}\nouter();\nanother(); // 2\n```\n\n这种像是前面两者的结合体，先定义了全局变量fn，在函数内部将inner赋给了fn，然后在another里调用fn()。\n\n以上几段代码，形式不同，但原理一致。\n\n## 它在哪儿？\n\n到这儿大家可能已经懂了什么是闭包，但上面的讲述只是为了方便理解，实际项目中，它不会那么乖巧、坦诚的暴露给你，它可能隐藏在成百上千行的代码中，所以到底哪些地方用了闭包？或者说它有什么用？\n\n**示例一**\n\n```js\nfunction wait(msg){\n  setTimeout(function timer(){\n    console.log(msg);\n  },1000)\n}\n\nwait(\"你好, 闭包!\");\n```\n\n我们写了个wait函数，其中设置了定时器，定时器内有个timer函数，然后调用wait函数，并传参。\n\nwait函数是马上执行的，但timer在1000毫秒之后才执行，这时候wait的作用域应该是已经被销毁了，但是依然可以正常输出\"你好, 闭包!\"。\n\n**示例二**\n\n```js\nfunction clickBtn(name, selector) {\n    $( selector ).click(function listen() {\n        console.log( name );\n    });\n}\nclickBtn( \"name\", \"selector\" );\n```\n\n这段代码可看出，我们给某按钮设置了负责点击行为的函数，在函数内部绑定了事件监听器，这样以来，也出现了作用域的嵌套，形成了闭包。\n\n以上两个示例均使用了“回调”，这是一种很常见的闭包形成方式，定时器、事件监听器、Ajax请求等都存在这种情况。\n\n**“坑”**\n\n这个坑大概所有人都掉过，就是循环。\n\n```js\nfor (var i=1; i<=5; i++) { \n  setTimeout( function timer() {\n      console.log( i );\n  }, i*1000 );\n}\n```\n\n这段代码目的很明显，从1开始，每隔一秒输出一个数字，每次递增1，正确的结果是1，2，3，4，5。\n\n试着运行它就会发现“诡异”的现象，它居然输出了5次6？5次好理解，6是什么？！\n\n这就要追究到js的任务运行机制，在循环体中，遇到定时器、事件监听器或其他类似执行体的时候，会先执行循环，将i从头到尾存储到一个栈当中，而里面的函数并不会在i值变化的时候马上执行，会依次进入任务队列，for循环结束后，队列中的函数才进入主线程执行，所以，这里i执行完最后一次迭代就是6，且被5个定时器输出了5次。\n\n怎么解决？较为常用的一种办法是：\n\n```js\nfor (var i=1; i<=5; i++) { \n  (function(j) {\n      setTimeout( function timer() { \n        console.log( j );\n    }, j*1000 );\n  })( i );\n}\n```\n\n我们加了个立即执行的匿名函数，这就为每次迭代创建了一个闭包环境，即使里面的函数体依然会等待执行，但正确的值已经被每个独立的作用域保存起来，执行的时候就能输出预期的结果。\n\n慢着，这么做不就是为了得到一个封闭的作用域吗？既然如此，干脆这样咯：\n\n```js\nfor (let i=1; i<=5; i++) { \n  setTimeout( function timer() {\n      console.log( i );\n  }, i*1000 );\n}\n```\nES6的出现给了我们更干净的处理方式，终于不用动歪脑筋了~\n\n## 更大的用处\n\n闭包的一项本领是什么？——**局部作用域中的变量，跟外界相互独立，但可通过调用内部定义的函数访问**。\n\n而这正是模块化所需要具备的：\n\n- 隐藏私有数据\n- 暴露共有方法\n\n所以，我们可以这么写。\n\n```js\nfunction Module() {\n  var something = \"模块私有数据\";\n  function doSomething() {\n    console.log(something);\n  }\n  return {\n    doSomething: doSomething,\n  };\n}\nvar foo = Module();\nfoo.doSomething(); // 模块私有数据\n```\n\n是不是很熟悉？也感受到了闭包的无处不在和强大？\n\n当然，模块化有多种形式，本文点到为止，后面单独介绍。\n\n## 小结\n\n对于“闭包”，我们需要了解：\n\n- 它是什么\n- 表现形式\n- 应用场景\n\n懂不懂“闭包”似乎成为工程师们的一道坎，相信读罢此文，你已经豁然开朗，如有问题，欢迎交流~\n\n下篇见！","tags":["学习、JavaScript"],"categories":["总结"]},{"title":"【JS启示记】—原型（链）","url":"/2020/03/19/js_proto_chain/","content":"\n在笔者对JS还很懵懂的时候，曾认为“原型（链）”是个高深难懂的概念，面试题经常看到，网上也随处可见有关它的文章。\n\n可当我抱着一颗严肃而又敬畏的心去研究的时候，才发现，就只是这样？\n\n对原型的理解固然很重要，但它算不上最难，甚至称不上“难点”，仅仅是一个必须懂的东西而已，不信？听我一一道来。\n\n## 为何存在\n\n首先你应该已经知道，JavaScript当中，几乎所有数据类型都能当做对象来用，为什么是“当做”，而不是“是”？因为像“数字、字符串”这些，它本来就不是对象（跟显式定义的对象相比），但如果你要像对象那样使用，比如：\n\n```js\n    var num = 123;\n    num.toString(); // \"123\"\n```\n\n它也能顺利进行，而且示例的这种用法极为常见，为什么？\n\n这里经历了这么一个过程：\n\n- 内置包装类临时构造了一个Number()对象实例\n- Number()实例具有继承自Object()的方法toString()\n\n本次代码执行就由继承而来的toString()来完成。\n\n好，其实到此为止，我们就看到了一条完整“原型链”的东西。\n\n> num——>Number——>Object\n\nJavaScript本身并非具备完善面向对象特性的语言，它借助原型链来实现**继承**。\n\n## 从对象谈起\n\n既然原型链跟对象有关，就从对象说起，当然，这不是介绍对象的文章，基础略过。\n\n把对象分为三类：\n\n- 直接量和通过Object创建\n- 内置包装类（显式或隐式都算）\n- 自定义构造函数创建\n\n不论哪一类，道理都一样，只是“原型”和“链”的长度不同而已。\n\n第一种最短，它不是由其他对象创建而来，是没被“污染”的，最“干净”的顶层对象，既没有“包装类”那些系统已经定义的自有方法，又没有开发者定义的属性和方法。\n\n说完对象，下面来看它们是怎么链起来的。\n\n**内置包装类**\n\n```js\n  var str = new String();\n```\n\n链是这样的\n\n> str——>String——>Object\n\n**构造函数**\n\n```js\n   function Origin(){\n     this.prop = prop;\n     this.method = method;\n   }\n\n   var obj1 = new Origin();\n```\n\n这时候链是这样的\n\n> obj1——>Origin——>Object\n\n到此，虽然示例很简单，你应该明白了什么。\n\n## 类比理解\n\n如果还没懂（甚至上面提到的东西不知所云），也完全没关系，因为单纯搞懂原型链是怎么回事并不必要懂JS，**优秀的思想和模式都是通用的**。\n\n我们拿另一项Web技术CSS来做个类比。\n\n- Object，相当于我们页面啥都还没写的时候，body所具备的样式；\n- 内置包装类，即标题、ul、input等有自带样式的元素；\n- 构造函数，就是“啥也没有”的div、p、span之类；\n\n当你直接写个div在页面上，再填几个文字进去，它同样有颜色和大小，但是你可以在div上定义新的规则将其覆盖，这就类似于对象属性的继承和覆盖。\n\n当你写个标题或者表单元素，它们会比上面的文字多一些特殊的自有样式，这就类似于String或者Array对象，它们除了继承自Object，还具备特有的属性和方法，当然，你也可以自定义把它们覆盖掉（但通常不建议这么做）。\n\n```html\n    <body>\n      <div>\n        <p></p>\n      </div>\n    </body>\n```\n\n> 这里的链就是  p——>div——>body\n\n看到这里，是不是舒服多了？来加个餐。\n\n## 检查、设定\n\n搞懂了”原型链“，顺带分享几个”检查“和”设定“原型的方法。\n\n### 检查\n\n`constructor`\n\n  这是个不常被提到，但还挺管用的属性。\n\n```js\n  var date = new Date();\n  date.constructor\n```\n\n如果只是这么写会有问题，它会把整个函数体返回，我们取其名字即可：\n\n```js\n  date.constructor.name //  Date\n```\n\n但是，constructor并非不可修改，你可以给 Prototype 链中的任意对象添加名为constructor的属性或者对其进行修改，所以它引用的目标可能跟想象的有出入，不推荐使用。\n\n`instanceof`\n\n这个方法常用来判断数据类型，但它也可以用来判断某对象是否在另一个实例的原型链上，返回布尔值，比如上例\n\n```js\ndate instanceof Date  //  true\n```\n\n自定义构造函数同样适用\n\n```js\n  function Person(){\n    //...\n  }\n  var liming = new Person();\n  liming instanceof Person;  //  true\n```\n\n  `__proto__`和`Object.getPrototypeOf()`\n\n```js\n  date.__proto__ == Date.prototype; // true \n```\n\n  但`__proto__`不建议使用，因为它是一个内部属性，而不是开放API，且并未被写入新版本的ES正文中，可能存在浏览器实现的差异，已经有了等效的方法，就是`Object.getPrototypeOf()`\n\n```js\n  Object.getPrototypeOf(date) == Date.prototype // true\n```\n\n  `isPrototypeOf()`\n\n  这种方法较新，也更直观和方便，在浏览器支持的情况下，可以优先选择。\n\n```js\n  Date.prototype.isPrototypeOf(date); // true\n```\n\n知道了检查方法，再看指定。\n\n### 指定\n\n聊两个点：\n\n一，把某对象指定为另一个对象的原型\n二，在原型上定义属性/方法\n\n指定的目的是“继承”，因为并非所有的对象创建完毕之后就不再改变了，也或者我们需要它继承另外一个对象不一样的东西，这时候就要变换/指定其他原型，我猜你会想到这么个方法。\n\n```js\na.prototype = b.prototype;\n```\n\n这个方法可以让a引用b，但它的机制可能不是你想要的，当你执行类似 a.prototype.myMethod = ... 的赋值语句时也会修改到 b.prototype 对象本身。\n\n所以，想要创建一个更加稳妥的关联对象，要使用如下方法\n\n`Object.create()`\n\n```js\na.prototype = Object.create(b.prototype)\n```\n\n这个语句的意思是：“创建一个新的 a.prototype 对象并把它关联到 b.prototype”。\n\n你应该会有个疑问，既然有这个语句，就代表a原本是存在的，那么这样做之后，a.prototype原本关联的对象哪儿去了？\n\n是的，两者的关系被剪断了，它被抛弃了，这也是此方法唯一的瑕疵。\n\n还有一个更标准且可靠的方法来修改对象的Prototype关联，往下看。\n\n`Object.setPrototypeOf()`\n\nES6开始可以直接修改现有的 a.prototype \n\n```js\nObject.setPrototypeOf( a.prototype, b.prototype );\n```\n\n### 共享\n\n定义原型链属性/方法的一个目的是共享，如\n\n```js\n    function People(name) {\n        this.name = name\n    }\n    People.prototype.age = 23 // 岁数\n    // 创建两个实例\n    var People1 = new People('lucy');\n    var People2 = new People('lily');\n```\n\n这种其实就是**组合”构造函数和原型”模式**，既共享了年龄，又独有了name，这是一种很常见的方式，是比较好的实践经验。\n\n## 小结\n\n此文重点分享”原型链“，但求简单易懂，无法兼顾广度和深度，鉴于JS和对象本身的细节很多，难免有遗漏或描述不妥，如需更多了解，可查阅官方文档、《JavaScript权威指南》、《你不知道的js》或其他优质资源，欢迎交流。","tags":["学习、JavaScript"],"categories":["总结"]},{"title":"【算法和数据结构】—栈","url":"/2020/03/17/data_structure_stack/","content":"\n上一篇我们说了\"列表\"，是个相对简单的结构，如果数据存储的顺序不重要，也不必对数据进行查找，列表就很合适，但如果有特定的要求，“列表”就显得简陋了，本文开始，介绍一系列\"真正\"的结构。\n\n## 栈是什么\n\n关于“栈”有个经典的比喻，就是“放盘子”，我们平时在家吃饭洗盘子，都是先放最底下一个，然后一个一个往上摞，拿盘子也是从上面拿，即“存、取”都是从最上面进行操作——“LIFO(last in first out)”，这样的操作就很快，也方便实现。\n\n在讲JS的时候，不会很经常地提及“栈”这个东西，但它却默默地在背后发挥作用，比如：表达式求值、处理函数调用等。\n\n## 栈的实现\n\n存储数据的底层结构这里还是选择“数组”。\n\n```js\n    function Stack(){\n      this.dataStore = [],  //  初始化一个空栈\n      this.top = 0,  //  记录栈顶位置，有元素加入则发生变化\n      this.push = push,   //  入栈\n      this.pop = pop,   //  出栈\n      this.getTop = getTop    //  获取栈顶元素\n      this.length = length    //  获取元素个数\n      this.clear = clear    //  清空栈\n    }\n```\n\n## 方法\n\n`push()`\n\n```js\n    function push(ele){\n      this.dataStore[this.top++] = ele;\n    }\n```\n\n这里特别注意 top++ 的位置，放在了后面，这样新入栈的元素就放在了top代表的当前位置，然后top指向下一个位置。\n\n`pop()`\n\npop方法和push相反。\n\n```js\n    function pop(ele){\n      return this.dataStore[--this.top];\n    }\n```\n\n直接将长度减1，便将栈顶元素剔除了\n\n`getTop()`\n\n```js\n    function getTop(){\n      return this.dataStore[this.top-1];\n    }\n```\n\n`length()`\n\n有时需要获取长度，知道有多少元素\n\n```js\n    function length(){\n      return this.top;\n    }\n```\n\n`clear()`\n\n清空栈\n\n```js\n    function clear(){\n      delete this.dataStore;\n      this.top = 0;\n      this.dataStore = [];\n    }\n```\n\n## 试一试\n\n```js\n    var plates = new Stack();\n    plates.push(\"瓷的\");\n    plates.push(\"红的\");\n    plates.push(\"我的\");\n    console.log(\"个数:\"+ plates.length());  //  个数:3\n    console.log(plates.getTop());  // “我的”\n    console.log(plates.clear());  \n```\n\ndemo顺利运行，得到我们想要的结果。\n\n## 栈的应用\n\n那么栈可以应用在哪类需求里？\n\n### 递归\n\n“栈”经常被用于实现编程语言，递归便是其中一种，我们尝试实现。\n\n递归有很多典型使用场景，有一种叫“**阶乘**”。\n\n可以是这样：\n\n```js\n    function factorial(n){\n      if(n == 0){\n        return 1;\n      } else {\n        return n*factorial(n-1);\n      }\n    }\n```\n\n用“栈”就是这样\n\n```js\n    function fact(n){\n      var s = new Stack();\n      while(n>1){\n        s.push(n--);\n      }\n      var result = 1;\n      while(s.length() > 0){\n        result*=s.pop();\n      }\n      return result;\n    }\n```\n\n我们来试一下\n\n```js\n    fact(5);  // 120\n```\n\nOK。\n\n虽然从代码量来看，第二种反而更多，不如前面简洁，但这只是一个很简单的例子，而且二者算法不同，栈仍然有着它更加强大的用途。\n\n### 函数设计\n\n我们知道，函数的定义就是为了封装一个可复用的代码块。那么在重复应用的时候，参数是怎样传入的呢？\n函数内一般都会定义局部变量，而不是单使用全局变量，那么局部变量存在哪里合适，而且能够在各种情况下都不发生冲突？\n\n“栈”就可以解决这些问题，函数调用的时候，将参数和变量都压到一个栈中，这样避免产生太多的空间占用，也可以利用栈指针的偏移来完成存取，只要对应的函数栈指针是不同的，就不会发生冲突。\n\n## 小结\n\n关于“栈”的介绍到此告一段落，为便于理解，并没有很高深的东西，但不代表它不强大，相反，如果能够在合适的场景加以利用，就会帮到大忙，大家在实践中共同摸索吧~\n\n这篇同样比较简单，但学习就是要由简到繁，由浅入深嘛，下篇见！~\n\n\n    \n","tags":["JavaScript、算法"],"categories":["学习、总结"]},{"title":"【算法和数据结构】—列表","url":"/2020/03/16/data_structure_list/","content":"\n\"列表\"是个相对简单的结构，说简单，不是形式，而是操作复杂度，因为从形式上看，它和“栈、队列”，是没有什么差别的，区别在于计算的方式，本文主要研究“列表”。\n\n## 抽象数据\n\n想用程序解决问题，就需要把问题转换成程序语言，所以第一步是“抽象”。\n\n想想看，“列表”有哪些属性？\n\n- 数据项：元素\n- 元素个数：长度\n- 查找元素\n- 插入：表头、表尾，或者任意两个元素中间\n- 删除或者清空操作\n- 显示所有元素\n- 获取当前元素\n- 元素位置\n- 移动查找\n\n## 定义\n\n由上面整理的数据，我们可以把“列表”这个类给封装定义出来。\n\n```js\n    function List(){\n      this.listSize = 0;\n      this.pos = 0;\n      this.dataStore = 0;\n      this.clear = clear;\n      this.find = find;\n      this.toString = toString;\n      this.insert = insert;\n      this.append = append;\n      this.remove = remove;\n      this.prev = prev;\n      this.next = next;\n      this.moveTo = moveTo;\n    }\n```\n\n## 实现\n\n### 添加（append）\n\n此处只展示在末尾添加，你当然可以在任意位置进行添加。\n\n```js\n    function append(ele){\n      this.dataStore[this.listSize++] = ele;\n    }\n```\n\n### 删除（remove）\n\n删除需要分成几个步骤：查找、删掉、填补。\n\n先来实现“查找（find）”。\n\n```js\n    function find(ele){\n      for(var i;i<this.listSize;i++){\n        if(dataStore[i] == ele){\n          return i;\n        }\n      }\n      return -1;\n    }\n```\n\n而删除方法就需要从`find()`方法返回的位置对列表进行截取，改变后，将列表长度减1，如果删除成功返回true，否则返回false。\n\n```js\n    function remove(ele){\n      var fundAt = this.find(ele);\n      if(fundAt > -1){\n        this.dataStore.splice(fundAt,1);\n        --this.listSize;\n        return true;\n      }\n      return false;\n    }\n```\n\n`length`和`toString()`较为简单，直接返回相应的值就好，此处就不写了。\n\n写到这儿，不妨先检测一下效果如何，新建一个列表的实例。\n\n```js\n    var nameList = new List();\n    nameList.append(\"新生1\");\n    nameList.append(\"新生2\");\n    nameList.append(\"新生3\"); // [\"新生1\", \"新生2\", \"新生3\"]\n    nameList.remove(\"新生2\"); // [\"新生1\", \"新生3\"]\n```\n\n代码顺利执行得到正确的结果，接着往下看。\n\n### 插入（insert）\n\n既然是插入，那就是一个相对位置，找到目标位置，将新元素放进去，听起来跟上面的`remove()`方法有相似之处，实际也是一个原理。\n\n```js\n    function insert(ele,after){\n      var insertPos = this.find(after);\n      if(insertPos > -1){\n        this.dataStore.splice(insertPos+1,0,ele);  // 此处有个坑，记得位置数字加1，否则就插到前面了\n        ++listSize;\n        return true;\n      }\n      return false;\n    }\n```\n\n还拿上面的示例来看，我们将删除的“新生2”的位置用一个新元素“神秘来宾”补充。\n\n```js\n    nameList.insert(\"神秘来宾\",\"新生1\"); // [\"新生1\", \"神秘来宾\", \"新生3\"]\n```\n\n### 清空（clear）\n\n清空操作就有点暴力了，有一定危险性，不过也在常规操作的范畴。\n\n```js\n    function clear(){\n      delete this.dataStore;\n      this.dataStore = [];\n      this.listSize = this.pos = 0;\n    }\n```\n\n但还是要注意，这里是清空，而不是删除，列表还在，只是内容为空，所以，把旧列表删了又新建了个空的列表。\n\n### 移动查找（next、prev、moveTo）\n\n列表项的移动分三种：前、后、指定位置。\n\n```js\n    function prev(){\n      if(this.pos>0){\n        --this.pos;\n      }\n    }\n\n    function next(){\n      if(this.pos<this.listSize-1){\n        ++this.pos;\n      }\n    }\n\n    function moveTo(position){\n      this.pos = position;\n    }\n```\n\n这些方法起来很简单，但也是有对应的场景，譬如：焦点图的上一张、下一张、跳到指定张等。\n\n## 应用\n\n说了这么多，“列表”这种结构有哪些用途呢？很常见，比如：待办事项、购物清单、排行榜等等，具体代码就不再这里罗列，只不过是代码的具体场景化而已，这种结构相对很好理解，就先聊到这儿，我们下篇见。\n\n\n\n\n\n\n","tags":["JavaScript、算法"],"categories":["学习、总结"]},{"title":"“微信读书”100本——如何培养阅读习惯","url":"/2020/03/11/read_everyday/","content":"\n首先帮你打消顾虑，我并不比你爱读书，虽然我常这样“介绍自己”。\n\n你的困难我都有：\n\n- 一本书读几页就读不下去；\n\n- 一读书就犯困(可用于催眠~)；\n\n- 不感兴趣的不读；\n\n- 感兴趣的买回去放书架常年吃灰；\n\n- 总因为“没时间”无法阅读；\n\n等等。\n\n买书就像有些女生买包、买衣服，看着就想买，买回家放一阵就失宠，甚至包装都没拆又想买新的。\n\n虽然如此，我终于还是完成了100本的小目标，说说怎样做到的。\n\n## 开始\n\n因为之前在腾讯工作，对自家产品比较关注，“微信读书”刚出来的时候有新用户送书、送书币的活动，我就安装了，往书架里收藏了N多本书，挑一两本看了看。\n\n但是，是习惯都很难养成，读书尤甚，所以，没过多久我就很少打开了，就算打开，也是对着书架扫两眼，到书城随意逛逛，又关上，并没阅读，说来跟逛街挺像，逛半天啥也没买。\n\n又没过多久，因为手机内存不够，把它卸了...\n\n## 动机\n\n读书可以有很多动机。\n\n- 朋友\n\n不论做什么，找到有共同语言的人总是好的，聊电影，聊综艺，聊八卦，读书亦然。\n\n你想读书，如果有朋友一起读/推荐读，就读得更有乐趣，我就是因为知道另一个朋友在用微信读书，还读得蛮多，就又把它装了回来，并经常互相交流”你最近读书了吗？读的什么？感觉怎样啊？“\n\n- 兴趣\n\n书的种类很多，不必贪多，你喜欢哪一类就可以先读哪类，小说、历史、心理等等，等到了一定程度，形成了阅读的习惯，尝到甜头，兴趣范围会慢慢扩大到其他品类，你会忍不住打开某本书看看。\n\n- 求知\n\n有种说法叫“闲书“，小说、散文之类的书通常会被打上这样的标签，因为他们对于个人能力和素质的提升似乎没有好处，也不会帮助你提升工作技能，不能帮你升职加薪，被称作”闲书“。\n\n你当然可以那样认为，读书本无定论——什么该读，什么不该读。\n\n如果你的确对”闲书“不感兴趣，就可以选择那些”指点迷津的、增长技能的、指引方向的“书籍来读，去学习提升自己。\n\n- 见识、熏陶\n\n这点放最后，是因为它最广博，也最漫长，如果把它作为开始的理由，你百分之九十九会失败，但其实**这才是你形成阅读习惯之后将收获的最大益处**。\n\n”腹有诗书气自华“，”读万卷书，行万里路“，”读好书，就是和很多高尚的人谈话“，古今中外对”读书“的褒奖不胜枚举。\n\n恕我直言，多数人的生活是单调的、闭塞的，我们很难去经历多种人生，也不可能走遍世界，但人都有一种天生的好奇，所以怎样能够**较低成本给自己增长见识**？读书便是其一。\n\n读的书越多，你就能通过不同类型、作者和内容，接触到不一样的事物、人物。无意间，你知道了很多以前不知道的，没有感受过的，它们可能刷新你的认知，给予你启发，为你树立榜样等，无疑是不错的精神食粮。\n\n## 选择\n\n### 好书\n\n我们需要读好书，但对于太长时间没有读书的人，甚至可能不知道书有哪些种类（一点都不夸张）。\n\n所以到哪里找？途径很多。\n\n（排名不分先后）\n\n- 豆瓣评分\n\n- 知乎推荐\n\n- 图书网站排行\n\n- 实体书店推荐\n\n- 书单公众号\n\n- 读书app排行\n\n- 读书类节目\n\n列这么多，是告诉你我了解的途径，不一定都用得到，读书的过程，也是在积累经验，读多了就知道去哪里能找到自己需要的，哪一类是自己喜欢的。\n\n虽有着诸多的选择，我们还是要有自己的甄别力，**并非评分高的，被推荐比较多的，你就要去读**，很多都有博眼球的营销嫌疑，比如：贩卖焦虑、贩卖孤独、成功学、情商学等等，你还会发现，那些被推荐、被关注较多的，往往会被不同的平台反复推送，各个都去看就太浪费精力了。\n\n最重要的一点：**选好了，买了，不等于自己的，要读**~\n\n### 适合的书\n\n常见的书，不论主题是什么，顶多4、500页，所以不可能面面俱到，适合的读者群也不一样，有基础的，有进阶的，有生硬的，有风趣的，别人觉得好，对你不一定适合。\n\n所以，知道哪些可能的好书，第二步就是找适合自己的，这样你才更能读得进去，收获更大。\n\n### 电子还是纸质\n\n至今还有不少人在维护纸质书籍的”原始纯粹感“，我也曾是它的拥护者之一，现在也不反对，而且买了很多（支持正版），但是，仍然希望朋友们不要本末倒置，**我们的目的是”读书“，不是”方式“**，不论你选择电子还是纸质，读，多读，就是最好的结果~\n\n## 沉浸\n\n”读书难“，是每个想读书的人需要克服的问题，有很多原因，但归根是不能沉浸其中。\n\n在我使用微信读书的过程中，发现有些人一周的阅读时长是”1分钟、3分钟“，这类人是有读书倾向的，为什么没读呢，就是没读进去，相信我，很少有书能够让你在5分钟以内被吸引，说句玩笑话，5分钟连前言都翻不完，你还远没有读到它在讲什么，思路也好，情感也好，完全不能理解和产生共鸣，当然不会想继续下去。\n\n另外，还有一个原因，人们习惯快速获取信息，看新闻也好，视频也好，几分钟就可以完成，读书则需要花费数小时，还要理解和消化，相比之下乐趣减少，难度增大，容易放弃。\n\n所以，除了找到一本好书，还需要多一点点耐心。\n\n## 读吗？\n\n说了这么多，要开始读吗？\n\n可以看这么几个问题：\n\n- 一定要锻炼身体吗？很多人不锻炼也好好的。\n\n- 一定要吃肉、喝牛奶吗？素食主义者大有人在。\n\n- 一定要早睡早起吗？这个不用我说了~\n\n所以一定要读书吗？当然不，但是。\n\n**每一种形式都有其不可替代性**，音乐是声音，电影是影音，旅行是自然风光、风土人情，读书则是文字之美，遣词造句、组织结构的技巧，是一种更具想象空间的方式，它可以承载任一领域，魅力不可替代。\n\n啰嗦够多了，如果你还没过瘾，还有疑问，我们可以接着聊。\n\n如果你想培养好习惯，或者正在进行中，欢迎加入我的微信群：Everyday。\n\n这里有一群还算勤奋的小伙伴，读书、锻炼、各种打卡姿势等你来！~\n\n![](/img/read_everyday/Wechatqun.jpeg)\n\n","tags":["读书"],"categories":["总结"]},{"title":"【JS启示记】引用类型——地址","url":"/2020/03/10/js_index_type/","content":"\n说“引用类型”，因为它有个弯儿不好理解——什么是引用？\n\nJS数据类型分两种：基本类型和引用类型。\n\n当我们定义变量的时候，实际是在计算机的内存中为数据分配一份存储空间。\n\n表面上看：\n\n```js\n    var a = 3;\n    var b = [1,2,3];\n```\n\n我们将数字3赋给了变量a，将数组[3]给了变量b，二者并无区别。\n\n多一个操作\n\n```js\n    var c = a;\n    var d = b;\n```\n\n打印如下\n\n>c：3\n>d: [1,2,3]\n\n来一点改变\n\n```js\n  c = 5;\n  d[1] = [5];\n```\n\n再看打印结果\n\n>c：5\n>a：3\n>d: [1,5,3]\n>b：[1,5,3]\n\n到此我们可以发现不同之处。\n\n**基本类型赋值前后的变化互不影响，而引用类型产生了影响**。\n\n发生了什么？\n\n基本类型在做赋值的时候，是找了一个新的存储空间，把自身的**值**复制一份出去，然后两者相互独立，改一方不影响另外一方。\n\n引用类型则不同，它是把存储值的**地址**放在了另外一个空间里，不论哪个地址的内容改了，就都会发生改变。打个比方，就像两人拿了同一个保险箱的钥匙，不论谁从那个箱子放东西、取东西，另外一人打开箱子都会看到变化。\n\n那么引用类型有哪些？\n\n常规对象：Object、Array、Date、RegExp、Function\n\n基本包装类：Boolean、Number、String\n\n单体内置对象：Global、Math\n\n可以看出，种类很多，而且JS是一门基于对象的语言，对象恰恰是引用类型的值，当我们创建了一个对象，就可以有一系列丰富的特性和操作，譬如：\n\n- 属性，用于存取值\n- 方法，用于执行特定操作\n- 原型链，可以继承或者共享以上两者\n\n更为方便的是，javaScript语言本身已经提供了颇为丰富的操作方法，在使用引用类型时，可以不定义就直接使用，这里不做深究，聊具体对象的时候再详述。\n\n有这么几点需要说一下：\n\n- 引用类型看似并列关系，但所有类型都从Object继承了基本的行为——toString、valueOf等，且它们沿原型链向上追溯最终是到Object，可以理解为，Object是个基对象，其他类型添加了各自独有的属性或者方法做了扩展。\n\n- 函数是Function类型的实例，所以它也是对象，也有方法。\n\n- 每个包装类都可以对应到同名的基本类型，在读取基本类型的时候就会创建对应的对象，从而方便操作，但**在操作的执行语句执行完之后，便立即销毁**。\n\n意思是：\n\n```js\n    var a = 3;\n    a.name = \"number\";\n```\n\n当执行到第二条语句的时候，会自动创建一个Number()对象，然后把”number“赋给对象的name属性，但是这条语句执行完之后马上就销毁，所以并不能继续访问或者操作a.name。\n\n- 在所有代码执行之前，就已经存在两个对象，Global和Math，你可能对Global感到陌生，但一定对window不陌生，它就是web浏览器所定义的，用来承担Global角色的对象。\n\n## 小结\n\n”巧妇难为无米之炊“，基本类型是一门语言的基石，他们用于存储、计算、输出，但引用类型的存在才真正使JavaScript变得灵活和强大起来，理解和掌握它们就尤为重要，本文只是一篇小tips，后面我们继续探讨。\n\n","tags":["学习、javascript"],"categories":["总结"]},{"title":"从前端开发流程谈团队体验优化","url":"/2020/02/17/fe_team_better/","content":"\n>有槽点的地方就可提升。\n\n日常工作中，相信大家跟同事相处都很和谐、很融洽，除了偶尔“忍无可忍”...但在茶余饭后，你肯定有不少关于某人的槽点拿来跟大家聊，要么响应慢，要么输出的东西你用起来不舒服，要么对你“过于关照”，等等，你会发现其他人也有类似的感受，既然有吐槽，就必然存在问题，本文发表一些个人愚见，聊聊这些问题。\n\n## 提需求\n\n需求从哪儿来？\n\n- 产品规划——基于部门的阶段性目标制定；\n- 产品优化——使用体验欠佳，功能或者页面调整；\n- 前期遗漏——前期考虑不周就发布上线，不得不提额外的需求去弥补；\n- 领导建议——高层领导在使用过程中察觉到问题；\n- 运营反馈——运营活动、abTest，试验性取舍；\n- 客户反馈——客服渠道或者亲友、同事、社交软件收集的问题。\n\n以上基本能够涵盖大部分的需求来源，看起来都没有问题，但其实每个环节都或多或少有改善空间。\n\n先聊聊大家熟知的事情。\n\n## 改需求\n\n有过项目经历的都知道，一个页面或者一个功能模块，一旦定稿，集中精力做的话，少则三四天，多则十天半月，即可初步开发完成，然后是兼容、适配、测试、灰度和发布，但往往稍具规模的团队都不会给你一个完整的时间很顺利地完成这个过程，而是多个需求并行开发，测试、修改穿插。\n\n定稿之前，设计师有个初稿，中间稿，定稿，定稿1，定稿2，定稿3，打死不改终稿，打死不改终稿1...\n\n而开发折腾的点在于，设计改了你要改，设计不需要改的时候，文案、逻辑、提示、公告等也需要你改。\n\n这就造成了一种习以为常的亚健康状态——改需求。\n\n由此带来的，是**工期评估成为伪命题**，你无法准确估算到底需要多久，时间长了产品觉得太慢，时间短了你压力大，有种说法是“从后向前推”，即上线时间确定，不论耽误了多少时间，都要赶在预定上线时间之前完成，所以还是会给一个时间，然后加班加点地去迎合，叫苦不迭。\n\n显然，这不是某个环节的问题，而是团队运转的问题，分块来谈。\n\n## 基建\n\n只要稍具规模的，趋于稳定的团队，都会有个问题，平稳有余，激情不足，成员积极性不够，创造力不够，除了搬砖做需求、改bug，就是吹水、休闲娱乐。\n\n这会造成两个问题：\n\n其一、团队工作模式僵化，一成不变，哪怕有若干因素导致它是低效的、不舒服的，也没人提改善意见，即使提了，也很难被执行，除非团队leader重视起来，不断的进行监督和督促，甚至把它作为绩效考核的一部分；\n\n其二、个人工作不断重复，知识和经验积累停滞，进入温室效应，止步不前。\n\n员工的首要任务是完成分配的工作内容，公司的首要目标是产生效益，无可厚非。但员工同样是人，有性格、情感、爱好、长处，他们需要快乐、需要得到认可，需要体现价值，而作为占了日常时间至少70%的工作来说，有必要把这些提供给他们，怎么提供？\n\n**团建、聚会**：\n\n脱离工作的严肃感甚至压迫感，把大家更生活和个性的一面展示出来，让彼此在轻松的氛围中更熟悉，拉近距离。\n\n**薪资、头衔**：\n\n涨薪、发奖金，或者职级提升，优秀员工评定，这是每个人都乐于得到的，代表领导对自己工作的肯定。\n\n**学习、会议**：\n\n不论哪个行业，都在发展和更新换代，很多东西需要学习，技术尤甚，且变化多端，所以，不论是开工作会议汇报总结，还是开分享会交流学习，都能够给大家有益的刺激，增添更多动力，也能把学到的新东西及时用于工作当中解决问题。\n\n**人尽其用**：\n\n每个人都是不同的，同一件事，不能指望每个人都做，或者做得同样好。\n\n我们的目标不是同质化，而是善于发现他们的闪光点，将其最大化。\n\n有人乐于研究工具，就让他去研究，帮助大家提升效率；有人对框架/库感兴趣，就让他去学习和掌握，进而尝试接入项目；有人擅长整理文档，就把整理汇总的工作给他。\n\n各人的精力都是有限的，由我这几年的经验来看，更建议发展自己成为专才，而不是通才，更何况，举目望去，专才都凤毛菱角，就不必贪心了。\n\n当然，这并不代表和其他事情绝缘，我们可以共享他人的成果，也应该跟团队其他成员分享自己的成果，互相学习，互帮互助。\n\n**每个职场人的追求，不外乎去一个有温度、有前景的公司，发挥自己的专长，做一些有意义的事，并得到相应的成长和回报。**\n\n当人和人之间的关系更好，个人素质更高，不但可以在不断讨论、摸索中优化工作方法，还能增强团队凝聚力，增加成员的参与感和荣誉感，不论团队取得了什么成绩，他都会觉得，那当中有他一部分贡献在，而不只是沾了光的旁观者。\n\n## 个人\n\n**产品经理**\n\n说到产品经理，在团队中是什么角色？提需求，写需求文档，跟各个环节的执行者沟通。\n\n他们不是领导，胜似领导，说话的风格通常是这样：\n\n命令式——“X同学，这个需求你做一下。”\n商量式——“X同学，这个事比较紧急，看能不能优先？”\n渴求式——“帮帮忙，马上要上线了，这个问题解决一下好不好？”\n\n不论什么方式，结果就是，设计怎么做，开发做什么，源头都来自产品。\n\n故而，产品的眼界，决策力，对需求的判断、整理和规划能力就显得尤为重要，否则整条线都跟着折腾，要么方向错了，开发到中途放弃/夭折，要么逻辑没有理清楚，各种的修改和增减，本可以两天弄完，拖到一周，本可以下班之前弄完，加班到半夜。\n\n另外，由于产品经理工作的特殊性，需要跟各环节沟通，高效沟通就成了关键，怎么算高效——**我说的你懂，你知道怎么说我能懂**。而且最好一次把事情讲清楚，避免“我以为你知道，原来你不知道”、“上次跟你说的时候说漏了”等情况出现。\n\n如何改善？一方面靠产品自身素质和意识的提升，**如何列需求，怎样整理问题**，然后，跟业务相关的跨领域知识稍懂一些，比如设计，是单屏还是多页，想要什么颜色，放在什么位置，想以什么样的形式突出，给用户什么感觉，等等，并不涉及很具体的专业知识，只是站在一个用户习惯和交互需要，较准确地跟设计师传达信息，设计师就能有针对性地做出接近理想的效果，降低返工率。\n\n当然，还有另一方面，后面会提。\n\n**设计、开发**\n\n设计和开发在跟产品沟通的时候有个共同点，专业领域的东西产品不一定懂，但相比之下，设计的东西更好懂，说到底它是人的视觉感受，可以用自然语言表达出来——“颜色淡一些”，“那块突出一些”，“这里加一根线”等等。\n\n难的是开发和产品的沟通，涉及较多细节。比如说：\n\n- 什么是块，什么是条。\n- 需要做的是一个页面，还是在现有页面里添加一个组件。\n- 点击的是整个条，还是一个箭头。\n- 有没有可能空、超出、报错。\n\n这几个看似较简单，但有时反复跟产品确认还是会出现认知偏差。等做完了，他又说“哦，原来你说的是这个意思啊”，这就比较尴尬，而且会让人心里很没底。\n\n更纠结的是开发复杂度的认知，本来简单的，他觉得复杂，当他拿来一个看似简单，其实挺多工作量的需求，说“这个需求很简单，给你两个小时就能做完了吧”，实际的改动可能很复杂。\n\n这就涉及刚刚没说的另一方面，除了产品在不断的合作当中了解专业概念、习惯之外，设计和开发也需要把自己专业的东西更通俗和直观地表达出来，把他们不了解的开发理念、习惯做法告诉他们，双方达成大致的共识，时间长了，就会更懂对方。\n\n**进步**\n\n进步不分工种，不分级别，你更优秀，能做的事情更多，解决的问题也更多，而不是碰到问题总爱说“这个好像搞不了”，你不解决，他不解决，问题就一直存在，成为团队长期的包袱。\n\n当习惯了“知难而退”，你会默认自己的工作就是那样——**重复、琐碎、无趣，没有上升空间**。没有一份工作是专为你提供学习和进步机会的，有时瓶颈不是来自外界，恰恰是我们自己。\n\n## 项管\n\n我本人所在的团队经历过一次变化，在那之前是没有项目管理者的，有需求产品经理直接找leader，leader看开发的排期情况安排，这样就有一些问题，提需求的时间不确定，大小不确定，随时可能来需求，leader疲于沟通和协调，开发时间线也是乱的，工期难以评估，交付压力大。\n\n后来来了个专门负责排期的人，每周安排固定时段开排期会，就有了改观，一周的需求在两三个小时内安排完毕，设计和开发随即和产品经理沟通需求，评估开发量和工期，虽然不是每次都能严格按照规定进行，但总体好了不少。\n\n项管的工作就是协调人力、时间，跟进项目进度，保障在预定时间完成上线。在多人团队中，**项管的方法和效果直接决定了开发节奏和体验**，很重要。\n\n## 链条\n\n我们都有这样的经验，领导谈工作喜欢看结果，因为无限顾及细节，结果好了，才算成绩。\n\n结果不是某个人，某个环节能够成就的。\n\n从开发角度，我们已经做了很多探索和努力，从三驾马车裸奔，到层出不穷的工具、框架、库、处理器、压缩、合并、预加载、缓存...看似挖无可挖，还有PWA、Serverless、Flutter，优秀而又有追求的开发者们一直在向前逼近，似乎要把挡在面前的障碍全部扫清。但团队是一个整体，一个链条，不宜割裂看待。你把代码写好了，高度还原，可维护，又健壮，突然说要改，列一二十条，不要疯么；你绞尽脑汁将代码压缩精简了20k，不知道谁上传了一张80k的图片，努力几近白费；你在做着这个需求，忽然有另一个需求插进来，眼瞅着要耽误工期了，不急么。所有这些，都需要每个环节的妥当安排，配合默契，才能灵活应变。\n\n人的状态对了，节奏对了，氛围好了，利于个人出成绩，也利于团队出业绩，是件双赢的事情。\n\n寥寥数语，权当茶后闲聊，时间原因不是很全面，如有冒犯，还请包含。\n\n读者朋友有何高见，欢迎交流。","tags":["思考"],"categories":["总结"]},{"title":"2020年春节，从高烧开始","url":"/2020/02/02/2020_spring_festival/","content":"\n经过一个多星期和“病魔”的抗争，我接近痊愈了。\n\n长这么大，这是过得最特殊的一个春节，相信很多人也一样，甚至更难受，一切都因为——**新型冠状病毒肺炎**。\n\n腊月29那天，我跟爸出门买东西，然后溜达着去银行，回家之后，感觉喉咙有些不适，剧烈地咳了一会儿，姐姐和爸爸都说是不是感冒了，让我吃点药，我仗着身体好，不以为意，其实在那之前的几天，我就经历过一次发烧和拉肚子，刚好，觉得不会再有事。\n\n第二天早上，也没问题，就很早起床跟爸一起回老家给逝去的亲人上坟，吹着冷风，不过戴着帽子，回来的路上还没事，到家也没事，出于保险起见，量了一次体温，37.5度，低烧，我也有点犯困，就到房间躺下了，贴春联都没出去，没想到，我这一躺，就是一个多星期。\n\n下午就烧到39度，自己都被吓到，整个人身体发热，眼皮也发热，赶紧吃退烧药，配合抗病毒、消炎。\n\n自然地，三十晚上的年夜饭没能跟家人一起吃，我也第一次没看春晚，很懊恼，每年的那个时刻，我都在饭桌上跟家人谈笑风生、推杯换盏，而这次，只能像个病猫似得躺在床上思考人生。\n\n一天，两天，三天，病走的比预想慢得多，我知道自己只是普通感冒发烧，但谁也不敢保证它不是肺炎早期症状，所以一家人都小心翼翼，我一直被隔离，不得已，爸妈决定送我去医院检查，然后姐姐一家也不在家待了，提前回了郑州。\n\n我们是做好被医院隔离的准备去的，不过检查结果正常，这下我们的心才放下一半，剩下的一半，是继续治疗。\n\n而且，疫情还远未过去，药物还远未研制出来，新增病例和死亡病例每天都在快速增加，没人能安心。\n\n我通常都觉得自己倒霉，明明平时都在坚持锻炼，也算强壮，为什么关键时刻病倒了？这件事告诉我，真的不能逞强，吹凉风容易感冒，这是体质问题，很难改变。\n\n还好，要痊愈了，不用再成为家人的累赘，但春节也过完了...\n\n疫情仍在继续，警报尚未解除，没有人是安全的，只希望，我的小宝宝能平安、健康地出生。\n\n谨以此文，记录2020年这个不平凡的春节。","tags":["随笔"],"categories":["随笔"]},{"title":"时间的礼物——助力下个十年","url":"/2019/12/31/2019_2020_time/","content":"\n\n送别2019，迎接2020。\n\n这些文字，是对我近几年经历和思考的一些整理。\n\n索性就从“整理”开始。\n\n\n## 整理\n\n“一屋不扫，何以扫天下”。\n\n人都有个习惯，用完东西随手一放，不碍事儿就行，要是碍事儿，再往旁边挪挪。\n\n曾听两人聊天，怎么能让衣柜里的衣服不乱？因为就算叠放得再整齐，每天早上找衣服，拿衣服，过几天又会乱糟糟，怎么办？\n\n只能重新整理。\n\n只是衣柜么，我们有太多需要整理，桌子、房间、工作用到的文件、手机相册，长时间不整理就会杂乱无章，很多没用的东西占着空间，给我们制造麻烦，当手机装不进软件、无法拍照，房间已经没空间再放置东西，你才知道不得不整理了。\n\n看起来是小事，就像很多时候我们认为，当家庭主妇容易，清洁阿姨的工作轻松好干，不知道的是，那些不起眼的琐事他们每天都在重复着做，才有了我们整齐干净的环境。\n\n所以，别偷懒，勤整理。\n\n\n## 接纳\n\n“海纳百川，有容乃大”。\n\n常听到这样的表达——“不喜欢”、“没兴趣”、“不认同”，然后聊天就没法愉快地进行下去。\n\n你肯定试图说服过别人，也曾被人说服，但大都失败告终。\n\n每个人都有自己的喜好和认知。\n\n比如，我高中学理科，对文科不太感兴趣，每每看到政治、历史，都很排斥，造成了严重偏科，知识面很窄，每当其他人侃侃而谈的时候，我只能在旁边尴尬地笑，举这个例子，不是说为了迎合话题而刻意学习，它们本身是有用的，有趣的，仅仅因为某些因素给我们造成了不喜欢的印象，就成为绝缘体，是一种损失。\n\n再比如，我从小不喜欢吃蔬菜和某些水果，蔬菜太素，没什么味道，水果吃得一肚子水，我消化不好，不舒服。长期积累下来，我就很缺维生素和一些微量元素，嘴巴起皮，牙龈出血，口腔溃疡。\n\n拒绝“不喜欢”本身没什么不妥，但这种“拒绝”常常是感性而非理性的，人生来是一张白纸，成长的过程，需要往纸上画各种东西，需要学习各种能力，但如果没走多远，就给自己框定，这个“不喜欢”，那个“不要”，可能错过很多成长的机会。所以，适当放宽对生活的要求，接纳更多，会有意向不到的好处。\n\n## 计划\n\n我尝试过“制订”各种计划。\n\n总有人让我们定目标，定计划，还告诉我们怎么定。\n\n目标太大？小一点；目标太长？近一点；太笼统？具体一点；word文档太简陋？专门找个工具。\n\n再在墙上写点自我鼓励的话吧；\n\n一个人太孤独，找个伴；\n\n还少点形式感，添置设备。\n\n貌似成本还是太低，容易放弃，再买个付费的课程，我心疼钱，总不至于放弃。\n\n如果这些你都尝试过，那你一定很优秀、很成功咯？\n\n你可能在笑~\n\n我们做了太多准备工作，想怎么开始，却很少付诸行动。\n\n为什么？\n\n一、非做不可？\n\n不论是工作技能还是业余爱好，大都没有必须做好的理由，导致没有紧迫感，一天就能做完的事，三天也没关系，一周也没关系，一个月也没关系，不做，也没关系。\n\n二、放大条件，忽略付出\n\n认为别人能把一件事做好是有某种条件，自己没有，或者把事情想得太轻松，忽视了从小做起，慢慢积累、丰富、完善的过程。\n\n三、并非发自内心\n\n不论是学习还是减肥，或是其他，你并不真的想达成那个结果，只是觉得，做点什么才可以对自己说“我还不是太颓废”，但其实什么都没做。\n\n真正想要的人，不找借口，不纸上谈兵，只会行动。\n\n## 包容\n\n严以律已，宽以待人。\n\n什么时候我们讲包容？领导包容下属，父母包容孩子，哥哥姐姐包容弟弟妹妹，男生包容女生，等等。\n\n所谓“年少轻狂”，以前我认为自己很多特质都具备，包括包容，其实并没有。\n\n还是简单的例子：情侣。\n\n你有你的喜好，他有他的喜好，二者不同，你是否愿意参与他的喜好？\n\n同一条路，你想往南走，他想往北走，你是否愿意倾听他的原因，陪他一起走？又或者说，你是否有耐心平和地沟通、商量，到底往哪儿走是对的？\n\n他闯祸了，惹麻烦了，你是先搞清楚事情的前因后果，想处理办法，还是直接暴跳如雷，恶言相向？\n\n这些问题当中，你可能会很自然地选择“政治正确”的答案，但实际当中，如果你不懂或者做不到包容，八成会成为更激进的那个，你的“自我”会占据上风，抱怨、指责，觉得对方不可理喻，是个疯子、傻子，使矛盾进一步激化，要么闹得鸡飞狗跳，要么开始冷战，谁也不理谁，但事情的起因就是那么一点小事。\n\n为什么？\n\n一、对错\n\n“小孩才讲对错，大人只看利弊”。这句话近几年很流行，直白但不无道理，想想我们每一次的争吵，哪次不是你觉得你是对的，他觉得他是对的，然后极力试图说服对方。\n\n有客观的对错吗？有，有绝对的多错吗？没有。关键是，有时候对错并不重要，但当一件事情因为较真争对错而不欢而散，两败俱伤，对谁有好处呢？\n\n二、公平\n\n对公平的呼吁无处不在，天经地义，但落到日常相处当中，你还追求绝对的公平，就会出问题，为什么别人多拿一颗糖，你少拿一颗，为什么需要你让着她，而不是她让着你，正所谓，“针尖对麦芒”，他强硬，你也强硬，就永远无法和谐，所以，必定需要一方暂时放下立场（不表现出来）去包容另一方，而且你会发现很重要的一点，当双方没有矛盾的时候，都是温柔的，为对方着想的，只是一有问题就反目成仇，那为什么不先做点让步把问题解决掉呢？\n\n三、不满\n\n不满经常出现，特别是职场，要么跟客户有分歧，要么跟同事领导关系不好，但这些都不好爆发，否则对工作开展不利，对个人前途也不利，怎么办呢？只能忍，但也不能一直忍，需要发泄，这时候，跟自己亲近的人就倒霉了，稍好一点，是沟通，倒苦水，不好的，就是发脾气，吵架，吵得莫名其妙，因为你的不满跟他没关系，却让他承受了后果。\n\n综上所述，遇到事情，多一些冷静沉着，多一些反思调节，多一点点让步，生活会美好很多。\n\n## 学习\n\n尊重学习曲线，找到适合自己的方法。\n\n两个要素：系统，循序渐进。\n\n做到他们的前提是，你能够将学习进行下去。\n\n私以为，要顺利进行下去，宜分为以下几步：\n\n一、破冰\n\n消除陌生感，建立总体印象，知道能做什么，怎么做，激发学习兴趣。\n\n此阶段不追求记忆，也不需要深入理解，就是“囫囵吞枣”。\n\n为什么鼓励这么做，因为在学习的初始阶段，是最无知的，看哪儿哪儿不懂，如果碰到一个难点就停下来纠结半天，全部看完就需要很久，过程中，意志力或许早就消磨殆尽，容易半途而废。\n\n二、摸索、循序渐进\n\n不论一项技术看起来多复杂，多神通广大，都是由最简单的点组合连接而来，学习的时候，需要从少到多，从简到繁，从易到难地进行。\n\n至于用什么学，怎么学，别人不了解你自己，你自己也是，这就需要多尝试，摸索出一条适合自己走的路，对你有效的方法，就是好方法。\n\n三、反复\n\n此阶段强化对知识点的记忆，除了反复，没有更好的办法，如何反复，同一种教材反复研读？你能做到当然可以，做不到，就可以另找其他类似的资料来读，一般来说，知识点全都能覆盖到，还有一个好处，不同作者的解读角度、深度不同，可以得到新的启发。至于具体要怎么执行，看个人的学习能力和速度，但这个环节不可少。\n\n\n四、实践\n\n学以致用，运用是最终目的，就算把一本书一字不差地背下来，实践还是会手足无措，这也是为什么用人单位需要实际工作经验的原因。其一、你能知道同一件事情怎么做更好，其二、你能熟练解决或者避免问题。\n\n以上是我的一点感悟，不妨一试。\n\n## 竞争力\n\n\n想被重用，脱颖而出。\n\n不论你是学生还是身处职场，有一样东西对你很重要——“竞争力”，什么叫有“竞争力”，在某方面你比其他人做得要好，当需要的时候，你会被优先选择并获取更多回报。\n\n我曾经想成为那种面面俱到，什么都优秀的人，但正像读书时候没办法门门优秀一样，职场同样难以做到。\n\n这几年，我见过很多优秀的人，他们有个共同的特点，在某个细分领域表现突出。\n\n你可能会想，那应该是个很厉害的工程师，什么都会，什么问题都能解决。\n\n其实不然，请注意我的措辞：细分领域、表现突出。\n\n他们并非无所不能，就算是擅长的领域，也不是没有问题，他们和其他人一样，在不断地学习和积累，只是更专注，付出了更多，才比同行走得更远，看得更多。\n\n我们容易有个误解，觉得某件事太小，不值得自己投入，就算做了也不会被看到，体现不出价值。但就像一档节目里说的“没有好角色，只有好演员”，你能把任何一件事做得够好，都足以令人惊艳并且记住。而这件事，就将成为机会到来时你被优先选择的理由。\n\n\n## 时间\n\n“你的时间是最大的成本”。\n\n其一：你需要这样的自控力，有些东西不去看，有些事不去做。\n\n我们目光太容易被分散，微信群、公众号、新闻、微博...\n\n它们中的大多数是没有用处的，不看没关系，看了很快就忘掉。\n\n有人可能会说，我不是国家总理，我的时间不值钱。\n\n那是因为，你并没有做一些让自己的时间变得宝贵的事情，用来睡大觉的时间当然不值钱。\n\n其二：你需要同样的自控力，有些东西必须静下心、耐心去做。\n\n两者不矛盾，一个成就另一个，因为时间的总量不变，减少一些零碎无用信息流占用的时间，就能多出整块的时间去完成那些更困难的事。\n\n说到这儿，只是希望大家能减少一些无谓浪费的时间，以达成我们的小目标，并非否定娱乐，相反，我主张劳逸结合，听听歌、做点运动，陪家人聊天、逛逛街，并不浪费时间，且利于我们更好地投入到工作学习中去。\n\n## 不解释\n\n语言是苍白的，做给他看。\n\n“得道有先后，术业有专攻”，总有人走在我们前面，也总有人关注着我们没注意的领域，但可以回想一下，当你说出某些想法，想有某些行动的时候，是不是总有人出来质疑你，阻止你，告诉你那样不好，你应该这样，这时候你就会自我否定，犹豫不定。\n\n但是，他们只是喜欢告诉我们，什么事不要做，但不会告诉我们，什么时候去做什么是对的，这就是问题的关键：质疑是人的本能，他们不为我们的结果负责，行动只能靠自已。\n\n所以，不做过多解释，结果就是最好的解释。\n\n## 不侥幸\n\n总觉得自己特倒霉，你也是么。\n\n一直都是乖孩子，一次偷懒作业没写就被老师抓到罚站、写检查；\n\n从来不迟到，偶尔因故迟到，就在门口碰到主管；\n\n觉得人都是粗心大意的，自己做个细微的改动，别人不会发现，哪知别人一眼看出破绽；\n\n越着急的时候，平时就在手边的东西反而找不到了，平时走得很顺的路变得特堵。\n\n例子太多，我们总希望凡事顺利，也希望偶尔偷懒耍滑能够蒙混过关，到头来害的还是自己，需要花二倍甚至更多成本去弥补，还给别人留下了不好的印象。\n\n只有我们不心存侥幸，凡事认真对待，充分准备，才能不因小失大。\n\n## 不后悔\n\n立即行动，将来才不会后悔。\n\n我经常后悔。四年前的我，后悔五年前定的目标怎么一点都没动；两年前的我，后悔四年前选了一条相对容易走的路，看似更轻松，但时间长了就失去竞争力，更加难走；现在的我，后悔两年前怎么没有做出任何改变呢？\n\n你可能会笑我，我也笑自己。但后悔有用吗？没有，这种行为得不到任何补偿，甚至怜悯。\n\n常看到有人问“三十岁想做什么来得及吗？”、“二十岁想学什么来得及吗？”\n\n如果现在不是开始的最好时机，五年后是吗？\n\n## 下个十年\n\n随着年龄增长，时间在我们眼里过得越来越快，曾经的一天是漫长的，现在的一年转眼就过去，好像不够完成任何事。\n\n深漂六年，我选择重新开始，离开了腾讯，是的，以后不用再找我买Q币和公仔了，也不用再叫我大佬~\n\n这个决定当然不容易，心情复杂，但不失坚定。\n\n下个十年，我会有新的身份，走一条不同的路，是什么，可以期待一下。\n\n跨年之际，寥寥数语，有幸相遇，感谢阅读。","tags":["总结"],"categories":["总结"]},{"title":"JavaScript类型检测和转换","url":"/2019/10/31/js_basic_type/","content":"\nJavaScript的知识点中，类型是易忽视的，关乎细节，你可能因之犯错，但同时也可加以利用，要看熟悉程度。\n\n类型无外乎这几种—数值（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（object）。\n\n同时，object是广义的对象，它又可以包含狭义的对象、数组(array)和函数(function)。\n\n先来看”检测“。\n\n## 检测\n\n方法有三种：\n\n- typeof 运算符\n- instanceof 运算符\n- Object.prototype.toString 方法\n\n### typeof\n\ntypeof最直观，数值、字符串、布尔值分别返回number、string、boolean。\n\n    typeof 666 // \"number\"\n    typeof '666' // \"string\"\n    typeof true // \"boolean\"\n\n函数返回function。\n\nundefined返回undefined。\n\n利用这一点，typeof可以用来检查一个没有声明的变量而不报错。实际编程中通常这么使用\n\n    if (typeof v === \"undefined\") {\n      // ...\n    }\n\n对象返回object。\n\n    typeof window // \"object\"\n    typeof {} // \"object\"\n    typeof [] // \"object\"\n\n此处可印证我们前面所说的类型，数组本质上是一种特殊的对象。\n\nnull返回object。\n\n总结一下就是，**除了数组和null检测是object，其他类型原样返回**。\n\nnull的类型是object，这是历史原因造成的。JavaScript 第一版只设计了五种数据类型，没考虑null，只把它当作object的一种特殊值，后来为了兼容老版本就没改变。\n\n那么问题来了，想知道是不是数组怎么办？？\n\n### instanceof\n\ninstanceof登场了，它是作为一种java的运算符被引进的，能够弥补typeof有时无法返回确切类型的缺陷，比如：\n\n        var oStringObject = new String(\"hello world\"); \n        typeof oStringObject;//object\n        oStringObject instanceof String;// true\n\n当然，我们所提的数组它也能做到\n\n        var _array = [1,2,3];\n        typeof _array; // object\n        _array instanceof Array; //true\n    \n这是为什么呢？来看看MDN的解释：\n\n>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n\n也就是说，**它能够用于检测到原型链中任一环节的对象类型**，你应该注意到“构造函数”这个字眼，对，除了内置对象，它还可以检测自定义对象。\n\n        function Car(make, model, year) {\n            this.make = make;\n            this.model = model;\n            this.year = year;\n        }\n        var mycar = new Car(\"Honda\", \"Accord\", 1998);\n        mycar instanceof Car;    // 返回 true\n\n到此，基本应用你应该了解了，更多不再细说。\n\n### Object.prototype.toString()\n\n可以简称它`toString()`，每个对象都有一个`toString()`方法，默认情况下，`toString()` 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，`toString()` 返回 \"[object type]\"，其中 type 是对象的类型。\n\n那么怎么使用呢？\n\n        var toString = Object.prototype.toString;\n\n        toString.call(new Date); // [object Date]\n        toString.call(new String); // [object String]\n        toString.call(Math); // [object Math]\n        toString.call(undefined); // [object Undefined]\n        toString.call(null); // [object Null]\n\n为了每个对象都能通过 Object.prototype.toString() 来检测，需要以 Function.prototype.call() 或者 Function.prototype.apply() 的形式来调用，传递要检查的对象作为第一个参数。\n\n当然，既然有未被覆盖的情况，就说明可以覆盖，比如可以这样覆盖：\n\n        Object.prototype.toString = function objectToString() {\n            // 自定义\n        }\n\n至此，检测类型的方法简单介绍完了，来看转换。\n\n## 转换\n\n转换意味着变化，这个变化是运行时发生的，也是JavaScript语言的特点之一——**动态类型**。\n\n某种程度上，它因为动态类型被吐槽，可能导致数据“失控”或者bug难以定位，所以近两年TypeScript挺身而出，本文不讨论。\n\n类型转换通常体现在“**数值、字符串、布尔值**”这三种原始类型上。\n\n### 显式转换\n\n主要使用`Number()`、`String()`和`Boolean()`三个函数。\n\n- **Number()**\n\n用于转换的有这么几个来源：\n\n    数字——123\n    数字组成的字符串——“123”\n    数字和其他字符相结合——“123abc”\n    空字符——“”\n    布尔值——true、false\n    undefined\n    null\n\n相对来讲，数值是一种格式严格的类型，它不应该将本身不是数字的东西转换成数字（布尔值除外），至少目前为止，没有那个规则和机制，而且，`Number()`是整体解析，不会去拆分，所以，以上几个例子的结果如下：\n\n    123、“123”——123\n    “123abc”、undefined——NaN\n    \"\"、null、false——0\n    true——1\n\n除此之外，还有两个方法可以进行数值转换，但**只对字符串有效**，它们是`parseInt()`、`parseFloat()`，顾名思义，将字符串转换为整型或者浮点型数字，相比之下，它们的要求比`Number()`更宽松。\n\n比如：“123abc”，会转换成 123，但也是有规则的，它不会跳跃着识别，**首次碰到非数字字符后**，就停止转换，如：“123abc456”，会转换成“123”，而“abc123”则是NaN。\n\n`Number()`方法的参数是对象时，将返回NaN，除非是包含单个数值的数组，Number([3])会转换为3。\n\n- **String()**\n\n相比`Number()`稍显复杂的规则，`String()`温和了很多，因为，不论是数字、字母、其他符号还是空格，都可作为字符串的一部分。于是，有着下面这样的转换结果：\n\n    String(123) // \"123\"\n    String('abc') // \"abc\"\n    String(true) // \"true\"\n    String(undefined) // \"undefined\"\n    String(null) // \"null\"\n    String([1, 2, 3]) // \"1,2,3\"\n\n很美好，似乎一切都是原来的模样，仅仅是类型成为了字符串。\n\n当然，对象依然特殊。\n\n    String({a: 1})  // \"[object Object]\"\n\n除此之外，还有一个`toString()`方法也可用于字符串转换，只是用法不同。\n\n    var order = 100;\n    order.toString(); //\"100\"\n\n- **boolean()**\n\nBoolean()函数可以将任意类型的值转为布尔值。它的转换规则相对简单，除了以下五个值的转换结果为false，其他的值全部为true。\n\n        Boolean(undefined) // false\n        Boolean(null) // false\n        Boolean(0) // false\n        Boolean(NaN) // false\n        Boolean('') // false\n\ntrue和false这两个布尔值不会发生变化。\n\n        Boolean(true) // true\n        Boolean(false) // false\n\n对象也老实返回布尔值，但依然特殊——**所有对象，包括空对象和false对应的布尔对象new Boolean(false)，转换结果均为true**。\n\n        Boolean({}) // true\n        Boolean([]) // true\n        Boolean(new Boolean(false)) // true\n\n至此，你可以这么理解：**具备正常值（0除外）的变量类型和对象的布尔转换都是true，其他为false**。\n\n### 隐式转换\n\n隐式转换在JS代码中也是随处可见，我们可能不会写很多显示转换，隐式转换却在自动执行着。\n\n遇到以下三种情况时，JavaScript 会自动转换数据类型。\n\n- 不同类型的数据运算\n\n- 非布尔值类型求布尔值\n\n- 非数值类型使用一元运算符\n\n自动转换的规则是：**预期什么类型的值，就调用该类型的转换函数**。\n\n有点玄乎，下面具体介绍。\n\n- **自动转换为布尔值**\n\n预期为布尔值的地方，系统内部会自动调用Boolean函数将其转换，比如很常用的条件判断语句。\n\n        if ( !undefined && !null && !0 && !NaN && !'') {\n            console.log('true');\n        } // true\n\n下面两种写法也常见，它们内部调用的也是Boolean函数。\n\n        // 写法一\n        expression ? true : false\n\n        // 写法二\n        !! expression\n\n- **自动转换为字符串**\n\nJavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。\n\n字符串的自动转换，主要发生在**加法**运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。\n\n        '5' + 1 // '51'\n        '5' + true // \"5true\"\n        '5' + false // \"5false\"\n        '5' + {} // \"5[object Object]\"\n        '5' + [] // \"5\"\n        '5' + function (){} // \"5function (){}\"\n        '5' + undefined // \"5undefined\"\n        '5' + null // \"5null\"\n\n这里的加法我加粗了，即它体现的不再是数学里的“加”，而是“连接”，相信大家不陌生，不再赘述。\n\n这种自动转换很容易出错。\n\n        var obj = {\n        width: '100'\n        };\n        obj.width + 20 // \"10020\"\n\n开发者可能期望返回120，但是由于自动转换，实际上返回了一个字符10020。\n\n- **自动转换为数值**\n\nJavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用Number函数。\n除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\n\n        '5' - '2' // 3\n        '5' * '2' // 10\n        true - 1  // 0\n        false - 1 // -1\n        '1' - 1   // 0\n        '5' * []    // 0\n        false / '5' // 0\n        'abc' - 1   // NaN\n        null + 1 // 1\n        undefined + 1 // NaN\n\n上面代码中，运算符两侧都被转成了数值。\n\n注意：null转为数值时为0，而undefined转为数值时为NaN。\n\n一元运算符也会把运算子转成数值。\n\n        +'abc' // NaN\n        -'abc' // NaN\n        +true // 1\n        -false // 0\n\nPS：由于自动转换具有不确定性，且易出错，所以，如果你知道或者想要使用某种类型，就可以考虑使用Boolean、Number和String函数进行显式转换。\n\n## 总结\n\n至此，我们就絮絮叨叨地，把看似简单，实则很多细节的“类型”相关说完了，乍一看并不难理解，很多都很直观，但最“烦人”的，就是那些不易察觉，也不易记忆的东西，需要我们反复琢磨和熟悉，才能牢牢地记住，避免出错。\n\n我们很快会再见面，下一篇是什么呢，可以期待一下。","tags":["学习、javascript"],"categories":["总结"]},{"title":"巧用drop-shadow，拯救不开心","url":"/2019/10/11/drop-shadow/","content":"\n说到页面效果，阴影是很小的元素，很少被提及。\n\n当然，面试的时候，还是有人会问你：**扩展半径**和**模糊半径**。\n\n在设计师的眼里，也还是会纠结：范围太大、颜色太重之类的问题。\n\n我们简单列一下。\n\n## 最常用——box-shadow\n\nbox-shadow说来很简单。\n\n代码如下：\n\n    .box-shadow{\n      width: 50px;\n      height: 50px;\n      background: rgb(123, 199, 123);\n      border-radius: 4px;\n      box-shadow: 0 3px 10px 1px rgba(0, 0, 0, .5);\n    }\n\n效果如下：\n\n![](/img/drop-shadow/box-shadow.png)\n\n这是最常规的实现，我们可以任意修改阴影的偏移值和半径、颜色，达到我们想要的效果。\n\n但有时我们会遇到这样的效果，\n\n![](/img/drop-shadow/box-shadow-single.png)\n\n乍一看，也很普通，但你会发现，当我们按照常规写法去写阴影的时候，它会出现三种可能情况：\n\n- 偏移量很小，四边都有阴影\n- 单侧偏移较大，三边有阴影\n- 两侧偏移都达到一定值，相邻两边有阴影，对边没有\n\n好像都不是这张图的效果？它仅有一边有阴影，何解？\n\n如果你从未遇到过这种需求，可能就会打个问号，不卖关子，上关键代码：\n\n    .box-shadow-single{\n      box-shadow: 0 8px 5px -5px rgba(0, 0, 0, .7);\n    }\n\n可以看到，我们将阴影的扩展半径写成了负值。仅此而已么，它是怎么做到的呢？\n\n不妨来看看浏览器是怎么制造阴影的。我们把代码改成这样：\n\n    box-shadow: 0px 55px 0px 0px rgba(0, 0, 0, .7);\n\n盒子背后的秘密被暴露了出来，\n\n![](/img/drop-shadow/shadow-back.png)\n\n哇偶，原来它只是在我们盒子的背后绘制了一个一模一样的形状：\n\n- 改变模糊半径，它会从边缘到中心逐渐变模糊\n- 改变扩展半径，会改变它的大小\n\n看到这里，你应该明白了什么，从上图可看出，阴影的初始大小跟元素完全吻合，那么，给予它一个单边的偏移值，再给它负的扩展半径，它就能成为一个——三边都躲在元素背后，只有一边露出来的单边阴影~\n\n![](/img/drop-shadow/single-test.png)\n\n(发现长得有点像U盘，哈哈)\n\n你一定想尝试，模糊半径负值会怎样？嗯，它没了...\n\n## 次常用——text-shadow\n\n说text-shadow次常用，是因为它涉及到一定特效，常规字体一般是不需要的，什么样的效果呢？比如：\n\n![](/img/drop-shadow/text-shadow.png)\n\n这样的效果在一些活动页是少不了的，因为纯色会显得太素，视觉效果适当地丰富，能使得用户更兴奋。实现代码如下：\n\n    .textshadow{\n      color: #FFF;\n      text-shadow: 0 0 2px #000,0 0 10px gold;\n    }\n\n当然，这只是小试牛刀，不过，我们可以看出，text-shadow只有四个值供设置，分别是X、Y方向的偏移和模糊半径、色值。还反应另一点是，可以写多重阴影的效果，这就为我们创造出更多效果提供了可能。譬如：\n\n**3D**\n\n    text-shadow: 0 1px #808d93,\n       \t       -1px 0 #cdd2d5,\n       \t       -1px 2px #808d93,\n       \t       -2px 1px #cdd2d5,\n       \t       -2px 3px #808d93,\n       \t       -3px 2px #cdd2d5,\n       \t       -3px 4px #808d93,\n       \t       -4px 3px #cdd2d5,\n       \t       -4px 5px #808d93;\n\n![](/img/drop-shadow/3d-shadow.png)\n\n**火焰**\n\n    text-shadow: 0 0 20px #fefcc9,\n                 10px -10px 30px #feec85,\n                 -20px -20px 40px #ffae34,\n                 20px -30px 35px #ec760c,\n                 -20px -40px 40px #cd4606,\n                 0 -50px 65px #973716,\n                 10px -70px 70px #451b0e;\n\n![](/img/drop-shadow/huoyan-shadow.png)\n\n你可能会说，这样的场景很少，不实用。我同意，但**创意并不一定很常用，还可以体现可能性**。\n\n## drop-shadow，拯救不开心\n\n主角终于登场，怎么叫不开心？常规方法突然不适用，一筹莫展的时候。\n\n先来看一个之前分享过的效果——渐变字体。\n\n代码：\n\n      background: linear-gradient(to bottom, #f44e30 0%,#29db35 100%); \n      -webkit-background-clip:text;\n      -webkit-text-fill-color:transparent;\n\n效果：\n\n![](/img/drop-shadow/text-clip.png)\n\n这个时候，我们可能还需要给它加个投影，就像这样\n\n![](/img/drop-shadow/clip-shadow.png)\n\n你会想到什么呢？box-shadow？\n\n![](/img/drop-shadow/clip-box.png)\n\n好尴尬...\n\ntext-shadow？\n\n![](/img/drop-shadow/clip-text-shadow.png)\n\n这是刚从煤窝里爬出来吗？\n\n为什么？我们再次揭开谜底吧。\n\n将代码改一下\n\n    text-shadow: 0 10px 0px rgba(0,0,0,.9);\n\n我们看到似曾相识的一幕\n\n![](/img/drop-shadow/text-shadow-true.png)\n\n跟box-shadow类似，text-shadow在字体本身的位置上，绘制了一个一样形状的图层，只不过，这里有个层级的问题，正常情况下，阴影在字体后，而当我们把字体填充色设置为transparent，用它来裁剪背景时，阴影就盖到了背景之上，这样就得不到我们想要的效果。\n\n所以，无解？\n\n有个人不答应——drop-shadow\n\n试一下，将代码改成\n\n    filter:drop-shadow(0 6px 2px rgba(0,0,0,.9));\n\n![](/img/drop-shadow/clip-drop-shadow.png)\n\nnice！\n\n故事到这里，当然没有结束。\n\n这里的阴影如果没有实现，只能算小挫折，大不了咱不要了...（如果设计师放过你的话~）\n\n曾经的我呢，也仅仅是知道了这个方法可以解决上面的问题，并未深究，直到有一天，还是先看问题：\n\n![](/img/drop-shadow/tooltips.png)\n\n这个效果你一定做过，也不难，不过这个呢？\n\n![](/img/drop-shadow/tooltips-shadow.png)\n\n对，只是加了个阴影，但是，通过前面的内容我们知道，这个阴影肯定不能用box-shadow，它将会是这样：\n\n![](/img/drop-shadow/tooltips-boxshadow.png)\n\n甚至有看到很多开源的库都是这样写的，不知出于什么考虑。\n\n我们曾经用drop-shadow解决了上面的问题，可以故技重施吗？答案是：可以。\n\n只需要在气泡容器上加这行样式即可：\n\n    filter:drop-shadow(0 4px 2px rgba(0,0,0,.4));\n\n那么，它是怎么做到的？可以来体会一句话：\n\n>box-shadow会应用到元素矩形的边框盒子，而drop-shadow()滤镜会应用到元素透明的轮廓。应用范围包括阿尔法透明度，保持阴影与轮廓吻合，或者给通过clip-path剪切的元素添加阴影。\n\n慢慢体会，对于上面发生的一切，你可能就豁然开朗了。\n\n当然，你不要犯我犯过的错，不能点到为止，你需要明白的是，它不止能解决这个问题，而是能够应对这一类问题，适用于几乎所有不规则形状的投影，相信你会遇到的~\n\n除此之外，它还有另一个优势，大家知道，box-shadow的渲染比较耗浏览器的性能，特别是在有动画的时候，drop-shadow很好地缓解了这个问题，所以，它十分值得被你选用。\n\n那么drop-shadow是不是可以替代box-shadow呢？可惜并不能。相比box-shadow，它少了两项技能：\n\n1、扩展半径，它的效果总会是模糊的，无法绘制出box-shadow那种实线\n2、无法应用多重阴影\n\n尽管如此，它已经足够出色了不是吗？\n\n你一定还有更多技巧和创意，欢迎交流！~","tags":["CSS"],"categories":["CSS"]},{"title":"“保护自己”不总是好的选择","url":"/2019/08/25/to_try_to_do/","content":"\n\n## 做饭\n\n高中时候，有一次老爸在做饭，中途外出，时间有点长，回来的时候，锅里的东西已经溢出来流到灶台上，他一下就爆发了，说我在家怎么不看着点，都上高中了什么都不会。\n\n我听了很不舒服，想反驳，比如：\n\n- 学校不教做饭\n\n- 你也没叫我看着\n\n- 自己没做好为什么怪我\n\n但说不出口，因为他似乎是占理的，我都那么大了，是该懂一些事情，分担一些事情，起码在老爸无暇顾及的时候帮忙是应该的，归根结底还是我没学。\n\n为什么没学？**用不着我做，也做不好，干脆不学**。怕碰钉子，也没有用。\n\n所以，直到年近三十，我在老爸眼里还是不会做饭，他连择菜都没让我做过，又怎么指望我会炒？\n\n其实多少是会的，毕竟在他旁边观摩那么多年，问题又来了——**觉得自己会，跟能做好是一回事？**\n\n当然不是。我相信很多新手都经历过——没做熟、炒糊了、太咸了之类的尴尬，因为做菜讲究很多，火候、时长、素材的分量、调料的分量、加的顺序和时机，都要有个差不多，才能有理想的效果，这些东西就算照着教程都不一定做好，需要自己动手操作、试验、感受，才能慢慢练习好。\n\n## 工作\n\n网上看到一个9年经验的后台工程师发牢骚：**现在找工作真难，去某条面试，一面就挂了。**\n\n网友颇感意外：都考你什么了？考了算法。刷题没？没有。\n\n这事儿简单，但也能说明一些问题。\n\n- 9年工作经验，在很多公司都可以直接对标总监或者架构师，为什么一面就挂了？不说应该成功，但败相略难看。\n\n- 刷题，现在面试都需要刷题才能过？应试工作？\n\n我相信他在原先岗位是能胜任工作的，也不去怀疑面试官出题的策略（所谓吐槽”面试造火箭，工作拧螺丝”）。\n\n既然他们都没错，问题在哪？——**供需不对等**。\n\n每个人都有自身具备的能力范围和深度，每家公司也有自己特定的业务范围、项目类型、技术要求。有公司做人工智能，有公司做数据可视化，而你深耕多年的可能不是这些，是高并发、性能优化、组件化、模块化，甚至人才培养等。它要招的职位是你从事的，三到五年经验你也符合，但二者就是不匹配。所以很多时候我们找工作，都会收到“**职位不匹配**”的回复，即使收到“不匹配”，或者面试表现很糟糕，一问三不知，也不必气馁，没有好或者不好，只是不合适。\n\n但是，仍需要**直面自身的不足**，不然钉子就白碰了，比如上面那位9年工作经验的后台工程师，资历够老，经验也够多，但面试题没做好被淘汰也是事实。\n\n这里主要想说，任何一个人在自己的圈子里待久了，见识和成长都是有限的，需要主动求变，哪怕会有困难和挫败、落差，它依然能很好地帮助我们成长，长远看是有利的。\n\n## 总结\n\n什么是“保护自己”？——**做确定的事，做擅长的事，做成功率高的事**。\n\n从小长辈们都在教，怎样吸取经验，怎样做对自己有利。但生活的多样化和未知性是客观的，每个人的追求也不同，连喜欢吃辣和不辣、去冰和不去冰都不同，你还想别人处处替你考虑？\n\n诚然，他人的经验和建议通常是善意的，但没人比我们更了解自己和自己的工作，不论做什么选择，结果都是自己面对。\n\n借此文顺便说一件事，几年前，我做过一段时间腾讯的外包岗，后来转正，不熟的人跟我聊天，都会说“外包转正很难啊，看来你能力不错。”\n\n“**外包转正很难**”几乎成了业界共识，有不少做了几年外包的人都没转正，最终被迫另寻他处，搞得好像比社招正式都难，正是那种想法的根深蒂固，才造成有些人想都没想过。\n\n我去面试的时候，外包只做了8个月。有位前辈鼓励我：可以尝试，你又没什么损失，就算不成，也知道自己的差距在哪。于是，我一咬牙一闭眼把简历甩过去，接下来的每一步都像上战场，还好最终成功。\n\n后来我再拿自己的例子鼓励别人的时候，他们还会说“你的情况不一样”，能力不比我差，机会也不是没有，更没人拴着他，哪里不一样？\n\n**我们总习惯夸大别人的能力和运气，低估了主动尝试的勇气，我们希望自己的生活风平浪静一片和谐，不被指点，不被评判，害怕面对不足，给别人看到的都是好的一面，但这恰恰是提升自己最大的拦路虎。**\n\n保护自己远离危险是对的，但保护到自己不敢暴露不足，不能继续成长，却是极有害的。希望我们都更勇敢，加油！~","tags":["经历、思考"],"categories":["经历、思考"]},{"title":"CSS3高级属性巡礼—一半红一半绿","url":"/2019/08/23/background-clip/","content":"\nCSS3跟大家见面已经有些年头了，都很熟悉，各种高级属性随口就来，但是，如果冷不丁让你实现一个效果，可能并没那么快想出实现方案——一用就想不起来，说的是不是你？~\n\n## 字体样式\n\n我们知道，CSS中设置字体常用的属性，无非是\n\n- font-size\n- color\n- font-weight等，\n\n比如下面一段代码：\n\n        <div class=\"test-box\">\n             <h2>A</h2>\n        </div>\n\n我们把它设置为红色，只需要这样：\n\n        .test-box h2{\n                color:red;\n        }\n\n效果如下：\n\n![](/img/background_clip/A01.png)\n\n你会觉得，这简单得简直侮辱智商，那么问题来了：\n\n怎么让它一半红一半绿呢？\n\ncolor...似乎无能为力。\n\n## 打破思维的墙\n\n为了实现以上效果，我们总不能去绘制，没必要，也不能把A拆成两半，一左一右，然后分别设置color吧，你拆一个看看？\n\n但总能想到办法，就像以前模拟三角形或者牛角那样。\n\n我们来分拆：\n\n从一个颜色到另一个颜色，怎么实现？——渐变。\n一半红，一半绿呢？起点到中点是一个颜色，中点到终点是另外一个颜色即可。\n颜色解决了，文字呢？我们的主角要登场了。\n\n## background-clip\n\n废话不多说，直接亮代码：\n\n        .test-box h2{\n            display: inline-block;\n            background: linear-gradient(to right, #f44e30 0%,#f44e30 50%,#29db35 51%,#29db35 100%); \n            color: transparent; //关键\n            font-size: 20px;\n            -webkit-background-clip: text;  //关键\n        }\n\n效果如下：\n\n![](/img/background_clip/A02.png)\n\n可以看到，上面的代码里，我标了两处”关键“，是因为除了这两个地方，其他均可变，只是视觉效果不同，而这两者是必须的。\n\n看到这里，你突然觉得，也不难啊，的确不难，这个问题只是将我们思考问题的维度缩小了，以至于忘了本来可能熟悉的东西，例如，我们通常会实现这样的效果：\n\n        <div class=\"test-box\">\n             <h2>Hello world</h2>\n        </div>\n\n        .test-box h2{\n            display:inline-block;\n            font-size:40px;\n            background: linear-gradient(to bottom, #f44e30 0%,#29db35 100%); \n            -webkit-background-clip:text;\n            -webkit-text-fill-color:transparent;\n        }\n\n![](/img/background_clip/A03.png)\n\n变一种形式可能那个弯儿就转不过来了。\n\n>小tips：上面代码我都加了display:inline-block;为什么，不加不行？不是，这关乎一个细节，很多时候，如果你用一个块元素直接包裹，它会撑满整行，那么渐变的背景也会撑满整行，而文字可能只占了它的一个片段，多数情况下，都会跟想要的视觉效果有差别，故而，我们需要渐变的区域和文字区域完全重合。\n\n## 常规应用\n\n”text“这个值虽然神奇，但只能算是它带给我们的奖励，它还有三个常规的值：\n\n        background-clip: border-box|padding-box|content-box;\n\n拿一张图片举例，它们分别对应的效果如下：\n\n        .img-clip{\n                width: 80px;\n                height: 80px;\n                background: url(98.jpg);           \n                background-repeat: no-repeat;\n                background-size: cover;\n                border:10px solid rgba(207, 56, 56, 0.3);\n                padding: 20px;\n        }\n\n\n![](/img/background_clip/A04.png)\n\n![](/img/background_clip/A05.png)\n\n![](/img/background_clip/A06.png)\n\n可看出，属性值代表的意思——即背景图可以延展到的范围。\n\n## 小结\n\n关于**background-clip**就先聊到这儿，它可能远不止我们聊的这些看起来普通的应用，更重要的，是需要它们派上用场的时候，我们能够想到，祝我们好运！~\n","tags":["CSS"],"categories":["学习、总结"]},{"title":"游戏和女票，哪个更重要？","url":"/2019/08/10/game_or_gf/","content":"\n**游戏重要，还是女友重要？**——这是网上被津津乐道的话题，通常还会配一张图，一位性感美女躺在床上，一个男生却全然不顾，只知道背对着她打游戏。\n\n到底哪个重要？有些男生为什么会痴迷游戏到旁人难以理解的地步？\n\n本文试图从一个“程序员&轻度游戏玩家“的角度揭开这些疑问，如有不当之处，我也不会改的，哈哈。\n\n## 天性\n\n爱玩是人的天性，因为放松，因为开心，这方面不分男女，所以，人们把大学里的电脑比作女生的影碟机，男生的游戏机。但是，爱玩游戏的还是男生居多，特别是竞技类，需要体力和反应速度，男生比较占优，久而久之，爱玩游戏也成为很多男人的标志，被戏称“大男孩”。\n\n## 无法中断\n\n爱玩可以理解，没有不让你玩儿，但为什么不理我？\n\n“猪头，过来帮我拿条毛巾”\n\n“等一下”\n\n“猪头，下去帮我买瓶饮料”\n\n“这会儿去不了，过两分钟”\n\n“猪头，我这里被蚊子咬了你帮我擦点药”\n\n“别吵，又不会死，你等会儿”\n\n等，等，等，当女生试图打断男生正在玩的游戏，发出某种请求时，总会被拒绝，很多女生不理解：\n\n**你游戏不能停一下？**\n\n玩儿过的可能知道，现在的很多游戏都是**真人、实时对战、快节奏**，有时可能0.01秒的差距就会决定胜负，你别说让停下来，连分个神都不行啊~而且有时候是跟朋友一起玩儿，那不是坑队友嘛，所以真的不能随便停，这跟玩儿“连连看”不一样。\n\n**游戏重要还是我的事重要？**\n\n一局输了能怎样，一局不玩了又能怎样？\n\n这就关乎事情的紧迫性，你渴了让我帮忙倒杯水，如果一局游戏只需要两三分钟，等一下也不是不能接受，如果说你有突发状况，突发疾病、受伤了、触电了，那肯定是可以且必须要中断的，例子有些极端，理是这么个理哈。所以只是事情的紧急程度决定的，非要说哪个重要，绝对女友的事重要啊！（求生欲~）\n\n## 想赢\n\n玩儿就玩儿，为什么停不下来，玩儿到半夜？为什么气得骂骂咧咧的还玩儿？说好为了开心呢？\n\n其实这跟赌博一个性质，他不仅想玩儿，更想赢——“输了想赢回来，赢了想继续赢”。\n\n每个人的内心当中都是有求胜欲的，不论是工作、人生，游戏则体现得更明显，没有求胜欲的比赛就少很多乐趣，故而，他不仅想玩儿，同样很想赢，就会禁不住玩儿得停不下来。\n\n## 难以替代\n\n游戏那么惹人厌，考虑换个爱好？或许可以，但很难。\n\n比如，吃饭和睡觉能相互替代？读书和运动能相互替代？不能吧，甚至于，足球和篮球同为运动它也不能替代，故而，轻易还是不要挑战这种难度为好。\n\n## 不舍\n\n既然不能替代，干脆不玩儿了行么？也很难。\n\n每个人都会在日常生活中去寻找适合自己的放松方式，有人登山，有人健身，有人看书，而他一旦找到一款游戏的乐趣，就会习惯那种方式，并且，一个人会随着对游戏的逐渐熟悉，对游戏技能的愈加娴熟，而更加喜欢，谁不愿意做自己擅长的事呢？还有重要的一点是，玩儿了那么久，他肯定有了不少的积累和成绩，等级也好，道具也好，金币也好，让他弃游，就好比让他把攒了几个月甚至几年的钱丢了一样，肯定不舍。\n\n## 无解？\n\n人们对一件事的感受和看法，不取决于那件事好或者不好，而是在什么时候，他乐不乐意让你做。\n\n所以无需过于指责男生玩儿游戏，因为女生的一些追偶像剧、逛街购物之类的爱好，很多男生也是不理解的，会说“幼稚、闲着没事干”。双方都有自己个性的需求，你可以不委曲求全地陪伴，同样不宜去强力干涉制止。\n\n如果不想因为“游戏”这件事让大家都不开心，就可以协商好一些东西，比如：什么时候玩儿，一次玩多久等等，这样的话多数情况两人就能互不干扰，既有私人空间，又有相互陪伴的空间，皆大欢喜。\n\n## 小结\n\n暂且扯到这儿，如果你的生活当中有这些问题，而你的男友从没有跟你解释过这些东西，或者你从没有跟自己的女友解释过的话，不妨做个参考~","tags":["思考、随笔"],"categories":["总结"]},{"title":"代码能看懂为什么要跟着敲？","url":"/2019/07/27/do_better_than_anything/","content":"\n>“你不能光看，要跟着敲一遍。”\n\n这句话你肯定很熟悉，每个教编程的老师或者前辈在教新手的时候都会这么说。\n\n学编程有很多方式和途径，看文章、看文档、看书、看代码、看视频等等。选择太多，以至看不过来，眼花缭乱，不论选择哪种方式，往往都会面临一个问题，明明有些东西已经看得很熟，你问我随口就能答上来，为什么想做个东西出来的时候却没有丝毫头绪？往更深层次挖的时候脑子里也是一片空白？\n\n这就涉及到今天要讨论的话题——代码能看懂，为什么还要跟着敲？\n\n这个问题可分两方面解释：\n\n其一：学习的目的是什么？致用，要放到项目当中，放到实际产品当中，那么就一定涉及到“选型”和“实现”，用什么，怎么用，有哪些需要注意的点和最佳实践方案，这些东西跟纯粹学习记忆是两码事，知识点，概念，看再多遍，也无法自动融合成为具体的、从头到尾的实践经验。\n\n其二：用眼看，很多时候只是下意识地看懂某个点，或者从眼皮子底下过一遍，认为自己看过了，懂了，实际动手大概率会出错，哪怕那个东西很简单。\n动手，是一个从眼，到脑，到手，再到脑...这样一个反复验证、思考、推敲的过程，过程中会遇到很多问题，需要重新检查和审视，实不相瞒，本人在练习一些demo的时候就经常在莫名其妙的地方卡壳，跟预想的状况完全不同，只能一路摸索，但一旦整个流程走通了，跟随着，那些知识点就真正进入我们的脑海，零散的知识点才串了起来。\n\n简言之，“动手”就是把“知道”转化为“做到”，把“知识”转化为“能力”的过程，是必经之路，甚至可称为“捷径”。\n\n但也不是练过一两个项目就够了，每个项目的大小、复杂程度，需要用到的知识和方法都会有差别，每一项技能也都不是一条线，而是一张网，所以前辈们才鼓励大家多练，不断地去新增和连接那些点，丰富自己的知识网，逐渐地，才能算是掌握，甚至达到精通一门技术的程度。\n\n近期学习的一点感悟，分享给大家，欢迎交流。","tags":["总结、思考"],"categories":["总结、思考"]},{"title":"【写作空间】让你的文章超“凡”脱“俗”","url":"/2019/07/06/how_to_write_two/","content":"\n>好的文字让人心情愉悦，想一直读下去。\n\n即使再爱阅读的人，也不喜欢读昏昏欲睡的文字，相应的，没人拒绝有趣又有文采的文字，其乐趣不亚于任何精彩的电影或者好玩的游戏。\n\n本文开始，我们一起探索那些能让文章清新脱俗、令读者沉醉其中的秘密。\n\n## 避免口语化\n\n**想给人好印象，首先别一身泥**。\n\n很多朋友暴露最明显的一个问题就是口语化，不论是专业文章、PPT还是简历，都能看到很多随意的词句，\n\n像这样：\n\n>2010年的时候呢，我去了一家搞软件的公司，人没几个，每天也没啥事干，觉得很不爽，待久了人会废掉，就走了。第二家公司比第一家强点儿，老总人也好，很关心和栽培我，就待得久一些，学到了不少东西吧。\n\n口语化，简单说就是聊天时的说话方式。\n\n跟别人闲聊时，你不会在意多几个字、少几个字，也会掺入很多诸如：了、呢、啦、吧、嘛等语气词。\n\n如果是个人笔记、日记，不用给别人看或者审查，可以随意，但如果要拿给很多人看，有正式用途的文字，别人通过文字就能直接感受到你对待事情的态度，产生不好的影响。\n\n我相信，他们中的多数不是没有给文字润色的能力，只是不愿花心思，所以，值得引起重视。\n\n以上所述并不是剥夺你“随意”表达的权力，不是所有文章都要一板一眼，比如王小波或者贾平凹等知名作家的经典作品就经常很平实或者活泼，所以要分类型，除了小说、小品文、故事等其他很多场景下需要避免。\n\n## 营造美\n\n提到文字美，大家会想到诗词，或者一些文艺范的句子，代表性的，郭敬明那段\n\n>“习惯了一个人站在天空下,习惯了一个人在寂寞抑或是无聊的时候微微的仰起头,以四十五角仰望天空。”\n\n乍一看很有感觉，但看多了也会审美疲劳，像现在就有很多人排斥，好像文艺本身有罪。\n\n事实当然不是，不能因为一种食物太甜而否定”糖“的作用，它的优点不会被抹去，且仍是优秀作品不可或缺的一部分。\n\n文章里的”美“能做出哪些贡献？\n\n一、烘托环境和氛围，建立心理预期，比如，是阳光明媚，还是一片阴霾，是春日，还是寒冬。\n\n二、情节缓冲或转换，不论什么类型的文字，都不适合一直处在一个状态，会随着时间推移发生变化和转换，一些情境或者场景描写无疑能够很好的做到这一点。\n\n三、铺垫，文章都有从平稳到高潮的过渡，那些外在的，看似无关的描写，恰恰能起到通往高潮的铺垫作用，让读者更期待接下来发生的事。\n\n所以，不论是词汇、语句，还是场景，都需要一些“美”的过渡给文章不一样的节奏。\n\n\n## 细节\n\n说实话，现代人不喜欢细节，特别是看起来跟自己无关的东西，恨不得只花几分钟看别人整理好的笔记或听别人解读就好。\n\n我曾经也烦细节，看不了几页就看不下去，但后来逐渐体会到，**阅读就是过程**，我们不仅要那个结果，也要学会感受过程，没有开头、铺垫、发展的文章，称不上好文章，甚至不算完整的文章，而过程恰恰是由无数细节构成。\n\n体现在哪些方面呢？时间点、场景、事件发展的节点以及人物特征、性格等。\n\n即兴来一段情节铺垫（略粗糙，还请包含）：\n\n>天还没亮他就起床收拾了，更准确地说，他一夜没合眼，整个人却也精神，这天是女儿出嫁的日子，他要体面地把女儿送出去，这样的机会恐怕一生只有一次，他从衣柜的最底层翻出珍藏多年的老西服，边边角角都拉平整，对着镜子来回转，上一次他这么捯饬自己是很多年前了，可能是去找工作，也可能是第一次约会，总之，他看着自己的样子都想笑，笑自己一本正经，也因为开心。\n\n这段文字传达了以下几点：\n\n他是什么身份，今天要有什么事发生，他是怎样的人，他的情绪。\n\n让读者了解了背景，同时对接下来的情节有了期待，这就是细节的作用之一。\n\n再看一个人物描写（出自王朔《我是你爸爸》）：\n\n>那是个朴素干净学生打扮的少女，有着一张非常年轻瓷器般光洁的脸蛋和略显单薄但已发育的苗条身材。在日光灯的照耀下，她的两粒黑瞳仁点漆一般闪闪发光，但嘴唇仿佛褪了色和周围的肤色同样苍白。\n\n这段文字描写一个少女的外表特点，给读者留下特定的印象，当下文再次出现时，会马上想起前文这个女孩。\n\n再看一个场景描写（出自王朔《我是你爸爸》）：\n\n>他进学校大门时正是下午上课前，三五成群午睡初起没精打采的学生背着沉重的书包络绎不绝地从各胡同口拥出来向学校方向走。操场上空空荡荡，进校的学生都躲在楼的阴影下聊天、打闹。这是所破破烂烂的学校，所有建筑和操场上的体育设施都显了年久失修和使用过度的颓旧。篮球架上的球筐锈迹斑斑球网只剩下几缕；教学楼的玻璃自下而上都有缺损窗框也都油漆剥落露出木头的本色；只有操场旗杆上的国旗簇新完整，在弥漫着尘土的烈日下鲜艳无比。\n\n不论描写的对象和目的是什么，有了这些，就能让读者想象出大概的样子，即很多人所说的“言之有物、有血有肉”，更真实，甚至觉得跟自己生活中的某个人很像，跟自己经历的某件事很像，从而产生共鸣。\n\n好文章的每个字都经过精雕细琢，都有其用意，所以，请不要再匆匆略过那些细节，也为自己的文字增添更多必要的细节，当你学会运用它，就上到了新的台阶。\n\n## 小结\n\n每位作者都想赢得更多读者的认可，所以我们要投入更多精力和心思，对文章有更高要求，可能你觉得困难，没有头绪，但其实都差不多，作家也不是时刻都有灵感，信手拈来，一气呵成，不信你可以去看看《早晨从中午开始》，就知道《平凡的世界》的创作过程有多漫长和煎熬。所以，平时注意积累就好，多读好文章或者好书，是很好的消遣方式，顺便吸收一些知识和方法，一举两得。\n\n本文就聊到这儿，希望能帮助大家在写出好文章的路上更进一步，但这仍不是全部，我们下篇再见~","tags":["写作、思考"],"categories":["总结"]},{"title":"【写作空间】”普通人”的写作困境","url":"/2019/06/15/how_to_write_one/","content":"\n>写作很烧脑，读书很催眠，那好，我说你听。\n\n## 前言\n\n一直喜欢读书和写文，不过我也很懒，真正投入较多精力只是近两三年，看我经常写，有朋友就问我——怎样写文章？这个问题并不比“怎样挣大钱”更容易。写文章教得会吗？以前我不赞同，现在也是。\n\n不过，最近再次碰到这个问题时，我改变了看法，写文的确不适合教（因为可能矫枉过正，欠缺灵活和真实，这恰恰是好作品可贵的地方），但仍有一些东西可以分享给有困惑的朋友，帮助发现问题，找到方向。\n\n需要说明的是，这一系列文章并不是要帮谁成为作家，我自己都不是~但即使你的目的很简单，也能提供一些有价值的参考。\n\n## 表达欲≠写作天赋\n\n很多人从未想过成为一名作者，只想做个安静的读者，反正只是打发闲暇时间，何况大家都很忙。\n\n但当有一天，有人为你打开一扇门，你看到别人的日记可以成为一本书，小故事可以成为一本书，笑话可以成为一本书，知识、技巧可以成为一本书，甚至于，仅仅很多简短的词句都能“拼凑”成一本书（不信你可以去找《我的人生解答书》）。\n\n你会想，为什么我不可以？\n\n写字几乎零门槛，的确可以。\n\n开始动笔，把自己积攒几年甚至几十年的故事、心得、感想，都放诸笔端，任其流淌。\n\n可能只是一篇短文，但你对待它的态度和对它的期望绝不亚于任何一部世界名著，它像自己的孩子一样珍贵和优秀。\n\n你满心欢喜地跑去跟朋友显摆时，他们也不会吝啬赞美之词，把你夸得天花乱坠。\n\n然而，在那些陌生人或者专业人士的眼里，它只是很普通的一篇文而已，可看，可不看，也可能看上两眼，然后带着诸如：啰嗦、无趣、幼稚、肤浅、无病呻吟、老调重弹、与我无关等感受就翻过去。\n\n很残酷吧，用现在流行的说法，你只是取悦了自己，对他人毫无影响。\n\n为什么？解答这个问题，可以换个角度，你能给读者带来什么？知识、乐趣、感动？有没有人比你更值得信赖，比你写得更好？\n\n更何况，每个人都有自己的审美标准，所以不必抱怨，你自己也会做同样的选择。\n\n“**表达欲不等于写作天赋**“，这是我决定把写作当做一项长期爱好之后，看到的第一句有触动的话，不禁自问：我仅仅是想表达观点，但其实根本写不好？从那之后，便开始了漫长的探索。\n\n## 憋不出\n\n写东西对很多人来说都是苦差事——“憋不出”。\n\n不知道要写什么？不是，不识字？更不是。\n\n这种情况可归属于**内容梳理、文字组织**等方面的欠缺，算是一种能力，但远不是作家和普通人之间的差距，个人更倾向于是一种“习惯”或“意识”。\n\n那么一篇文章要从哪些方面去着手呢？至少以下几点：\n\n**核心主线**：中心是什么\n**描述角度**：怎样能讲清楚\n**结构编排**：怎样更合逻辑\n**内容详略**：一笔带过，还是详尽描述\n**词语选择**：是否用错，是否更优\n**语句流畅**：无语病，不别扭，不啰嗦，不拗口\n\n写完多读几遍，哪里还有问题？个人经验来说，总会有一些句子在写第一遍的时候是粗糙的，有些内容是多余的，错别字也难免。\n\n可能你觉得这个过程很繁琐，但任何完美的整体都是由完美的细节组成，尽管很多时候不需要追求完美。\n\n看完上面这些，如果你依然觉得写不出来，没有头绪，可能是你的储备还不够，没有足够积累，写作可以有想象的成分，但想象也需要原始素材，跟凭空捏造是两码事，所以，努力积累吧！\n\n## 拒绝流水账\n\n第一次看到”流水账“这个词的时候并不懂，以为是褒义词，相信很多人被这么评价过，最典型的应该是“日记”。像这样：\n\n>今天是晴朗的一天，早上起床吃了个包子，写了两个小时的作业，然后妈妈做了一顿很丰盛的午餐给我。吃完午餐睡了一个小时的午觉，下午跟爸爸去体育场踢球，踢得很累，也很开心。晚上妈妈又为我们准备了一桌好吃的。吃完饭聊了会儿天，八点就洗澡睡觉啦，很充实的一天！\n\n我当年经常这样写，因为贪玩，比较应付。\n\n“流水账”式的文章有个明显的特点——**按时间或者事件发生的顺序，将内容一路堆砌下来**。\n\n这种方式没有错，因为叙述本身就有时间顺序，刻意打乱反倒奇怪，但任何东西都要把握”度“，你不能一直用，一个点接着一个点，通篇都是，那样读来就显得单调又生硬，没有节奏和情感起伏可言，也没有主次区分。同样是文字，可以使用一些手法来让它更简洁和自然，或者生动、有趣。\n\n额外需要提到的一点是”合理性“，写作新手往往会以自己的真实经历去还原，事实怎样就是怎样，不掺杂一点演绎或者夸张，看似没有纰漏，但也索然无味，这也是“流水账”式文章的成因之一。\n\n我们可以把自己的文章想象成一部电影或电视剧，分场景或分角色去编排，看似不那么合理，需要读者思考前后关系或人物关系，但阅读的很大一部分乐趣就在于思考，只要大概的结构符合逻辑就好，剩下的交给读者，不同的读者可能有不同的理解，这也是艺术创作的美妙之处。\n\n## 小结\n\n这篇文是”写作空间“系列的第一篇，做个开端，对不太擅长写作的朋友的一些误区和常犯错误做个小结，当然不止这些，但限于篇幅，留到后面再跟大家分享，下篇见~","tags":["写作、思考"],"categories":["总结"]},{"title":"Window对象在前端领域的角色","url":"/2019/05/30/window_in_javascript/","content":"\n\n## 特殊的window\n\n提起window，在网页当中很常见，比如像这样：\n\n    window.onload=function(){\n    //执行函数体\n    }\n\n\n这段代码的意思是当网页内容加载完成后要做什么。\n\n在js的领域，window对象有着双重角色，既是用来访问浏览器窗口的接口，又是Global对象。\n\n也正因为此，所有全局作用域中声明的变量、函数都会变成window对象的属性和方法。\n\n比如这样：\n\n    var age = 29;\n    function sayAge(){\n        alert(this.age);\n    }\n    alert(window.age); //29\n    sayAge();         //29\n    window.sayAge();  //29\n\n\n但二者也不是完全等同，全局变量不能通过delete删除，而直接在window上定义的属性可以。\n\n## 历史遗留\n早期的网页中会使用较多的窗口和框架，在同一个窗口内展示有嵌套形式的网页，以及各种弹窗alert、confirm、prompt等，给用户输入或者确认信息，但随着网页开发技术和设计的发展，它们已经难寻踪迹，所以这里不重点说。\n\n## location对象\n\n**基本属性**\n\nlocation是最有用的BOM对象之一，它提供了当前窗口所加载文档的信息和导航功能。它的主要用途都跟url有关：\n\n- hash：返回url中#符号后面的字符，如果没有，返回空。\n- host/hostname：返回服务器名称或者端口号之类。\n- href：返回完整url\n- port：返回指定端口号\n- protocol：返回使用的协议\n- search：返回url的查询字符串，即从问号开始到末尾的所有内容\n\n**位置操作**\n\nlocation可以通过多种方式改变浏览器的位置，最常用的是assign()方法，比如：\n\n    location.assign(\"http://www.baidu.com\");\n\n\n这样就会马上打开新的url，并在浏览历史中增加一条记录，下面两行代码等效：\n\n    window.location = \"http://www.baidu.com\";\n    location.href = \"http://www.baidu.com\";\n\n最常见的是location.href。\n\n当然，修改其他属性也可以改变当前加载的页面，通过任何一种方式修改url之后，都会有一条新记录生成，用户可以通过点击后退按钮导航到前一个页面，不过，有时候我们不希望这种操作发生，可以使用replace()方法。像下面这样：\n\n    location.replace(\"http://www.baidu.com\");\n\n它只接收一个参数，即导航到的url，且不会生成记录，用户不能返回前一个页面。\n\n与位置有关的另一个方法是reload()，作用就是它的字面意思，重新加载当前页，但这里有一点点小讲究，如果仅仅是reload，不带参数，页面会从浏览器缓存中重新加载，如果强制从服务器重新加载，则需要传递参数，像这样：\n\n    location.reload(true);\n\n## history对象\n\nhistory保留着用户上网的记录，每个浏览器窗口、标签页，都有自己的history对象与特定的window对象相关联,出于安全考虑，开发人员一般无法得知用户浏览过哪些网页，但仍然有办法实现前进后退功能，方法就是go()。例如这样：\n\n    history.go(-1);\n    history.go(1);\n\n其参数不仅是数字，也可以是一个字符串，浏览器会跳到历史记录中包含该字符串的第一个位置，可以是前进，也可能是后退。比如\n\n    history.go(\"baidu.com\");\n\n另外，前进或者后退也有更直接一些的方法back()、forward()。\n\n除此之外，history还有个length属性，保存历史记录的数量，如果你想确定用户是否一开始就打开了你的页面，可以用到它。\n\n    if(history.length == 0){\n        //干你想干的事\n    }\n\nhistory对象不是特别常用，但在某些特殊用途的设计当中，还是要请它出马来搞定问题。\n\n## 总结\nwindow对象在移动互联网浪潮下的地位已经不像PC端那么重，更多涉及的是功能和检测方面，涉及交互较多，其他方面则交由功能更丰富的自定义的代码来实现了。\n\n尽管如此，window对象也不止这么简单，还有一个重要的navigator对象，但说到它内容有有点多，后续单独一篇文章跟大家分享。\n\n欢迎交流！~\n","tags":["学习、javascript"],"categories":["学习"]},{"title":"从“小白”到“精通”有多远？","url":"/2019/05/26/zero_to_god/","content":"\n>一个问题，可判断层次。\n\n很多时候我们会有一个疑问，面试的时候面试官会问什么，他问那些问题就能知道我什么水平？\n\n其实只要稍加思考，这个疑问就能解开，每个人的成长，都是以时间或者项目经验为轴线来推进的。\n\n简单、基础的问题，能答好，说明基础掌握得不错；稍难的问题，能答好，不仅能给方案，还能列出不同的方案，并分析优劣，说明经验、思考和积累还不错；偏门的问题，也能答好，说明知识面的广度足够。这三个类型的问题，就能区分出你能担多大的担子，是否符合要求，适合放在哪个位子上。\n\n举一个自己的例子：\n\n我大学刚接触网页制作的时候，在网上认识一个做培训课程的姐姐，作为一名穷学生，当然没买她的课程，但既然认识了，就时不时地聊聊天，蹭几个问题，记得我问过她这么个问题：**我看网页上有很多这样的图标，想问下是用什么技术做的呢？**示例图标如下：\n\n![](/img/zero_to_god/share.jpg)\n\n\n她很随意地说：没什么特别的，就是用CSS，和几张图片。\n\n我还不相信：就只是CSS？没有别的？\n\n...\n\n之所以这样问，两个原因：\n\n一、当时网页设计的趋势刚刚从立体转向扁平，早期的网页长什么样我是见过的，察觉到跟以前有所不同，就好奇是不是用了不同的技术。\n\n二、就我当时的知识程度，还停留在写布局、字体、背景色之类的，而且也没有做过实际项目，所以这种实际场景对我来说已经是上升了一个层次的、复杂的、神秘的东西，觉得应该会有不同。\n\n通过这个问题，和提问的出发点，就能明显看出我当时的水平在哪。\n\n同理，面试官也会去规划面试题的分布，根据答题情况，再结合当面交流，就能比较清晰地判断面试者的水平在哪。\n\n>停止探索，才是天花板。\n\n“别更新了，我学不动了！”\n\n前端领域的新事物一直在不断涌现，是技术发展所致，也是开发人员不懈追求的结果，总之，让人眼花缭乱，现在缺的不是学习资料，而是**要不要学，学到什么程度**？\n\n这就可能导致另一个问题——单项技术研究得程度不够。\n\n与之相对的是，招聘的要求却越来越高，不仅要会得多，做得多，还要深入，还要懂原理，怎么样才能达到呢？\n\n再举两个例子：\n\n第一个例子，还是我自己跟那位姐姐~\n\n当时我正在做毕业设计的网页，做到导航栏，想用列表，很自然的反应，用ul套li，写完了，它却是竖着排的，严重不符合要求，想让它横着排怎么办呢？类似这样：\n\n![](/img/zero_to_god/daohang.png)\n\n你会觉得很简单，但对于小白来说，即使手里抱着一本书，也无异于大海捞针，不能很快找到答案，就向那位姐姐求助，结果她居然没听懂我的问题（应该是没想到我问那么简单的问题），只好到别处求助，然后找到了float（浮动）的方法，一试，管用！我就找那个姐姐炫耀去了：你看，你都不知道，我这样就解决了！\n\n她又不屑地说：原来你问的是这个，没必要float啊，display:inline-block;也可以，span也可以，很多都可以。\n\n...\n\n如果你对技术都有及时跟进的话，应该知道还有很多方法，但当时的我认为那个就是对的。\n\n这个例子是想说，在我们接触一门知识的开端，了解到的东西都是零散的、片面的，可能找到一种解，就会认为它是唯一解，更不可能有空间去选择最优解。\n\n第二个例子：\n\n相信大家都看过这篇文章——[说说CSS学习中的瓶颈](https://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/comment-page-1/)，没看过的，特别是初学者，可以看看，这篇文发于2012年，那时候我还没有正式学习CSS，学了有一年左右才看到，现在阅读已经破20W，我读它的感受可以描述成这样一个过程：\n\n呵呵，不就是说那个么\n\n咦，这是什么\n\n啊，还有这个？！\n\n...\n\n从不屑，到疑问，到惊讶，突然意识到，本以为很简单的东西，变得复杂而又陌生。\n\n或许这篇文章里的内容是你已经掌握了的，但相信，在另外的知识点上你也有未知。\n\n这个小结的标题是“停止探索，才是天花板”，我们常说一个人有几年经验，这个经验也不是单用时间衡量，打个比方，有些人喜欢到处溜达，到了一个城市之后一两年就很熟悉，哪个建筑，哪个街道，哪个公园，都知道，但如果很宅，除了工作就在家周围晃悠，待个三年五年其实区别不大，对城市的熟悉度肯定比那个到处溜达的要差。\n\n## 总结\n\n这篇文想表达两个东西：\n\n- 对一项技术一无所知，和有所了解之后的区别\n- 刚学习一项技术，和有丰富经验之后的区别\n\n代表两个阶段。\n\n第一阶段，开始入门，对它的印象是怎样的，随着逐步推进，了解更加深入，是觉得很难，还是有趣，有没有继续学习或者从事的欲望。\n\n第二阶段，开始工作，觉得自己会了，但可能在深度、广度、复杂度等几个维度上都刚刚开始，很多人会列一些学习路线图，但如果不是自己亲身经历过，那些尚未涉及的领域还是没法理解。\n\n从小白到精通有多远呢？可以对照上面写的，看自己处于哪个阶段，才不至于太过保守，或者太过激进，客观看待自己，有个正确的心态，学习跟自己成长节奏相称的东西，才能有最好的效果。\n\n一起加油！老菜鸟留~","tags":["总结、思考"],"categories":["总结、思考"]},{"title":"一行代码实现多边形蒙板","url":"/2019/05/22/css_clippath/","content":"\n>每个挑战，都是突破自我的一次机遇。\n\n最近在活动中接到一个需求，如图：\n\n![](/img/css_clippath/cp01.png)\n\n\n一般情况下，这应该是个静态图（页面仔最喜欢这样轻松的工作~），but，美丽的射鸡湿却要求，右边的立方体需要有从下往上升的动画，来体现真的是往上升。\n\nemmm....来想一下，似乎团队小伙伴有弄过这么一个东东用CSS实现立体图，而且会“长大”（使用3D变形），直接拿来用吧。\n\n只是没想到，射鸡湿已经为我想好节省体力的办法，她说，这个图它是用三个层来实现的，右边的立方体本身就更长，只是位移到了下面，看不到而已。\n\n哦吼，简直不要太舒服，那我不是直接来个容器把它装进去，起始状态把它位移到下面，隐藏掉，需要动的时候加个类让它回到原位不就好了？perfect！！\n\n可是...\n\n现实总比理想骨感，它成了这个样子...\n\n![](/img/css_clippath/cp02.png)\n\nWTF!~\n\n我想当然地忽略了伟大的**盒子模型是四四方方**的，所以，这似乎预示着这种方案的失败，敢问路在何方？\n\n你的第一反应应该是SVG，当常规CSS无法搞定一些图形或者动画的时候，我们会不自觉地想到诸如Canvas，或者SVG，这么想是对的。比如这样一段代码：\n\n        <svg>\n        <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"#34538b\"  />\n        </svg>\n\n会是这样\n\n![](/img/css_clippath/cp03.png)\n\n如果加上这样一段\n\n        <svg>\n                <clipPath id=\"clipPath\">\n                        <rect x=\"0\" y=\"0\" width=\"80\" height=\"80\" />\n                </clipPath>\n                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"#34538b\"  clip-path=\"url(#clipPath)\"/>\n        </svg>\n        \n\n就成这样\n\n![](/img/css_clippath/cp04.png)\n\n对，它被一个rect（矩形）裁剪了。\n\n显然，我们需要的不是矩形，但这样一个功能告诉我们，它可以做到，只要我们把图形形状改变一下即可。\n\nSVG用<polygon>实现多边形，加上如下代码：\n\n        <clipPath id=\"clipPath\">\n        <polygon points=\"40 20, 50 40, 50 50, 20 60\"></polygon>\n        </clipPath>\n\n 就会被裁剪成这样：\n\n ![](/img/css_clippath/cp05.png)\n\n有点丑...\n\n无所谓了，这次的主角不是它，而是CSS的——**clip-path**。\n\n它看起来效果和SVG类似，但似乎更简单。\n\n回到需求\n\n![](/img/css_clippath/cp06.png)\n\n想要有这样的效果，不说上边缘，起码下边缘要是个三角形，才能做到轮廓和立方体贴合，那索性就做成六边形的轮廓，让它刚好贴合：\n\nhtml：\n\n        <div class=\"chart-wrap\">\n            <i class=\"chart\"></i>\t\t\n        </div>\n\n css：\n\n        -webkit-clip-path: polygon(50% 0%, 100% 8%, 100% 90%, 50% 100%, 0% 90%, 0% 8%);\n        clip-path: polygon(50% 0%, 100% 8%, 100% 90%, 50% 100%, 0% 90%, 0% 8%);\n\n代码中的数值是根据这个图形具体调整的，可以看出，是六个坐标点，设置完后，容器的轮廓即是这些点按照顺序相连出来的图形。\n\n如果你的图形宽度和角度不同，需要重新进行调整。\n\n这样就突破了正常盒子的局限，做到了贴合边缘的包裹。\n\n![](/img/css_clippath/cp07.png)\n\n似乎看着不明显，来张动图就好啦！\n\n![](/img/css_clippath/cp08.gif)\n\n是不是解了燃眉之急？\n\n你肯定关心它的兼容性怎样\n\n![](/img/css_clippath/cp09.png)\n\n看起来好像没那么好，但考虑到不同产品在平台上需要适配的浏览器范围（移动端为主），以及部分浏览器可加前缀进行兼容，还是可以试用的。这里只是个例，如果你想，可以把形状做成“任何”你想要的！~\n\n当然，类似这种代码，纯靠手写计算是痛苦的，推荐个工具：https://bennettfeely.com/clippy\n\n## 小结\n\n这里的多边形蒙版只是不规则图形在网页中应用的一种，也并不是刚出的新东西，但往往一个新东西出来之后我们很长时间都找不到它跟实际需求的结合点在哪里，似乎都只存在于花里胡哨的demo里，恰巧，这就是个实际的例子，当然还有很多其他图形存在的可能。\n\n网页元素的多样化，一直在反推技术不断向前发展，新属性/技能的出现，也为开发者提供了很多便利，还是要保持学习、保持思考，才能解锁更多技能~","tags":["CSS、蒙版"],"categories":["学习、总结"]},{"title":"【Canvas系列一】Canvas的绚烂起点","url":"/2019/05/01/canvas_intro/","content":"\n很多人知道canvas，但不一定都熟悉或者经常使用，作为一种专项工具，如果业务不是跟图像或者图表强相关，的确不常用，但对它的学习和了解还是必要的，这篇文章我们就一起来入个门。\n\n## Canvas是什么\n\n可以理解为，它提供了一块画布，在它所掌控的区域，可以运用各种方法绘制图形、文本，或者制作动画、处理图像，等等。\n\n通常我们能够看到一些炫酷的动画，很多都是canvas做出来的，但是需要各种元素和技巧综合使用，不是一蹴而就的，我们先从基础看起。\n\n## 搭好舞台\n\n        var canvas = document.getElementById(\"canvas\");\n        var ctx = canvas.getContext(\"2d\");\n\n        <canvas id=\"canvas\" width=\"150\" height=\"150\"></canvas>\n\n三行代码，完成舞台搭建。\n\n## 绘制的几要素\n\n**位置**：从哪里开始\n\n**路径**：图形的轨迹\n\n**轮廓**：绘制空心图形\n\n**填充**：绘制实心区域\n\n用代码来表达就是：\n\n**画笔位置**——moveTo(x, y)\n\n将画笔移动到指定的坐标x、y。\n\n**直线**——lineTo(x, y)\n\n绘制一条从当前位置到指定位置的直线。\n\n**圆弧**——arc(x, y, radius, startAngle, endAngle, anticlockwise)\n\n画一个以（x,y）为圆心、以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。\n\n**矩形**——rect(x, y, width, height)\n\n绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。\n\n几个基本的图形就是这样了，还有一种比较复杂的是贝塞尔曲线。\n\n**二次贝塞尔**——quadraticCurveTo(cp1x, cp1y, x, y)\n\n**三次贝塞尔**——bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\n\n什么是较复杂的图形呢？比如：气泡、心形，或者其他不是很常规的形状，如使用上面的方法就较难实现，贝塞尔曲线更能胜任。\n\n那其实除了这些，canvas还有两个动作要做，就是**开始**和**结束**绘制的指令，分别是：\n\n**beginPath()** 和 **closePath()**\n\n放在路径绘制的开端和末尾，就像这样：\n\n        ctx.beginPath();\n        ctx.moveTo(125,125);\n        ctx.lineTo(125,45);\n        ctx.lineTo(45,125);\n        ctx.closePath();\n\n（如果路径本身就是闭合的，可以省去closePath，但一般建议保留）\n\n完成这些之后，就可以进行下一步，绘制轮廓，或者填充区域，当然，可以两者都做：\n\n        ctx.stroke();  //轮廓\n        ctx.fill();   //填充\n\n除了这两个操作，还有其他的操作，比如设置色值、线宽、是否旋转等，后面做丰富示例时我们再一一介绍。\n\n完整示例如下：\n\n        var canvas = document.getElementById(\"canvas\");\n        var ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(125,125);\n        ctx.lineTo(125,45);\n        ctx.lineTo(45,125);\n        ctx.closePath();\n        ctx.stroke();//轮廓\n\n        ctx.beginPath();\n        ctx.arc(200, 200, 40, 0, 36, false);\n        ctx.closePath();\n        ctx.fillStyle=\"rgb(2,100,30)\";//填充颜色\n        ctx.fill();//填充\n\n![](/img/canvas_intro/canvas_01.png)\n![](/img/canvas_intro/canvas_02.png)\n\n这只是一个很简单的效果，我们也看到了路径之后其他设置项的出现，就是填充颜色，这只是其中之一，但这里暂时不详述，我们先看看，除了图形，canvas还能做什么？\n\n## 文本和图片\n\n文本很好实现，直接上代码：\n\n        ctx.font = \"48px serif\"; //字号、字体类型\n        ctx.fillText(\"Hello world\", 10, 300); // 文字内容和位置\n\n但其实文字也是有两种效果的，填充和轮廓，上面这种是填充：\n\n![](/img/canvas_intro/canvas_03.png)\n\n如果把第二行代码换成：\n\n    ctx.strokeText(\"Hello world\", 10, 50);\n\n就是轮廓了\n\n![](/img/canvas_intro/canvas_04.png)\n\n除此之外，还有一些对齐方式和文本方向的设置，先略去。\n\n来看看图片\n\n图片分为两块，处理图片和绘制图片。\n\n获取同页面内的图片不再赘述，跟通常的dom操作一样，看看创建图片的方法：\n\n        var img = new Image();   // 创建一个<img>元素\n        img.src = 'myImage.png'; // 设置图片源地址\n\n获取或者创建了图像，怎么把它绘制到canvas里去呢？\n\n**drawImage(image, x, y)**\n\n其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。\n\n比如我们可以把上面的代码写成这样：\n\n        var ctx = document.getElementById('canvas').getContext('2d');\n            var img = new Image();\n            img.onload = function(){\n            ctx.drawImage(img,0,0);\n            }\n            img.src = '/img/canvas_intro/canvas_01.png';\n\n上面这段代码，我把当前页面的三角形拿了过来，就是跟前面那个效果一样的了\n\n![](/img/canvas_intro/canvas_01.png)\n\n这里只是把图像放入我们的工作区，如果想在这个区域画别的图形亦可，代码接着往下写就好了，有时候这可以为我们节省成本，比如，稍复杂一点的图像作为背景，简单的图形作为前景画出。\n\n那其实这个方法也不止这么简单，它有两个变种\n\n**缩放**\n\n**drawImage(image, x, y, width, height)**\n\n即指定图像大小，也就是可以根据需要进行缩放。\n\n**裁切**\n\n**drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)**\n\n一长串参数看着有点头皮发麻，但就因为这样，才能让我们去操作细节，它是用来裁切图像的。\n\n前面四个用来处理图片源的剪切起始位置和大小，就跟我们平时截图一个道理，后面的参数，是将裁切后的图像，放置在画布的什么位置，以及那个区域的大小。如下所示：\n\n![](/img/canvas_intro/canvas_slice.jpg)\n\n## 小结\n\n这篇文从零开始介绍了canvas的工具箱里有哪些工具，虽然尚不完整，作为开端，已经够多，先到这，更多功能我们下篇再聊~\n\n\n","tags":["Canvas、学习"],"categories":["学习、总结"]},{"title":"长亭外，悬崖边（终）","url":"/2019/04/06/workandlife_end/","content":"\n>不必急着养老。\n\n前几天跟同事聊天，说时间过得真快，还没觉得自己年纪大呢，怎么99年的都已经出来工作了。\n\n90后早就不是小屁孩儿了，那我们呢？\n\n这种情况不会发生在20岁以下的人身上，因为他们渴望长大，每长一岁，就有一份欣喜，相比之下，曾经还嫩着的80或者85后，已经全部迈过30门槛，最大的逼近40，才知自己“鲜嫩”不再。\n\n说白了，就像一场游戏，或者一部电影，人总想在最精彩的时段多停留一会儿，甚至重温几遍，但现实只会一直往前走。\n\n那30多岁就\"老\"了？体现在哪里？\n\n一、工作热情，很多人没有了刚毕业时那份激情，不论是提升自我，还是对工作成绩的追求。\n\n二、人生态度，十几二十多岁没来得及做的事情，到了三十岁，因为年龄，因为时间消耗、家庭责任等，要么忘得一干二净，要么有所顾忌，不敢去做。\n\n都说新生牛犊不怕虎，老牛不仅会怕，而且是前有狼后有虎——你想做什么就做，别人会说你冲动、任性、不够成熟，但如果什么都不敢做，又会被禁锢住，整天在一种压抑的状态下生活。特别是，你已经到了一个很多人都认为还不错的位置，再说另寻出路，就会引来“你是不是傻？”的目光或者言论，因为多数人有着“安稳是福”、“知足常乐”、“生活本就平淡”等观点，你也会深深地怀疑自己是不是错的。\n\n但其实这个阶段离老还差得远，精力还在，气力还在，健康还在，选择和努力一把的空间也还在，与其按照多数人口中所说的，再过几年由于种种原因被迫改变，不如主动选择，几年之后，在另一个领域或者地方又已经有所积累，而不是从零开始。\n\n退一步讲，说得自私一些，谁会真实体会你的感受呢？谁能为你的选择负责呢？同事、家人、朋友？都不能，哪怕在最重要的事情上，求学、工作、婚嫁，他们也只能给出他们认为好的建议，你有什么难处，什么顾虑，你最清楚，你需要在不伤害他人的情况下，做出对自己有利的决定。\n\n>把时间“浪费”在有意义的事情上。\n\n如果问你，小时候最遗憾的事是什么？多数人会说，没有学习一项才艺或者技能。\n\n读书时的才艺“没有用处”，因为应试教育，家长和老师大都不会支持。\n\n工作之后呢，每当看到别人展示才艺，你都会惊讶而又羡慕地说：哇，他还会这个呢！这时又成了稀罕物了。\n\n当然，这只是举个例子，不是建议你现在去学才艺，而是说，每个人总有那么一些小爱好，你自己能乐在其中的，不为利益，不为显摆，只为自己做些积累。\n\n什么有意义且能积累呢？比如：读书、锻炼、旅行、写作等等。\n\n有句话说得好，世界上最廉价的也是最贵的。那么还应该有另一句话：看起来最没用的，才是最有用的。\n\n它们看起来没用，是因为多数人急于求成，或者目的性太强，抱着一种“读完一本书就能如何，锻炼两个月就能如何”的心态去做，显然看不到任何成效。\n\n凡是有价值的，都是困难的，也都是需要持之以恒的。\n\n从这点上来说，不要相信什么“快活啊，反正有大把时光”，越是上了年纪，越应该珍惜时间，去做一些有意义的事，不要等到老了又来后悔。\n\n>最残酷的不是竞争，是结果论。\n\n这要从我高中阶段说起，那时我成绩很不好，但没有自暴自弃，还想再搏一把，就跟家人表决心，只要给我多长时间，我就能把成绩提高到什么水平。得到的并不是认同、理解和支持，而是一副“行啊，看你说到能做到吗”的冰冷面孔，这其实挺出乎我意料的，家人不应该是干什么都无条件相信和支持的吗？况且还是学习，可他们没有。\n\n后来我去学校之后给家人留了一封信，意思是，别人怎么看我，怎么瞧不起我，我都能承受，但如果连家人都不信任，才是我最痛心的事。看到那封信之后，爸妈也是没想到，给我回了一封，进行了一番解释、安慰和鼓励。\n\n举这个例子是想说，不仅家庭这样，社会亦然，且更甚，不论是面试，工作任务，还是创业，别人的想法跟你是不同步的，大家的世界观和价值观也不尽相同，不会凭你一张嘴就给你提供支持，你可以赤城，可以有信仰，但别人不会理所当然地认同你，甚至会嘲笑你，不论你付出了多少，如果没有一个能够证明它的“结果”，就可能一丝声响都听不到，这才是最残酷之处。\n\n所谓孤独，大抵如此。\n\n>悬崖\n\n这一系列文章刚有点苗头的时候，我就很纠结该叫什么，本想对这几年的工作做个总结就好，后来想想不够，还有生活呢，于是洋洋洒洒写下这么多。\n\n起初我就想把它叫“悬崖”，但我又不是什么名人大家，随便写个杂记很多人看，在现在语不惊人死不休的文字潮流下，两个字的标题几乎等同“自杀”，所以就改成了现在这个有点不伦不类的名字（其实还是没多少人读），总归还是不够自信吧~如果有机会，我依然更愿意叫它“悬崖”。\n\n“悬崖”的寓意何在？你要么站在边儿上颤颤巍巍，心惊胆战，要么跳下去一了百了，投胎重新做人，要么，往后退几步，甚至退的更远，平安无事。\n\n这其实代表着我这个年龄段（或者更靠后）的一些人面对工作和生活的心理状态。\n\n往后退心有不甘，站着不动，随时有危险，往下跳吧，万一站着不动没事呢，或者往后退两步更好？\n\n比如我，面临着，大城市还是小城市的选择，大公司还是小公司的选择，坚守目前的职位还是换个职位的选择，等等，这些选择，可能让我去到一个更适合自己的地方获得新生，也可能是倒退，一夜回到解放前，到底该怎样呢？\n\n很惭愧，从第一篇文章到现在，甚至从一两年前到现在，我就在想这些问题，但依然没有想明白，想透亮，此刻的我还站在悬崖边上，吹着冷风，看着风景，我似乎在拼命地长出一对翅膀，让我不必有到底要不要跳的担忧，也似乎在静静地等待命运的宣判。\n\n不论怎样，该告一段落了，如果你愿意，可以联系我，我们继续聊，一起去寻找那些属于我们的，共同的答案。","tags":["成长、思考"],"categories":["总结"]},{"title":"深入postcss学习（一）","url":"/2019/03/27/postcss_world_one/","content":"\n关注postcss已久，要按第一次知道，是几年前的事了，但从未对其深入研究过，一直是“有你没你都挺好”的状态，但其实这样并不好，就好比，你懂js，那你学jq、angular、react这些都没用么，显然不是，总有它的长处，不能因为自己的懒学和懒用，就认为其“无用”。\n\n## postcss是什么？\n\n它是个“工具箱”，箱子里可以放入多种不同功能的工具，而这些工具可以帮助开发者提升效率、降低成本，就这样。\n\n## 它能做什么\n\n或许你所听说过的东西它都能做，比如：\n\n- autoprefixer——添加兼容代码前缀 \n- stylelint——检测语法错误\n- stylefmt——格式化\n- cssnano——压缩代码\n- postcss-sorting——整理代码\n- postcss-sprites——生成雪碧图，等等\n\n你不知道的，它也可以做到，比如：\n\n- doiuse——检测所写代码的浏览器支持情况\n- postcss-preset-env——允许你马上使用未来的css特性\n- font-magician——生成图标字体规则，等等\n\n当然，远不止这么多，会在后续逐渐深入的时候一一介绍。\n\n## 怎么用\n\n使用postcss的方法有很多，最便利的，还是结合工具，比如我们熟知的gulp、webpack等（此处以gulp为例）。\n\n如果你会用到postcss，肯定已经不是新手，多余细节我们省去。\n\n新建一个demo文件夹，比如就叫“postcss”。\n\n进入目录，初始化\n\n    npm init\n\n没有特别要求的话，一路回车下去即可，会自动生成一个package.json文件，这个文件里会描述项目的概况和一些依赖信息。\n\n随后需要安装gulp\n\n    npm install -g gulp\n\n完成后安装postcss\n\n    npm install --save-dev gulp-postcss\n\n因为使用的是gulp，所以安装的是 gulp-postcss。\n\n这些都可以用命令行来完成，如果你觉得切换编辑器和命令行比较繁琐，推荐使用 Visual Studio Code ，它可以让你在编辑器中使用命令行。\n\n到这里是否大功告成了呢？No!这仅仅是开始。\n\n## 用起来\n\n为什么说仅仅是开始，前面就提了，它只是工具箱，而非工具，没有工具，什么都做不了，所以，要往里面放工具。\n\n万事开头难，咱们拿最简单的开刀。\n\n    npm install --save-dev autoprefixer\n\n这款插件无需赘述，看名字就知道是干嘛的，安装完之后，我们只需要在gulpfile里这样配置就好：\n\n        var gulp = require('gulp');\n        var postcss = require('gulp-postcss');\n        var autoprefixer = require('autoprefixer');\n\n        gulp.task('styles',function(){\n            return gulp.src('src/*.css')\n            .pipe(postcss([ autoprefixer ]))\n            .pipe(gulp.dest('dest/'));\n        });\n\n然后我们要做的就是，新建一个文件夹，在里面放一个css文件，至于名称叫什么都行（这里是src），只要能够匹配。内容是这样：\n（尽量选择一些大概率需要兼容的代码，否则你可能看不到任何变化）\n\n        .box{\n            transform: translate(50px);\n            filter:blur(5px);\n        }\n\n完成后，在命令行里敲\n\n    gulp styles\n\n即可，如果一切顺利，会自动生成一个dest文件夹，里面有个处理后的css文件，变成了这样：\n\n        .box{\n            -webkit-transform: translate(50px);\n                    transform: translate(50px);\n            -webkit-filter:blur(5px);\n                    filter:blur(5px);\n        }\n\n当然，这里生成什么不是固定的，可以根据项目需要进行浏览器类型和版本的设置，比如兼容IE、火狐、opera等。\n\n# 小结\n\n作为系列文章的第一篇，到此就差不多了，因为其他那些插件的使用也无非是类似的过程，如果需要，下篇的开头会给出简单示例，然后就进入可能多数人并不十分熟悉的领域，那才是你更感兴趣的部分，我猜。\n\n下次见！~","tags":["学习、postcss"],"categories":["总结"]},{"title":"静态页面模块化探索","url":"/2019/03/24/static_mod_dev/","content":"\n常关注的都知道，我有个站点叫”醉牛前端“，刚发出来的时候就有人说开发方式简陋，手工维护静态页面，不便于多人协作。\n\n我就是受害者本人，所有东西都堆在一个页面当中，查看和维护都很费力，所以，可不可以分拆模块呢？\n\n工作当中我们是这样做的：\n\n    <!-- #include = \"./file.shtml\" -->\n\n但是，懂的人能看出来，这不是静态页，后缀是‘shtml’，平时我们开发也要在本地撘个apache才能正常访问，那可不可以不要服务器呢？\n\n答案是可以，不得不说程序员的伟大（除了我~）\n\n我们可以使用其他工具，比如：gulp插件。\n\n一、**gulp-content-includer**\n\n关于安装不再赘述，自行查阅很快搞定，只需要来了解，这个插件怎么使用\n\n**gulpfile**\n\n        var gulp = require('gulp');\n            var contentIncluder = require('gulp-content-includer');\n            var rename = require('gulp-rename');\n\n            gulp.task('default', function() {\n                gulp.src(\"test_src.html\")\n                    .pipe(contentIncluder({\n                        includerReg:/<!\\-\\-include\\s+\"([^\"]+)\"\\-\\->/g\n                    }))\n                    .pipe(rename('index_test.html'))\n                    .pipe(gulp.dest('./'));\n            });\n\n**test_src**\n\n        <article class=\"mainarea item\">\n            <!-- 手册 -->\n            <!--include \"./mod/handbook.html\"-->\n            <!-- 工具 -->\n            <!--include \"./mod/tools.html\"-->\n            <!-- 代码在线演示 -->\n            <!--include \"./mod/code_online.html\"-->\n        </article>\n\n**index_test**作为最终生成文件（代码过多就不贴出来了）。\n\n- 一个目标文件\n- 一个正则匹配设定include的格式\n- 一个输出文件\n\n如果你的页面要求不多，只需要这样，可以直接把这段代码拿过去用，无痛接入。\n\n项目地址：[gulp-content-includer](https://github.com/hellopao/gulp_plugin/tree/master/gulp-content-includer)\n\n当然，既是插件，肯定不止这一种选择，再看另一个。\n\n二、**gulp-file-include**\n\n**gulpfile**\n\n        var gulp = require('gulp'),\n            fileinclude = require('gulp-file-include');\n\n        gulp.task('fileinclude', function() {\n            gulp.src(['./src/*.html'])//主文件\n                .pipe(fileinclude({\n                    prefix: '@@',//变量前缀 @@include\n                    basepath: './src/_include',//引用文件路径\n                    indent:true//保留文件的缩进\n                }))\n                .pipe(gulp.dest('./dist'));//输出文件路径\n        });\n\n乍一看，差不多，但从上面的代码细节看，更易用，且供选择的功能也更多，这里没有完全列出，它还能处理导航条（选中态）、面包屑等网页常见元素的功能。\n\n贴一段导航条示例代码瞅瞅：\n\n**index**\n\n        @@include('./navbar.html',{\n            \"index\": \"active\"\n        })\n\n**navbar**\n\n        <ul class=\"navbar\">\n            <li @@if (context.index==='active' ) { class=\"active\" }>\n                <a href=\"index.html\">首页</a>\n            </li>\n            <li @@if (context.about==='active' ) { class=\"active\" }>\n                <a href=\"about.html\">关于</a>\n            </li>\n            <li @@if (context.contact==='active' ) { class=\"active\" }>\n                <a href=\"contact.html\">联系我们</a>\n            </li>\n        </ul>\n\n编译结果：\n\n        <ul class=\"navbar\">\n            <li  class=\"active\" >\n                <a href=\"index.html\">首页</a>\n            </li>\n            <li >\n                <a href=\"about.html\">关于</a>\n            </li>\n            <li >\n                <a href=\"contact.html\">联系我们</a>\n            </li>\n        </ul>\n\n以上只作为简介，更多功能可参考官方文档深入研究。\n\n项目地址：[gulp-file-include](https://www.npmjs.com/package/gulp-file-include)\n\n# 小结\n\n对于静态页面的模块化，可能多数人是不需要的，因为要么团队本身搭建有服务器，要么是个人开发的一个需要后台支持的项目，也有服务器，但知道有这么个可用的东西是有益的，需要的时候能派上用场，如果你有类似的经历和更好的解决方案，欢迎交流。","tags":["学习、模块化、gulp"],"categories":["总结"]},{"title":"长亭外，悬崖边（三）","url":"/2019/03/23/workandlife_three/","content":"\n>感受漂泊。\n\n可能源于对家乡的疲倦和对未知的好奇，初中开始，我就对外面的世界充满向往，尝试离开家，而且一次比一次远，我曾以此为傲，用现在流行的话说，“世界很大，我想去看看”。\n\n大学毕业我来到深圳，刚到深圳时给爸打了个电话报平安，挂电话的时候，爸在电话那头跟别人说了一句话：“哎，这臭小子跑深圳去了。”\n\n他不是说给我听的，但我听到了，语气里透着些许不满和无奈，跟我的兴奋和期待形成鲜明反差。\n\n他说过想让我回家待几天，好好考虑一下再决定去哪里，我没听。\n\n彼时的我，没见过的，没试过的，还太多太多，来不及感受流逝，来不及回顾过往，也不会关注家人，无法理性思考。\n\n人们最熟悉的是“北漂”，我这样的应该叫“深漂”，只是，在应接不暇的新生活面前，在陌生城市生存的压力之下，很长一段时间里，我都没觉得自己是在“漂”。\n\n托朋友关系，我刚到深圳就有了住处，但找到的工作离住处很远，不得已，刚过一个月就转租出去，换公司宿舍；住了半年，觉得公司宿舍住着不舒服，也没有足够私人空间，自己在附近又找了一处房子；几个月后，在那家公司待不下去了，出于个人发展和成长考虑，换了工作，一换不打紧，又得重新找房；本想着，新工作既能让我有很好的个人发展，又可以跟着大伙干一番事业，不曾想，不到半年就发不出工资了，一个个地离职，我也被迫另谋出路，又搬家，这一次时间稍微长了些，坚持了两年多，这里需要提一下，在我来深圳四年左右的时间里，都是住的城中村，城中村的特点就是便宜，比较有生活气息，但居住环境稍差，所以在工作稳定，也有了一些积蓄之后，我想改善一下居住条件，一咬牙，花了将近三倍的价格，租了个单身公寓，装修和家具都有，幸福感油然而生。\n\n我跟自己说，这次能舒舒服服安个家了。\n\n至此，搬家五次，按说已经很折腾，可我仍没觉得不稳定，还在计划内，但生活总不会事事都在计划内，亮堂堂的公寓住了一年之后，突然莫名地闹蚁灾，每天晚上都有无数只白蚁在房间里飞，请师傅杀了两次都没有彻底杀掉，没过两天又是老样子，没法再住下去，不得不再次搬家。那里环境其实很好，生活便利，交通发达，不想往别的地方挪，索性在附近又找了一处感觉还行的房子，大包小包拎着，来回跑了几趟就过去了。\n\n生活中的所有烦恼和担忧从来都是被动且难以抵抗的，因为工作和经济状况，那个我懒得搬了就近“凑合”住的房子，半年后又跟我说再见了，我就来到了现在住的这个房子。\n\n或许是量变导致质变，这一次搬家，让我突然有了漂泊感，就好像，每一次搬家无非就是：收拾东西，打包行李，叫辆车，累死累活忙一天。就算换了一个家，这个家，严格来说不能称为“家”，只是住处，再夸张一些，睡觉的地方，谁也说不准哪天又要搬走，再把那个过程重复一遍就是，次数多了，就会让人麻木，心态也会有变化，仿佛到哪儿都不是终点，都不会稳定下来。\n\n居无定所，为“漂泊”。\n\n>早晚都要做的事，早做打算。\n\n最近在群里跟几个朋友聊，其中一个女孩子说，自己不想那么早找男朋友，不想那么快结婚，婚后生孩子、做家务都是女人的事，太苦太累，就没有自己的时间了，所以自己不着急谈恋爱，而且女孩子完全可以自己挣钱养活自己，干嘛要找个男人。\n\n这种现象，可称为“事远不急”。\n\n她说的在某种程度上是有道理的，但忽略了一个重要的东西，她把要不要做一件事，和做了那件事会怎样，联系地太紧密，换句话说，她没有给自己准备和适应的时间。\n\n我们可以这样想：我们认识多少异性朋友？那个异性朋友是自己喜欢的吗？你要和他恋爱吗？即使恋爱了，能保证不出任何问题而分手么？从认识到恋爱，恋爱到结婚会用多久呢？如果分手了，找到下一任再去把这个过程走一遍要多久呢？这样一想事还”远“吗？\n\n我们往往习惯于把一件事想得简单，实际上可能比预想的要多花几倍甚至几十倍的时间。\n\n再举一个我自己的例子，读大学的时候，室友去驾校学车，还怂恿我们也去，我当时很不屑，开什么玩笑，还在读书学什么车，学了也没车啊，再说了，将来我是要当大老板的，有司机给我开车就好了，我还学什么？\n\n这种想法现在看来太可笑，同样是走进了把事情想简单的误区，退一万步讲，就算有理论上的可能，我混成带司机的大老板需要多长时间？后果就是，读大学时课程轻松，还便宜，还闲着没事干的时候不去学车，工作后多花几千块请假去学车。\n\n这里只举两个例子，其他还有很多，比如：买房、职业瓶颈、健康问题等。觉得没必要考虑的时候，一点都不关心，等来到面前就傻眼了。\n\n有句老话说得好：不听老人言，吃亏在眼前。\n\n经历更多的人，是更大程度上接近真相的人，我们往往会用自己的认知去判断超出了认知的事情，高估自己的能力和效率，一次次地吃亏。\n\n有些事早晚都要做，就早做打算。","tags":["成长、思考"],"categories":["总结"]},{"title":"CSS“非常规”垂直居中","url":"/2019/03/20/css_vertical_middle/","content":"\n鄙人从业五年有余，切图无数，见过一篇又一篇写“居中”的文章，已经熟视无睹。\n\n当已经习惯了CSS3的舒爽，有一天突然接到PC网站的需求，施展不开手脚的时候，发现自己脑海中并不能马上想出一个很好用的垂直居中方案。\n\n这里说的方案，当然不包括定位和margin负值之类，也不包括flex、grid、transform等，前者不够灵活，破坏正常文档流，后者略高级。\n\n\n那么该如何居中？margin或者padding？给多少合适？加了最外面的，里面还是贴着边的，还要继续撑空间。\n\n虽说这种地方不会经常动，即使代码写起来略繁琐，不是那么优雅，写完再也不会改，但如果我们有更好更强大的实现方案，为何不用呢？\n\n于是不得不找寻其他可能，结果是令人惊喜的。\n\n结构代码统一如下：\n\n        <div class=\"box\">\n            <span>垂直居中</span> \n        </div>\n\n## 方案一：table-cell\n\n日常需求中，我们乐于用line-height去做元素内文案的垂直居中，比较常见的是按钮，但时间长了就会有所顾忌，因为很多地方你不知道它什么时候就从单行文字变成了两行，其后果可能是灾难性的，所以即使不愿意用table来书写结构，也是可以使用如下代码来实现：\n\n        .box {\n        display: table;\n        }\n        .box span {\n        display: table-cell;\n        vertical-align: middle;\n        }\n\n这样不论是几行文字，都能垂直居中，而不需要去管间距问题。\n## 方案二：vertical-align\n\n        .box:before {\n        content: \"\";\n        display: inline-block;\n        vertical-align: middle;\n        height: 100%;\n        }\n\n只要这么简单的一行代码，是不是很厉害？\n\n原理就是行内元素的垂直居中，只是这里那个“元素”并不真实存在，而是用伪元素模拟出来，这是第一点，第二点就是 heigh:100%，这样就能让内容相对整个容器垂直居中，不发生上下偏移。\n\n但这种方法有个需要注意的点，单行的时候正常，变多行的时候就无法居中了，不过也不用慌，给span同时加上vertical-align: middle; 即可重新居中。\n\n## 方案三：writing-mode\n\n        .box {\n        writing-mode: tb-lr;\n        writing-mode: vertical-lr;\n        text-align: center;\n        }\n        .box span {\n        display: inline-block;\n        writing-mode: lr-tb;\n        writing-mode: horizontal-tb; \n        }\n\n这种方案一般情况下也不会使用到，不是它不够好，而是它同样改变正常文档流，将网页的行内元素从左右排列方式改成了上下，然后再把行内元素居中的方法应用其上，即可实现垂直居中，问题是需要在居中的元素里面再把方向改回来，否则文字也会从上到下排列。\n\n需要注意的一点，这里多写了两行 writing-mode:tb-lr;和 writing-mode:lr-tb;是因为下面的两个更高级的写法不支持IE8，我们找这种方法就是要兼容低版本的，所以要加上。\n\n## 方案四：absolute; margin: auto;\n\n        .box {\n            position: relative;\n        }\n        .box span {\n            position: absolute;\n            height:100px;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            margin: auto;\n        }\n\n这种方法有两个小缺陷:\n\n一、会使用绝对定位破坏文档流\n二、需要给居中元素定高（通过计算分配空间）\n\n但这种方式是具备启发性的，它会让子元素跟父元素保持所设置的距离，就是这里的left、top等值（可以不为0，同一纬度的值相等即可），如果不够，就用空隙去填充，使用 margin:auto; 让填充空间在元素的上下和左右进行均分，以达到居中的效果。\n\n这个作为最后一点列出来，在某些适用场景下可以选用，但不作为优先考虑。\n\n以上方案主要讨论的是垂直方向的居中，水平方向代码并未贴出，大家可以根据需要自行设置宽度。\n\n## 总结\n这篇文提到的知识点都稍显老旧，但需要派上用场时候还是很实用的，大家在积极学习和探索新知识的同时，不宜把旧知识丢掉呀~\n\n如果正在读这篇文章的、机智的你还有其他好方法，欢迎不吝赐教！~","tags":["CSS"],"categories":["总结"]},{"title":"醉牛前端重新起航！","url":"/2019/03/17/f2er_club_newlife/","content":"\n>不是新版，胜似新版\n\n几个月前，我写过一篇文，叫《醉牛前端新版前瞻》，但不巧的是，没过多久站点就无法访问了，旧版都看不了，何谈新版，很尴尬。\n\n但让人兴奋（至少是我）的是，2019年3月14号，白色情人节，经历了一番波折之后，终于恢复了访问，但切记哦，电脑端使用更佳，这个链接https://f2er.club 一个字母都不能错。\n\n为什么说不是新版胜似新版？\n\n以前做这个站点的时候，是想着东西越多越好，就像考试的时候往考卷上写越多答案越好，但其实并不是，要是写得不对，写得不好，再多也是占用空间，浪费笔墨，而大家的时间都很宝贵，所以，此次更新，做了三件事：\n\n1、**重中之重——删除无效链接**\n\n整理过程中，发现互联网世界里，想保持一件事情的稳定真的很难，很多站点都无法访问，或者变成了别的东西，作者不再维护，略微遗憾，但也印证了那句话，好的东西，必须经过时间的考验，虽然如此，相信还会有新的更好的东西被后来者制造出来。\n\n2、**体验最优化，并删除同类**\n\n不论是工具类，还是代码库，都有很多人尝试着去做过，甚至是个人博客，建立之初，作者都是抱着好的出发点，但种种原因，其中必有优劣之分，在这个信息爆炸的时代，我们需要的并不是扑面而来的海量信息，而是有限的优质信息，才不致迷茫，目标清晰，所以，删除体验不佳的同类，只保留较好的资源。\n\n3、**老旧/过时的库/项目进行删除**\n\n随着时间推移，有些技术趋于过时，有些代码库或者最佳实践，编码规范也趋于老旧，对当今的开发者或许已不再适用，也或者早已有更新、体验更好的东西存在，那么找到它们的意义就没有那么大了，遂忍痛割爱。\n\n>未来规划和努力方向\n\n**UI**\n\n\"醉牛前端\"快四岁了，从刚开始到现在，UI和交互层面都没有怎么变过，这归咎于我的懒惰，需要检讨。近期会进行一次优化（内容切换动画已经有所调整）。\n\n**分类**\n\n重新查看的过程中，发现了一些种类还可以再细分，有些东西放的类别不是最合适的，后续会逐个进行调整。\n\n**审核**\n\n刚开始弄这个站点，是一种饥不择食的心态，看到自己觉得还不错，有用的东西，就放到了上面，也让用户打开之后一看，觉得“哇，好丰富”。但其实现在看来，有些是不适合的，时间长了会明白一个道理，东西不在多，更在质优，故而，之后会把重心放在提升体验上，相应的，会提高收录的门槛，你问有多高？相当高~\n\n另外，也会在发现新的、更好的资源时，替换原有不够好的，保持流动性和新鲜度，所以你可能会发现之前有的很多站点现在没有了，博客和社区版块移除了很多，不要介意，我需要对为数不多的用户负责，更需要为自己的劳动负责，感谢理解和支持。\n\n>将来的将来\n\n当年第一版大火的时候，就有人很直接地指出，你这个站点没有看到任何构建和编译的东西，纯静态，实现方式也太low了，维护起来太难了吧？\n\n这个问题，我不要面子的吗？我不知道累吗？好，这就是比内容层面更大头的，将来的优化方向——整站重构，任重道远。\n\n## 总结\n\n不管怎样，站点重获新生还是值得庆祝的，我会努力持续提升它的体验，给有缘相遇的朋友一点点帮助，欢迎常来~\n","tags":["思考"],"categories":["总结"]},{"title":"长亭外，悬崖边（二）","url":"/2019/03/12/workandlife_two/","content":"\n>人为什么非得有目标？\n\n新一年到来的时候，很多人在做个人总结和未来规划，我也一样，而且尝试过各种形式。\n\n最初用文档，有人说，太简陋，认真点，用表格，又有人说思维导图更好用。\n\n最初简单定几个大目标，有人说太笼统，不好执行，也不好自我验收，那就细致到月，每月做什么事，做多少。\n\n后来发现都是徒劳，**如果没有足够诱惑力、压迫力或者成就激励，不论怎样形式或内容的计划都是难以完成的**。\n\n更让人沮丧的一点是，通常我们的目标不是一步到达的，需要逐级完成，先完成A，再完成B，最后才足以完成C，如果连A都完成不了，就永远到不了C。随着时间的推移，我们的信心和干劲又有着衰退的趋势，就更难完成。\n\n14年初，我第一次换工作，同时深刻认识到自身的不足，就给自己立了个flag，一年之内成为“全才”——“设计、前端、后台”通通学会，跟别人谈起的时候，都说“好厉害！”。\n\n四年过去，仍遥遥无期......再漂亮的计划，那也只是计划，完不成就是在吹牛。\n\n直到今天，每当看到有人站在高大上的演讲台上侃侃而谈，有人做出优秀的作品被众人学习，我不会再找理由来安慰自己，他们是真的优秀，我也会真的羡慕，并且问自己“你以前干嘛呢？”。\n\n人为什么非得有目标？\n\n春节假期快结束的时候，跟家人一起聊了职业规划的问题，引起我新的思考，让我重新思考的，不是规划本身，而是为什么规划。\n\n读书时我们以考大学为目标，等到拼光了子弹考上大学，发现大学依然需要学习；大学毕业，找工作有门槛，也要学习；走上工作岗位，要做个合格甚至优秀的员工，继续学习；到了一定工龄，思考之后的路，要么做管理，要么转型、转行，还是要学习。\n\n我们正在或者将要去做很多不同的事，而没有什么事是不需要准备的。**我们需要不断成长，就需要一个个更高的目标来指引方向**。\n\n> 忙碌和收获天生一对。\n\n偶像剧里经常出现一种场景，主人公三下五除二就搞定了一件别人搞不定的事，还显得很轻松，长得好看还厉害。\n\n我们希望成为那样的人，给别人看到最好的一面，貌似没怎么辛苦，但其实现实生活中，能把一件事做到优秀的人，往往付出非常多，都是点滴努力积累出来的。\n\n不说太远，举几个业内有代表性的（排名不分先后）\n\n张鑫旭——长年醉心于技术，数年如一日地高产，博客从开始到现在我都觉得丑，至少和他擅长写UI代码的身份很不相符，但人家足够勤奋，研究精神也让人钦佩，知名度很广。\n\n大漠——W3cplus站长，也是一个热爱学习、研究和传播技术的人，网站文章也很高产，很多开发者都看他的网站学习。\n\n情封——一个人的力量打造出前端公众号的顶级品牌——“前端早读课”，每天早上发文，数载不间断，多数人还在睡梦中的时候，他就把文章发了出来，成为数以万计开发者每日必读。\n\n（其他当然还有，不列举那么多了）\n\n他们在不同地点，不同岗位，做着不同的事情，但他们有一个共同点就是勤奋，勤奋意味着忙碌，忙碌就会有相应的收获。\n\n>遇到困难再谈抗压能力。\n\n刚踏入职场的时候，每次看到招聘信息里有“需要具备一定抗压能力”，都会觉得很抽象，要那个干什么呢？同时默认自己肯定没问题，谁会说自己能力差呢？\n\n后来，这个抗压能力逐渐被解读为“经常加班”，虽然二者不对等，也是有这种情况存在。那么应该怎样看待这个能力的体现。\n\n可以分这么几点：**时间管理、项目管理、情绪管理**。\n\n- 艰巨的任务\n- 紧急的需求\n- 超出常规工作量的加班\n- 排查和解决项目问题\n\n上述情况，可以单独存在，也可能同时存在，正所谓，无“压”不言“抗”，你能否调配好自己的时间和精力，以积极的心态去面对，能否平衡工作和生活，这才是体现抗压能力的地方。\n\n>要高效，不要粗糙。\n\n我们总会提到“效率”，能高效完成一件事，总是令人欣赏的，我们会向别人请教方法，会找寻工具，会想各种办法降低人工成本，避免重复成本，等等，都是为了做事更聪明一些，用最短的时间完成尽可能多的事。\n\n但其实容易忽略的一点是，有时候看似我们做得快，却经不住考验。\n\n简单谈三点：**事前准备，长远眼光，重新审查**。\n\n新手容易犯第一个错，因为还停留在“不会”的层面，不知道需要准备什么。\n\n脱离新手阶段之后，会做了，又容易犯第二个错，因为经验不足，很多场景或者情况不能够去预判。\n\n第三点适用所有人，只是轻重不同，我们是做完事就直接往下走，还是需要再检查一下哪里有疏漏？哪里不够好？随着经验的增加，你需要检查的会慢慢减少，因为已经在前面两个环节完成，但不代表没有，**自以为没有问题，才是真正的问题**。\n\n很多时候，我们看似高效地完成一件事，但因为忽略了以上三点的某一点甚至全部，导致反复地调整、修改，甚至推翻重来，算下来就可能花了两倍甚至更长时间，正应了那句老话——欲速则不达。","tags":["成长、思考"],"categories":["总结"]},{"title":"纵观JS对象的“简”与“繁”（下）","url":"/2019/03/02/object_deepsee_two/","content":"\n上篇文的最后，我们聊到了JS对象的一个重磅成员——**原型模式**，本以为迎来了对象领域的终极大boss，却发现它仍然存在局限性，这种局限就是：\n\n**不需要共享的也会被共享，导致出现期望之外的结果**。\n\n什么不需要共享？比如，如果我们这样操作：\n\n    function Person(){\n    }\n    \n    Person.prototype.friends=[\"1\",\"2\",\"3\",\"4\"];\n\n    var person1 = new Person();\n    var person2 = new Person();\n\n    person1.friends.push(\"5\");\n\n    alert(person1.friends);\n    alert(person2.friends);`\n\n会输出什么？你应该猜对了，两个都是\n\n    1,2,3,4,5\n\nperson2需要friends么，不一定，他需要push进来一个新的“5”吗？也不一定，那么在完全被动的情况下，因为我们把friends定义在了原型里，且由于person1对其进行了操作，就同时影响到了person2，显然，这是不合适的。\n\n怎么破？\n\n当我们进行了代码的简化，作用域的优化之后，似乎仍有进一步改善的空间。要么是纯粹的私有，要么是纯粹的共享，有中和的方式吗？\n\n## 构造函数和原型组合模式\n看到这里，你脑海中是否闪过一个念头——“我早该想到的！”。\n\n没错，既然他们一个那么自私，一个那么大方，把它们结合起来不就有所平衡了么？\n\n看代码：\n\n    function Person(name,age,job){\n        this.name = name;\n        this.age = age;\n        this.job = job;\n        this.friends = [\"lili\",\"lucy\"];\n    }\n    Person.prototype = {\n        constructor : Person;\n        sayName : function(){\n            alert(this.name);\n        }\n    }\n\n这段代码，既让每个实例都有自己的一份属性副本，同时又共享着对方法的引用，是现在使用最广泛的方式，最大限度地节省了内存。\n\n其实这里，相比具体的方案，我们更应该重视一个思路，就是“组合”，我们常常面临方案的选择，选A，或者B，或者C，多数情况下，每种方案都有其优点和局限性，而组合使用不失为一种“两全”之策。\n\nbut，虽然功能上它是兼备的，并不能说它是完美的。\n\n回想一下，前面我们看到过的，直接创建对象也好，对象字面量也好，或者构造函数、原型模式，我们都倾向于去使其具有封装性，而这里它们却是相互独立的，能否将其封装起来呢？\n\n## 动态原型模式\n\n所谓动态原型，似乎不太好理解，不论是书籍还是网上能够查到的文章，大都简单罗列，而没有解释得很清楚，我反复看过一些代码和短文，下面是我的理解。\n\n其实这个模式是在“构造函数和原型模式”的基础上做了两个方面的改良，看代码：\n\n    function Person(name,age,job){\n        this.name = name;\n        this.age = age;\n        this.job = job;\n        if(typeof this.sayName != \"function\"){\n            Person.prototype.sayName = function(){\n                alert(this.name);\n            }\n        }\n    }\n\n一、封装，sayName没有单独放在函数的外部，而是内部。\n\n二、创造私有实例的时候，去判断某个需要的共有方法是否已经存在，因为你可能已经在别的地方创建过了，而这种共有的方法只需要创建一次即可，如果有，忽略此段，没有，则对其初始化，避免时间和空间的浪费，动态体现在这里，从用意上来看，应该是一种预判，并不是共享方法这样写有什么好处。\n\n需要注意的一点是：在这种模式下，不宜使用字面量重写原型，因为在已经创建了实例的情况下重写原型会切断现有实例和原型之间的联系。\n\n到了这里，有关对象的高潮似乎已经过去，其实除此之外，还有两个“小”角色值得我们关注：\n\n## 寄生构造函数模式\n\n《高程》上说，在前面几种模式都不适用的情况下，使用这个模式，我觉得这么说有点不负责任，这样说等于没交代它的使用场景，有敷衍之嫌，不知道是原文的问题还是翻译的问题，或者是篇幅所限，暂且不管。\n\n不妨顾名思义，分拆来看：\n\n寄生：对某个东西有所依托\n\n构造函数：用起来像构造函数\n\n上代码：\n\n    function Person(name,age,job){\n        var o = new Object();\n        o.name = name;\n        o.age = age;\n        o.job = job;\n        o.sayName = function(){\n            alert(this.name);\n        }\n        return o;\n    }\n\n    var friends = new Person(\"alien\",29,\"teacher\");\n    friends.sayName();\n\n你没看错，我也没写错，这里，除了创建实例的时候用了new操作符之外，它和工厂模式一模一样...\n\n它看起来是个函数，但这个函数只起到封装作用，执行的结果是将在其中创建的对象给返回出来。\n\n这种模式（就目前研究）主要是可以用来给一些内置构造函数增加新的方法，大家都知道，构造函数的属性和方法是可以改的，但直接改原生方法是不推荐的，那么寄生模式就派上用场，比如这样：\n\n    function SpecialArray(){\n        var values = new Array();\n            values.push.apply(values, arguments);\n            values.toPipedString = function(){\n                return this.join(\"|\");\n            }\n            return values;\n    }\n    var a = new SpecialArray(2,6,8,9,4);\n    document.write(a.toPipedString());\n\n上面这段代码输出的值将会是：\n\n    2|6|8|9|4\n\n而正常情况下，都会输出\n\n    2,6,8,9,4\n\n也就是说，根据个性化需要改变了数组的输出方式。\n\n上面提过，“寄生”是一种依存关系，它是给已经存在的东西添加“功能”。\n\n这么说你应该已经有大概的理解了，但到这一步我并不是很满意，感觉还可以挖掘出更多东西，如果你看到这篇文章，并且有不同的意见或者看法，欢迎交流。\n\n## 稳妥构造函数模式\n\n稳妥，听起来就很保守，也意味着安全。\n\n先看代码：\n\n    function Person(name,age,job){\n        // 创建要返回的对象\n        var o = new object();\n        //私有变量和方法\n        \n        //添加方法\n        o.sayName = function(){\n            alert(name);\n        }\n        //返回\n        return o;\n    }\n\n稳妥构造函数的两个特点：\n\n1、没有公共属性\n\n2、方法不引用this的对象\n\n这种模式是在某些禁用了this和new的环境下可使用的。\n\n最后这两种模式，使用的场景较少，知道就好，重点还是前面那些方法的练习和运用。\n\n# 总结\n\n写这两篇文章，是因为“对象”这个东西一直都像是难啃的骨头，但其实任何显得复杂或者困难的东西，都是从简单慢慢演变而来的，如果循序渐进地加入一些有血有肉的思考，就能更容易地对其进行理解和记忆。\n\n写文过程中，我尽量做到不生搬概念，加入个人的思考过程，但认知有限，不足在所难免，还望读者朋友不吝赐教。\n\n后面还会继续跟大家一起啃硬骨头，下次见！","tags":["学习、javascript"],"categories":["总结"]},{"title":"作为一名技工，是什么让我陷入“学不动”的境地？","url":"/2019/03/01/hard_study_thinking/","content":"\n最近有位前辈问我，你现在的瓶颈在哪里？\n\n我本想说一些高层次的东西，以显得我没白混，但实际上我想不出来，干脆实话实说，我的瓶颈就是技术菜。\n\n你可能觉得是玩笑，但这是真的，我自己也不想承认，按理说，我身在大公司，又工作了好几年，于情于理，都不应该“菜”。\n\n没错，我当然想学习和掌握更多技能，不管你说什么我都听得懂，不管什么文章我都看得懂，还能评头论足，但现在却是相反，很多东西我还停留在“知道”和“了解”层面。\n\n更为尴尬的是，据我说知，很多同行都这样，那么就算是某一部分人的通病。\n\n为什么？不努力？不，我们买过很多书，看过很多网站或者视频教程，也玩过一些demo，但到头来，你让我做出个像样的东西，sorry，你问我技术原理，sorry，你让我解释XXX怎么实现，还是sorry...\n\nwhy？举个小例子，就能寻到一些问题的蛛丝马迹。\n\n我曾经半开玩笑地跟一个自认为技术过硬的同事说：嗨，你当我师傅，教我技术怎样？（遇到自己不想克服的困难的时候，我们本能地有这样的举动，希望有人手把手，一步步地教）\n\n他：这要怎么教，自己看书敲代码啊。\n\n我：我该从哪开始，什么方法比较好呢？\n\n他：先写点有意思的东西，比如，写个贪吃蛇。\n\n我没说话，但我的内心独白是：写小游戏？那么low？能用到什么厉害的技术？项目中用得到？\n\n我才不愿出力不讨好。\n\n于是，我又抱着那些所谓经典书籍啃，我宁愿相信大家都说好的东西，也不去做一件看不到结果的事。\n\n结果就是，着实难啃......那些字，那些符号，看一次，忘一次，它们就像从我眼皮子底下飘一趟过去，难理解，又枯燥，很久都读不完。\n\n讲真，编程是一项极重实践的门类，它不是政治历史，背得好，记得住，就能答题拿高分。\n\n所以，这里需要明白一个问题：\n\n通常我们认为学习应该是这样的，先把一个概念搞懂了，再去做跟这个概念相关的东西就应该没问题，或者先把一整套东西都弄懂了，再去做什么都没问题。\n\n一句话概括就是：先理论，后实践。通俗一点说，就是“先动脑，后动手”。\n\n看似很合理，但其实学习从来不是一条直线从起点走到终点的，也没有明显的先后顺序，而是曲折向前的。\n\n常有人说，要对一门知识或者技术有系统性认识和掌握，这在一定程度上是对学习方法的一种误导，刚开始学习的时候，不能抱着“这样学习够不够系统”的想法，知识本身是成体系的，但实际需求和学习的过程是零散的，我们应该边学习，边实践，遇到问题再学习，然后结合着去理解，所以，正确的路线是——学习、实践、查漏补缺。在我们把这个漏快补完了之后，将所学和实践得来的感悟，都串起来，自然而然就达到了“系统”。\n\n做技术这行，注定要面对不断推陈出新，相应地，学习也是必然的，每个人前进的路上都会有一些血泪史，以上这些，算是我自己的一点教训，希望能帮助大家找到共同的问题点，一起努力进步！~","tags":["成长、思考"],"categories":["总结"]},{"title":"长亭外，悬崖边（一）","url":"/2019/02/20/workandlife_one/","content":"\n这是一系列对我这几年生活和工作的总结，本想写简单点，但一动笔就收不住，以我一贯认真且高要求的作风，也为了让大家读着没那么累，分成两到三篇，此为第一篇。\n\n正文开始：\n\n>人身上有一种现象，从无知到有知，然后是各种基于“已知”的设想。\n\n2018年，是我工作的第五个年头，刚读大一时，觉得毕业是件太遥远的事，当时有同学跟高年级的聊天，回来跟我们分享，有一句话我印象深刻——“大学里，除了大一，就是大四”。意思是，只要过了大一那股子青涩和新鲜劲儿，往后都差不多。刚听到时我是不屑的，毕竟我曾憧憬过自己赶超名牌大学毕业生的大学生涯，努力奋斗，金光闪闪，后来...\n\n其实工作之后的经历也类似，刚开始各种学习、请教、写文章、加群、逛社区、交朋友，时间长了就“佛系”了，群里常年“潜水”，博客长草，朋友在通讯录里“冬眠”......人性使然吧，这也是为什么多数人都是普通人的原因，能持之以恒的，都成了真正的“大神”。\n\n于是，在那些过一天算一天的日子里，我把自己觉得该干不该干的事都干了，学业一塌糊涂。\n\n一晃五年过去，我的生活、感情、事业，都有一定变化，而且跟想象的都不一样，不论大事小事，做过很多或主动或被动的选择，我就像个探索者，摸着往前走，当那些事情接二连三发生的时候，有时会诧异，有时会慌乱， 有时会兴奋，有时会恍惚，有时会迷茫，有时会遗憾，但最终，我都抱着一种“人生经历”的态度去看待，哪怕走得乱七八糟，哪怕跟我最初想的有天壤之别，也当做丰富多彩。\n\n有一句名言—“世界上只有一种英雄主义，就是在认清生活真相之后依然热爱它”。\n\n当你10岁时想长到180，20岁还不到170；10岁时想考清华，16岁就辍学。诸如此类，**如果每一个设想，每一次努力，都没能得到预想中的结果，我们还能积极地去面对未来，才算领悟了些许人生真谛**，也更能接受一个普普通通的自己。\n\n>初心很好，坚持很难。\n\n大到企业，小到个人，都有自己的初心，而且总爱说，因为它是美好的，我们需要用它激励自己。\n\n我从小到大有两次打鸡血的时期。\n\n一个是高中时期，想转学，但对方因为我成绩太差看不上，组好的饭局直接散了，打击特别大，最后爸妈好不容易找到一个肯收留我的学校，让我能继续上学，自那之后的半年我特别刻苦，不知疲倦，夜里12点多睡觉，早上5点闹钟，一秒钟都不懒床地蹦起来，白天也不休息，周末把自己关在屋子里，对着窗户看书做题，晚上天黑了，台灯打开继续，成绩也随之飞速进步。\n\n一个是刚毕业出来工作的时候，零经验，二本院校，没有实习经验，几个劣势在身，又面临生存压力，能找到工作就是幸运，所以刚工作的时候我又进入亢奋状态，要快速进步，要做得好，让同事和领导都认可，所以那一年脱胎换骨。\n\n这段聊的是初心，初心代表清晰的目标和高要求，代表追求一个方向的决心和毅力。\n\n我的初心是成为一名优秀的前端工程师，进入顶尖的企业，那个时候这些东西在我心中是遥远的，高贵的，殿堂般存在，于是我的生活都是它。\n\n上面两个例子的用意是什么呢？就是因为保持初心是很难的，前面那两个阶段，看似我进入了一种绝佳状态，没有什么是克服不了，战胜不了的，但最久的也就是一年，一年过后就止步不前，得过且过，需要学的懒得学，有困难就想逃避。\n\n这种状态无疑很危险，就像第一段说的，不管你是否有激情，这世上从来不缺少有激情的人，这会儿你比较努力，你上去了，当你懈怠了，自满了，懒惰了，后面比你努力的人马上就超过去，只是多数时候你感觉不到。\n\n>好奇是一种兴奋剂，要用好它，而不是因之迷失。\n\n上面聊初心，其实好奇心算初心里的一种，两者相交，但不包含。\n\n我们最初学习技能，选择工作，都是好奇驱使，感兴趣，觉得自己愿意做才做，比如我以前选择前端开发，纯粹是喜欢，因为那时候还没这个职位，不像后来有朋友再跟我打听：“前端好学吗？是不是工资很高？”，和这种是不同的。\n\n纯粹的好奇心是好事，但另外一些好奇心就有可能带来不利影响，比如：打游戏、刷微博、朋友圈、新闻，或者想尝试很多东西。\n\n前面几点很好理解，老生常谈了，玩物丧志，荒废光阴，最后一个也不利吗？是的，很多时候，这是我们不易察觉或者不想承认的。\n\n做好一件事至少需要两个因素，目标和时间。\n\n通常，我们会以半年或者一年为一个周期来给自己制定目标，觉得差不多够了，但事实上，我们的精力真的不如自己想象那么多，执行力也没那么好，同时我们很擅长打发时间，在有限的时间里，我们能不能抽出足够时间去做好一件事？保持下去，再去做好另一件？这是很难的。\n\n同样，好奇心太重意味着不能够把精力集中，不能专注。“猴子掰玉米”的故事每天都在发生，刚想看会儿书，想起是不是上网查个资料更好一些，打开电脑，瞟了一眼，看到一个感兴趣的新闻，索性点一下看看，看完新闻，顺便打开音乐播放器听听歌吧，正听着歌呢，手机响了，有人来信息了，看看，回完信息，又看到有人更新朋友圈动态了，或者有公众号更新文章了，看一眼吧，万一是自己想看的呢？看完把手机一放，回头看着电脑……呃，我刚才开电脑要干什么来着？\n\n这看着像个段子，但我们的时间有时就是被这样占用了，如果拿这些时间去做我们本该做的事，是完全足够的，不多说，你有尝试过每天抽整整一个小时时间来做一件事，一个月之后有多少收获吗？相信多数人没有。\n\n不论是作为职业，还是业余爱好，都是需要经常性地，连续性地去做，才有可能把它做好，但通常都做不到，也安排不好轻重缓急，这样就可能出现，几件事全都是半吊子工程，几年下来，感觉自己做了很多事，但没有一件能拿得出手，这时候你可能又会去羡慕那些，看起来没那么贪心，还默默无闻，但能把一件事做得很好，获得大家认可的人。自己本以为的精明，最后成了糊涂。\n\n所以，掌控自己的时间和精力，尤为重要。","tags":["成长、思考"],"categories":["总结"]},{"title":"纵观JS对象的“简”与“繁”（上）","url":"/2019/01/22/object_deepsee_one/","content":"\nJS这门语言，曾被不少开发者视为玩乐的语言，没有厚度和技术含量的语言，但发展到现在，想必没有人敢再这么说，它能做的事越来越多，所以，这门语言看似知识结构简单，但却在代码的行与行之间藏着很多细节和玄机。\n\n“对象”在JS中是个很有意思的东西，它随处可见，说简单可以很简单，但也可以复杂到让人头皮发麻。\n\n# 简单\n如何简单？\n\n    var person = new Object();\n\n这样就可以创建一个名为“person”的对象。\n\n但事实上，没有人会在意它的简单，因为简单的东西往往承担不了重任。\n\n所以，我们可以从另一个角度去理解它的复杂，就是强大——每一种形式，每一个特性，都为了解决更多问题而生。\n\n# 复杂\n像上面那样，我们可以轻松创建一个对象，进一步，为其添加一些属性和方法：\n\n    person.name = \"idea\";\n    person.age = 18;\n    person.run = function(){\n        alert(\"I can run!\");\n    }\n    \n但其实这里我们就会发现需要写很多的“person”，代码不够简洁。\n\n可以进行如下改进，也就是另外一种写法——\"对象字面量\"：\n\n## 对象字面量\n    var person = {\n        name : \"idea\";\n        age : 18;\n        run : function(){\n            alert(\"I can run!\");\n        }\n    }\n它有两个优点：**简化代码、凸显封装性**。\n\n如果你对js不熟，但对css预处理还算熟悉，这就像是less或者sass的嵌套。（后面更深入的东西我还会拿css类比，以帮助理解。\n\n由此，我们可以像这样创建对象：\n\n    var person1 = {\n        name : \"tom\";\n        age : 18;\n        run : function(){\n            alert(\"I can run!\");\n        }\n    } \n    var person2 = {\n        name : \"lili\";\n        age : 16;\n        run : function(){\n            alert(\"I can run!\");\n        }\n    } \n    ...\n\n但其实我们好像又发现一点不那么好的地方，这样以来，我们每创建一个新的实例，都要写这么一大块的代码，显然是冗余的，于是，有人发动脑筋，想了一种办法——“工厂模式”。\n\n## 工厂模式\n对于工厂模式，可以这么理解，我们需要制作100个同类的产品，但不需要为每件产品都弄一个模子，而是一个模子可以反复用，生产很多很多产品。\n\n代码就像这样：\n\n    function createPerson(name, age, job){\n        var o = new object();\n        o.name = name;\n        o.age = age;\n        o.job = job;\n        o.sayName = function(){\n            alert(this.name);\n        }\n        return o;\n    }\n\n    var person1 = createPerson(\"tom\",18,\"teacher\");\n    var person2 = createPerson(\"lili\",16,\"doctor\");\n\n这段代码的亮点在最后，我们可以只用一行代码就创建一个对象，并赋予其属性值。\n\n看起来很不错，但它存在一个难以觉察的不足——我们好像无法获知这个对象的类型。\n\n这么说其实并不准确，每个对象都有其类型，大不了是Object，但这个结果给不了我们更有价值的东西。所以，要引荐出一个对象世界里的重要角色——“构造函数”。\n\n## 构造函数\n先看代码：\n\n    function Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n        }\n    };\n\n    var person1 = new Person(\"tom\",18,\"teacher\");\n    var person2 = new Person(\"lili\",16,\"doctor\");\n\n从面上看，这段代码跟上面那段有这么几点不同：\n\n- 没有显式创建对象\n- 属性和方法直接给了this\n- 没有返回\n- 创建新实例的时候，使用了“new”关键字\n- 名称首字母大写\n\n\n为什么说它重要，上面我们只是创建了一个自定义的构造函数，其实js当中有很多内置的构造函数，我们会无数次地使用，比如Array、Date、String等等。\n\n构造函数和普通函数有什么不同？好像只是首字母大写？\n\n这么说也没错，它可以当做普通函数使用，就像这样：\n\n    Person(“tom”,18,“teacher”)；\n\n但当它被这样使用了之后，就是作为构造函数：\n\n    var person1 = new Person(\"tom\",18,\"teacher\");\n\n会经历完全不同的过程。\n\n构造函数看起来很好用，但它还有需要改进的地方吗？往下看。\n\n上面那段代码里，有这么一行：\n\n    this.sayName = function(){  \n        alert(this.name);  \n    }\n\n它会为新创建的实例新建一个sayName方法，别忘了，方法是赋予对象的函数，函数本身也是对象，所以，person1和person2是两个不同的对象实例，同样，它们的sayName方法也不同（虽然看起来是一个样子）。\n\n这样以来，name、age和job都共用了，完成同样任务的方法却没有共用，每一个新的实例都会创建一次，显然，这不是最理想的，有办法解决吗？\n\n我们可以做这样的尝试：\n\n    function Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n        this.sayName = sayName;\n    };\n\n    function sayName(){\n        alert(this.name);\n    }\n\n    var person1 = new Person(\"tom\",18,\"teacher\");\n    var person2 = new Person(\"lili\",16,\"doctor\");\n\n和之前的区别就在于，我们把sayName方法提到了函数体的外面，意味着，它是个全局的函数，而不属于某一个。\n\n这个时候，你会发现一个有趣的现象，如果你写下这么一行代码：\n\n    alert(person1.sayName() == person2.sayName());\n\n它会弹出三个值：\"tom、lili、true\"。\n\n首先是里面两个分别执行，然后是外层，这说明，它们俩共用了同一个，不需要担心多余创建的那个函数实例。\n\n终于皆大欢喜！\n\n可是...慢着，好像哪里不对？\n\n你可能记得，说对象字面量的时候，我们提到了封装性，你会发现，这里的sayName方法在函数体的外部，如果有很多个，就会有很多个方法散落在外部，这感觉很糟，这不是我们要的，so，必须找到一个办法解决它，就像上面做的那样。\n\n## 原型模式\n我们终于迎来了这个重磅的概念，关于这个概念，往往让人觉得是复杂的，抽象的，高深莫测的，其实并不，让我们来看看它具体的表现：\n\n    function Person(){\n\n    }\n    Person.prototype.name = \"alien\";\n    Person.prototype.age = \"23\";\n    Person.prototype.job = \"teacher\";\n    Person.prototype.sayName = function(){\n        alert(this.name);\n    };\n\n    var person1 = new Person();\n\n    var person2 = new Person();\n\n\n我们创建一个函数，但里面什么都没有。\n\n接下来用到了“prototype”，其实每个函数都有一个prototype属性，这个属性是一个指针，所谓指针，就是建立A和B相关联的一个中介，prototype指向一个对象，这个对象，可以为我们提供所有同一类型实例能够共享的属性和方法，听起来是不是很熟悉？——它能为我们带来前面提到的所有。\n\n但这么说似乎仍然不好理解，所以，你应该对CSS很熟悉，prototype，就相当于为所有可能的子元素，提供了一个父元素，这个父元素的所有属性，都能为子元素所共享，同时，它也不限制子元素的行为。\n\n即，person1和person2具备Person.prototype所指对象的所有属性和方法，并且能够对其进行覆盖或者添加自身特有的新属性和方法。\n\n看到这，我们是不是应该准备欢呼“大结局”了呢？的确，已经有不少内容了，可是，事情从来都不像我们想想的那么简单。\n\n来思考一下，原型虽好，但它是否让我们走向了另一个极端？所有的属性和方法我们都需要共享吗？往往并不是，很多时候，对于某个属性，我们只需要私有即可，而不必共有，那么，什么样的属性私有更合适？既具备私有，又能共有的方案，存在吗？\n\n想知道答案，且看下回分解~\n","tags":["学习、javascript"],"categories":["总结"]},{"title":"拨开JS事件的迷雾（二）","url":"/2018/09/05/js_event_type/","content":"\n上一篇文章，我们聊了什么是事件，以及多种绑定方法，这篇我们接着聊。\n\n## 怎么实现 \n\n日常工作中，我们要做的东西通常都是来自某个想法，比如，按钮点击之后要怎样，划过要怎样，还有悬停、滚动、拖拽、手机屏幕转换等等，诸多场景。\n\n但这些想法怎么实现呢？似乎有点无从下手，其实编程语言的设计者已经为我们考虑了这个问题，它为我们准备了很多可以和不同场景相匹配的工具，就好比厨房里的铲子、勺子、筷子、叉子、菜刀，按需取用即可，而且随着技术的演变，用户场景的丰富，它也会与时俱进，这就涉及到下面要讲的**事件类型**。\n\n## 事件类型\n\n事件的种类可谓相当繁多，有可见的，有不可见的，大致可分为如下几类：\n\n- UI：load、select、resize、scroll等\n- 焦点：blur、focus、change等\n- 鼠标：click、mousedown/up、mouseenter/leave、clientX/clientY等\n- 键盘：keydown/up、keypress\n- 触摸：touchstart、touchend、touchmove等\n- 手势：gesturestart、gestureend、gesturechange等\n- 设备：orientationchange、deviceorientation等\n\n上面这些，大都是人为操作，还有些事件是网页状态带来的，比如：网页加载完成、提交表单、网页出错等。\n\n除此之外，还有变动事件，复合事件，HTML5新加入的一些事件，不再一一列出。\n\n完整列表可在这里查看[Web Events](https://developer.mozilla.org/en-US/docs/Web/Events)\n\n网页上几乎每个动作都能够触发某个事件，网页代码也时刻准备响应这些事件，有时候它可能给我们带来麻烦，但多数时候是能够为我所用来解决问题的，这里没有多少难以理解的地方，就不再赘述。\n\n## 事件冒泡/捕获\n\n如果说事件当中有几大谜题，冒泡/捕获定能占据一席，按照最简单的逻辑，当满足了“元素、条件、执行内容”三者之后，事件应该就完整了，那冒泡和捕获又是什么意思？为什么会存在呢？\n\n实际上，他们是**描述事件触发时序问题**的术语。\n\n事件捕获指的是从总的父级到触发事件的那个节点，即自上而下地触发事件。相反的，事件冒泡是自下而上地触发事件。\n\n用两个图来展示：\n\n**事件冒泡**\n\n![事件冒泡](/img/event/event_maopao.png)\n\n**事件捕获**\n\n![事件捕获](/img/event/event_buhuo.png)\n\n如此说来，这两个过程看似浅显易懂，没那么难理解，可是它们为什么存在？\n\n找了挺多资料，都只说它们是什么，怎么用，却没有说设计意图，不过还是看到一种可能合理的解释。\n\n我们可以这样想，网页上的元素都是层层嵌套的，比如，一个body，套个div，再套个p，p里面再加个按钮，它们相当于若干个矩形进行叠放，那么，如果我点一下按钮所在的区域（注意，我强调了区域，即不先入为主地认为点的是按钮），那**到底是点了谁呢**？是按钮本身，还是包含它的p，或者是在点整个页面呢？\n\n给不出准确答案吧？因为你的手指就在那里，你的想法，或者说，我想让你的点击起到什么效果，得有个设定的方法或者机制吧？之前就说了，用户的任何一种行为都会对应某种结果，那么，浏览器的开发者自然不会让这种模棱两可、无法确定的东西真的没法解决，于是就给出了两种事件流的形式，冒泡或者捕获，开发者可选择是否用、用哪个、怎么用，这就提供了较大的可控性和灵活性。\n\n## 事件对象\n\nJS领域有一句很有名的话——一切皆为对象，如果单看”对象“这个知识点，似乎一点都不难，每个人都能随口说出几种创建和使用对象的方法，但是，JS当中的很多对象都是很抽象的，不知怎地，它就存在那里了，事件对象便是其中之一。\n\n先来看段代码：\n\n    function bgChange(e) {\n    var rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';\n        e.target.style.backgroundColor = rndCol;\n        console.log(e);\n    }  \n\n    btn.addEventListener('click', bgChange);\n\n不难看出，这段代码可通过点击某元素来改变其背景色，但有个莫名的小东西出现了，就是”e“，这里的e是什么？又能做些什么呢？\n\n你一定见过它，或者，你见过跟它长得很像的event、evt，这是个固定的指定名称的参数，被称为“事件对象”，**它被自动传递给事件处理函数，以提供额外的功能和信息**。\n\n初看这种写法，我也很纳闷，有什么事不能明着来，非要暗里作怪？但人家就是这么设计的，我们只能尽量去理解。\n\n那么，事件对象有什么用途呢，可多着嘞，你一定也见过，譬如：\n\n- **阻止默认行为**\n  什么是默认行为？链接跳转、表单提交等都是，这样写就可以加以阻止：\n  e.preventDefault();\n\n- **阻止事件冒泡**\n  事件冒泡是一种事件的执行机制，有些时候会造成意向不到的结果，需要阻止，像这样：\n  e.stopPropagation();\n\n- **事件委托**\n  上面一个应用是阻止事件冒泡，但有些时候，它又能给我带来好处，正所谓凡事都有两面性。\n  事件委托的意思是，当一个父元素有很多子元素，每个子元素都将执行同样的事件，那么，没必要给它们重复绑定，只要将事件监听器设置其父元素之上即可，举例如下：\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs php\" style=\"margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 0.5em; background: rgb(30, 30, 30); color: rgb(220, 220, 220); display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"parent-list\"</span>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-1\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">1</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-2\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">2</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-3\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">3</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-4\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">4</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-5\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">5</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;id=<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-6\"</span>&gt;Item&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(184, 215, 163); word-wrap: inherit !important; word-break: inherit !important;\">6</span>&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(87, 166, 74); font-style: italic; word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;Get&nbsp;the&nbsp;element,&nbsp;add&nbsp;a&nbsp;click&nbsp;listener...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"parent-list\"</span>).addEventListener(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"click\"</span>,&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(220, 220, 220); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(86, 156, 214); word-wrap: inherit !important; word-break: inherit !important;\">function</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(220, 220, 220); word-wrap: inherit !important; word-break: inherit !important;\">(e)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(87, 166, 74); font-style: italic; word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;e.target&nbsp;is&nbsp;the&nbsp;clicked&nbsp;element!</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(87, 166, 74); font-style: italic; word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;If&nbsp;it&nbsp;was&nbsp;a&nbsp;list&nbsp;item</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(86, 156, 214); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(e.target&nbsp;&amp;&amp;&nbsp;e.target.nodeName&nbsp;==&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"LI\"</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(87, 166, 74); font-style: italic; word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;List&nbsp;item&nbsp;found!&nbsp;&nbsp;Output&nbsp;the&nbsp;ID!</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"List&nbsp;item&nbsp;\"</span>,&nbsp;e.target.id.replace(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"post-\"</span>,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"\"</span>),&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(214, 157, 133); word-wrap: inherit !important; word-break: inherit !important;\">\"&nbsp;was&nbsp;clicked!\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br></code></pre></div>\n\n\n这是个列表，事件监听器位于ul上，但最终选择执行的目标元素是li。\n\n当然，事件对象不止这些作用，它还有很多属性可以操作，譬如：\n\n- event.target.nodeName 　　\n- event.target.id　　　　　　\n- event.target.className　　\n- event.target.innerHTML\n等。\n\n在此不再赘述，具体可自行试验和研究。\n\n## 总结\n\n在使用事件的过程中，除了知道用什么，怎么用，还需要注意它可能引起的内存与性能问题。譬如：\n\n- 要限制一个页面当中的事件处理程序数量，否则，数量过多会占用太多内存，造成反应不灵敏，建立在冒泡机制上的事件委托可以帮助减少处理程序的数量。\n- 在浏览器卸载页面之前最好移除页面中的事件处理程序。\n\n事件的细节十分之多，两篇文章远远说不完，所以，这里只是概述，并未深入，但还是希望能对耐心读完的你有所帮助！\n\n接下来还会逐个涉及JS领域的其他知识，欲知后事如何，我们下回继续。\n\n\n参考链接：[Events](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events)\n","tags":["学习、javascript"],"categories":["总结"]},{"title":"拨开JS事件的迷雾（一）","url":"/2018/08/31/js_event/","content":"\n## 怎么实现？\n\n当我还很菜的时候（好像就是现在~），参加过一次面试，面试官问我，给一个元素绑定事件有几种方法，虽然我JS不熟，但觉得，没吃过猪肉还没见过猪跑吗？张口就来。\n\n>行内onclick啊，bind啊，还有那个什么Event啊...\n\n我努力在脑海中搜索见过的“猪”，他一边听一边微微点头，好像是懂了，可我自己都不确定自己说的是什么（捂脸），他没有笑出声来就算很nice了。\n\n那次过后，我决定把没弄清楚的给好好学习下，就是这篇文的由来，算个总结，也给仍一团糊涂的朋友一点帮助。\n\n既然是拨开“迷雾”，就不再主动制造障碍，像历史、深层次原理、某种事件类型的细节等就不再罗列，以免增加理解和记忆负担，内容较基础，高手可绕道~\n\n## 事件\n\n事件，即发生了某种行为，日常浏览网页的时候，不论是用户操作，还是开发者主动控制，都会有很多事件发生，比如：加载、点击、滚动、触摸等。所以它牵扯到几个方面因素：\n\n在哪里发生——**绑定**\n在何时发生——**监听**\n发生了什么——**类型**\n发生的过程——**流程**\n\n## 绑定\n\n俗话说，在哪里跌倒，就从哪里爬起来，先聊绑定。\n\n直接上码：\n\n    <button onclick=\"alert(你点到我了!)\"></button>\n\n这行代码给button绑定了一个click事件，弹出“你点到我了！”，这是最直接的方式，也是我们最初接触的方式，但显然这种结构和行为混在一起的方式是不太好的，来一点优化。\n\n继续上码：\n\n    <button onclick=\"tips()\"></button>\n    <script type=\"text/javascript\">\n        function tips(){\n            alert(\"你点到我了！\");\n        }\n    </script>\n\n有了什么变化？我们把所要执行的事件内容提了出来，单独封装，这样以来，当执行内容较多时，不会让HTML显得很杂乱，而且可复用，易维护，还能怎样优化？\n\n以上两种方式，都需要HTML的参与，即结构和行为相耦合，下面介绍不动HTML的DOM事件处理程序。\n\n**一、DOM0级事件**\n\n接着上码：\n\n    //添加\n\n    <button id=“btn”></button>\n    <script type=\"text/javascript\">\n        var btn=document.getElementById(\"btn\");\n        btn.onclick=function(){\n            alert(\"你点到我了！\");\n        }\n    </script>\n\n    //删除\n\n    btn.onclick=null;\n\n\n这里是将一个函数赋值给一个事件处理程序的属性，这种方法，是DOM0级事件处理程序，出现的时间较早。\n\n它的优点是：**简单、跨浏览器**，当使用更高级的方式而浏览器不支持的时候，可以回退到这种方式。\n\n**二、DOM2级事件**\n\n你没看错，不是没有DOM1级，而是DOM1级没有定义事件处理相关的东西，所以这里直接跳到2级。\n\nSo，我们来看看DOM2级的标准之下，上面的代码怎么写：\n\n    <button id=“btn”></button>\n    <script type=\"text/javascript\">\n        var btn=document.getElementById(\"btn\");\n        btn.addEventListener(\"click\",function(){\n            alert(\"你点到我了！\");\n        },false);\n    </script>\n\n发现了什么？它们之间只有一处不同，即事件处理程序的绑定方法——**addEventListener**。其标准用法如下：\n\n    addEventListener(\"事件名\",事件处理程序,布尔值)\n\n前面两个很直观，但第三个布尔值是什么意思？其实它决定了事件处理程序什么时候调用，true是捕获阶段，false是冒泡阶段。多数情况下都会在冒泡阶段调用，这样能最大限度兼容浏览器，至于捕获和冒泡是什么以及有什么用处，后续单独聊。\n\n使用DOM2级方法的主要好处，是可以添加多个事件处理程序。比如：\n\n    btn.addEventListener(\"click\",function(){\n            alert(this.id);\n    },false);\n\n    btn.addEventListener(\"click\",function(){\n        alert(\"你点到我了！\");\n    },false);\n\n它们会依次按顺序执行。\n\n既然有添加，当然要有移除，移除事件的方法就是**removeEventListener()**。和添加时传入的参数相同，这意味着，这种方法添加的匿名函数将无法移除。\n\n**兼容？**\n\n我们聊很多技术的时候都会做这样的区分：现代浏览器、老版浏览器。这是事物发展的必然规律，事件也不例外，那么除了上面提到的还有什么不同？——IE。\n\n大家知道，IE通常都是特立独行的，它**添加**和**删除**事件处理程序的方法分别是：\n\n    attachEvent() 和 detachEvent()\n\n同样需要有“事件名”和处理函数两个参数，但跟addEventListener()的区别是：\n\n- **事件名称需要加“on”，比如“onclick”；**\n- **没了第三个布尔值，IE8及更早版本只支持事件冒泡；**\n- **仍可添加多个处理程序，但触发顺序相反。**\n\n还有一点需要注意，DOM0和DOM2级的方法，其作用域都是在其所依附的元素当中，attachEvent()则是全局，即如果像之前一样使用this.id，访问到的就不是button元素，而是window，就得不到正确的结果。\n\n那么，跨浏览器添加事件怎么写呢？这类代码通常具有通用性，所以可以将它封装成一个对象以备多人多项目复用，代码如下：\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"hljs lua\" style=\"margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; background: black; color: rgb(234, 234, 234); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;\">var&nbsp;EventUtil={<br>&nbsp;&nbsp;&nbsp;&nbsp;addHandler:<span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">function</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">(element,type,handler)</span></span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(element.addEventListener){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element.addEventListener(<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>,handler,<span class=\"hljs-literal\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(element.attachEvent){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element.attachEvent(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(185, 202, 74); word-wrap: inherit !important; word-break: inherit !important;\">\"on\"</span>+&nbsp;<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>,handler);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element[<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(185, 202, 74); word-wrap: inherit !important; word-break: inherit !important;\">\"on\"</span>&nbsp;+&nbsp;<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>]=handler;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;removeHandler:<span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">function</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">(element,type,handler)</span></span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(element.removeEventListener){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element.removeEventListener(<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>,handler,<span class=\"hljs-literal\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">if</span>(element.detachEvent){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element.detachEvent(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(185, 202, 74); word-wrap: inherit !important; word-break: inherit !important;\">\"on\"</span>+&nbsp;<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>,handler);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(195, 151, 216); word-wrap: inherit !important; word-break: inherit !important;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element[<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(185, 202, 74); word-wrap: inherit !important; word-break: inherit !important;\">\"on\"</span>&nbsp;+&nbsp;<span class=\"hljs-built_in\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(231, 140, 69); word-wrap: inherit !important; word-break: inherit !important;\">type</span>]=null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre></div>\n\n\n可明显看出，其使用了条件判断来检测浏览器是否具备那个方法，如果有，就用，没有，向更古老和通用的方法回溯。\n\n怎么使用它呢？就像这样\n\n    EventUtil.addHandler(btn,\"click\",handler);\n    EventUtil.removeHandler(btn,\"click\",handler);\n\n## 小结\n    \n至此，JS事件的添加方法以及怎样做兼容就大概介绍完了，这只是事件的一个方面，也已有不少内容。\n\n在现今JS框架满天飞的时代，从较早的JQ到较近的React、Vue，我们似乎很少需要再手动书写原生方法，它们本身封装的方法替我们省去了很多重复繁杂的劳动，但去了解和学习这些知识仍是有好处的。\n\nJS总体的知识点可谓相当庞杂，但再庞杂的东西都是由小的点组成，把它的要点和脉络抽出，进行个个击破，学习的过程就会显得轻松愉快，最终绘成一张大的版图。\n\n欲知后事如何，我们下回继续。\n","tags":["学习、javascript"],"categories":["总结"]},{"title":"职级晋升究竟难在哪？","url":"/2018/08/25/position_up_method/","content":"\n对于在大公司工作的人来说，每年都有一件重要的事，就是职级晋升，很多人觉得它是道很难过的坎，能过的人必然是有突出贡献或者高超技术。\n\n我没有参与过答辩，对这件事加以评论貌似不大合适，有纸上谈兵之嫌，但我现场听过好几次答辩预演，也旁听过一次正式答辩，慢慢地也就听出来，“难”的点究竟在哪，不是很多人所关注的业绩和技术，而是最为人们所忽略的**组织、表达及演讲能力**。\n\n首先、自我介绍，这是个默认的，看似没什么好讲的环节，再加上略微紧张，所以多数会支支吾吾地匆匆讲过，这个关系不大，评委并不十分在意，就算听不清也能看到。\n\n但紧接着就会暴露更多问题：\n\n>PPT要讲什么？大纲怎么列？分几个部分？为什么那么分？它们之间有没有联系？\n\n如果没有做到这些，可能导致的结果是：\n\n拿各种自己可以讲的东西来**拼凑**，自然没有什么**先后顺序**可分，做完自我介绍之后，直接进入正题，评委就得接受突然到来的第一部分，演讲者的表述是这样——“这一页是讲”、“这一页是讲”......循环播放到最后，**没有前后承接，没有逻辑，没有重点**。\n\n再者，图片和图形的运用，合理运用就是锦上添花，可以省去很多文字和语言，但如果罗列得比较乱，比较多，文字也比较小，或者色调没有调好，评委根本**看不清楚**，那就会弄巧成拙（自己觉得没问题不行，你当然知道自己写了什么进去，得别人看了没问题），不仅自己想讲的重点评委没能get到，甚至没搞清楚你在讲什么，就不会对你那页PPT有什么印象，自然不能加分。\n\n这其中可能夹杂着，**语速过快**，**节奏过快**，被评委打断之后**语言组织凌乱**，甚至自己**卡壳**，等等，\n\n你越是出问题，就给了评委越多打断和质疑你的机会，若处理不当，比如：\n\n>这个还没有研究过，这个问题尚待解决，这个不是我工作的重点等等\n\n给评委的感觉就是——要么你知识积累不够，没能力解决，要么你执行力不够，不作为。\n\n所以，即使你做了很多重要工作，即使你都想展示给评委看，但评委不能通过你的展示来了解：\n\n>你做了什么以及为什么？你遇到了什么困难以及怎么解决？你比别人更优秀的点在哪？以上所述是否有足够说服力？\n\n最终就会导致两种看似奇怪实则正常的现象：\n\n有些人做了很多工作，但答辩屡战屡败；\n\nA、B同时参加答辩，A做的工作更多，技术含量更高，但B过了，A没过。\n\n## 总结\n\n你的演讲，是想别人聚精会神、鸦雀无声地听下去，还是忍不住打断？\n\n有位同事说得好，你要把它当故事来讲。即要让评委跟着你的节奏走，去倾听，去融入，进而认可和欣赏你，而不是生硬地罗列，等着挑毛病。\n\n遗憾的是，会讲故事的人不多，大家都比较重视**重要项目、效率工具、技术痛点**，缺乏综合素质的锻炼，比如PPT技巧、内容组织和语言表达​。\n\n我看过的模拟答辩当中，评委给建议最多的就是——这块可以不要了，这块放前面，这两块其实可以合成一块，这块简单略过，那块你可以详细深入地讲讲。\n\n归纳一下：**逻辑清晰、突出重点、繁简得当**。\n\n我常写文章，就拿它来类比，一篇文章我要向读者传达什么，这是要跟每个段落、每个情节都有直接或者间接的联系——我要怎么开头，需不需要划分小节或者大的章节，怎么分？这是大的**骨架**，之后是**段落**，哪个段落需要放前面，哪个段落适合放在下一章而不是这里，之后是**语句**，要用哪句话引出故事，哪句话收尾引出结论？是否有多余或者缺失？之后是**词汇**，是否可以换个更合适的词，是否需要精简？\n\n精雕细琢出精品，只有经过了这么一个从整体、到部分、再到细节的打磨过程，​才能写出一篇让读者读来通顺、舒服、动情的文字，然后你才会从那些做得没你好的人当中脱颖而出，晋升答辩同样道理。\n\n最后，祝“考生”们好运。","tags":["思考"],"categories":["思考"]},{"title":"我的编码工具更迭史","url":"/2018/08/10/my_code_tools_history/","content":"\n说到编码工具，肯定跟编程相关，所以，先聊聊我走得歪歪斜斜的编程路。\n\n我本科学的是计算机，但那时候学习并不上进，没有什么可以拿来说的编码历史。\n\n最初接触的是C语言，用什么工具写的已经忘了，只记得，那时候对着课本敲完一个函数之后，都不知道怎么运行才能得到结果….\n\n大三的时候，短暂地通过啃书本的形式学过java，最常听人提及的工具是Editplus，很多人对其青睐有加，我也曾经安装使用过，但很快就没有再用，不是它不好，而是在我这儿派不上用场。\n\n真正意义上接触编程，还是大四阶段，考研失败，只能想着完成毕业设计，然后找工作。\n\n一直到大四，学校才开了一门课叫网页制作，那时候才有了了解网页相关技术的想法，每节课都听得津津有味，感觉比其他语言都更有趣，因为编码很直接就能看到效果，打几个字，写几个框，很简单，但很有成就感，还马上就跟家人炫耀，看，这是我写的网页，很是得意。\n\n其实我是早有机会知道并接触它的，那时是大二，同班同学组织了相关的兴趣学习小组，其中就有网页三剑客，只是那时我自恃清高，觉得那些全都是不务正业，也觉得，我学习的可是计算机科学，那些花拳绣腿算什么，不屑了解和参与。\n\n或许跟我的性格有关吧，这让我错过很多接触新事物的机会。\n\n这么一来，直到大四临近毕业，因为毕业设计，我才真刀真枪地写网页代码。\n\n嗯，进入正题，哈哈。\n\n****\n\n每个初学者，或者那时候前辈给后辈推荐最多的，仍是Dreamweaver（以下简称DW），因为它大而全，有很多按钮可以点，很多功能直接明了，不像现在大部分人使用的编辑器，看着简洁，但也光秃秃的，显得啥都没有，初学者肯定不知如何下手，或者即使下手了，也会觉得枯燥无味，难以坚持下去。\n\n所以，在任何一个阶段，都没有绝对的好或者坏的选择，只有合适。\n\nDW我用了一年多，在这期间，我遇到过的同样在用DW的，基本上都是上了年纪的老鸟，人的习惯是难改变的，毕竟他们已经用了那么久，最顺手，至于有没有其他人在用别的，我接触得很少，也不知道。\n\n两年之后的一个契机，有人给我推荐Sublime Text，我就试了一下，第一感觉就是快，打开速度快，这当然是跟DW相比，然后我就开始了解它都有什么优点，轻量肯定是它一大亮点，然后可以安装增强功能的插件。于是我就花了一段时间，慢慢地学习使用和适应它，就这么进行了第一次的工具更换。\n\n小结一下，这次更换的原因是什么呢？有二：\n\n一、它的大小和速度打动了我，在每天看着DW那略显臃肿的界面之后，突然看到一个简洁清新的界面，难免会喜欢；\n二、从一开始写代码，我就一直是纯手写，所以，DW的相当多功能我其实是用不上的，与其放着浪费，不如选择一个压根没那些功能的工具。\n\n----\n\n比起DW，Sublime Text我整整用了四年，其实在这四年时间里，甚至更早的时候，都已经出现了多种工具，大家耳熟能详的有Webstorm、Vim、Atom、VS code、Xcode等等。\n\n但我一直没有再换，为什么呢？\n\n其实从前面的描述就会发现，这是跟工作需要以及个人需要紧密相关的，如果你需要某个特性或者功能，而恰巧那个工具具备，你很可能会选择它，但如果多种工具都具备类似的功能，你选了一种之后，就不会想着换另一个类似的，因为没有这个“必要性”（如果你的确喜欢某种编辑器的外观或者独特插件就另说）。\n\n久而久之，就会陷入麻木，标准变成了“能干活就行，现在这个用着没什么问题”，就没有换的理由了。\n\n但最近我换了，换了哪个呢？VS code。\n\n它比Sublime Text好吗？这么比肯定不合适，太笼统。\n\n那它有什么吸引我的亮点吗？依然有二：\n\n一、它本身自带git，所以并不需要安装git相关的各种工具就能直接使用，所以如果你使用git，它会更方便；\n二、可以在编辑器当中打开多个控制台窗口，还不需要你去找路径，点击添加，它会在上方弹出一个列表，把你放到workspace里面的所有文件夹的路径都列出来，选择即可。所以，如果你同时在做多个项目，而它们又需要频繁使用命令行操作，就很爽。\n\n由于我也刚使用时间不长，所以尚未挖掘出太多它的优点，但有一点，使用Sublime Text的那些便利，它应该都具备，故而，如果你心动了，尝试换也无妨~\n\n说到这，这篇更迭史也就絮叨差不多了，不是特别详细和具体，没有罗列什么配置或者插件，我觉得这些并不是选择某款工具的决定因素，但整体脉络还算清晰，能知道，我换了什么，为什么换，或许可以为你提供一点点参考。\n\n当然，这里并不是要推荐某款工具，用什么都是有原因的，但肯定不是别人让你换你就换了，得根据自己的需要。\n\n最后，前面有说，每个人都有自身的局限性，我曾因为闭塞错过不少好东西，所以，我更相信本文内容只是冰山一角。如果有哪款工具更好用，或者有更多解决痛点的功能值得一试，还请各位不吝赐教，在此先谢过！~","tags":["总结"],"categories":["总结"]},{"title":"闲谈“动”、“静”","url":"/2018/08/06/talk_sport_and_quiet/","content":"\n近两年来，我在有意识地养成两个习惯，一个是健身，一个是读书。但有一个奇怪的现象：\n\n要么有一段时间运动得多，很享受那种气喘吁吁、大汗淋漓，运动完再对着镜子自恋地看看自己有没有长肌肉，静不下来；\n\n要么有一段时间书读得多，沉浸在作者神奇的构思和美妙的文笔中，徜徉在一个个故事里，又懒得动。\n\n两者总不能兼得，我一度以为自己是天生的单线程动物。\n\n后来发现并不是，“动”和“静”应该是缺一不可，相伴相随的好搭档，它们都有各自的益处和妙处，\n\n静的时候，可以读读书，写写字，画幅画，听听音乐，或者只是出去走走，可能会有短暂的枯燥和乏味，但时间久了就不自觉地享受起来，忘却很多烦心事，还能锻炼脾性。\n\n动的时候，可以打打球，跑跑步，跳跳绳，玩玩器械，甚至只是蹦蹦跳跳，会感觉身体每块肌肉，每个关节都在活动，从僵硬变得有弹性，每个器官也开始苏醒，随着呼吸、脉搏一起运转。\n\n以前我是个爱静的人，总把自己藏在一个地方，默默地做自己的事，后来逼自己动起来，尝到了不少“动”的乐趣，又在不知不觉中冷落了“静”。或许，动静交替才是最好的状态吧。​​​​\n\n","tags":["思考"],"categories":["思考"]},{"title":"诚意挽留，不如甘愿相守","url":"/2018/07/14/product_thinking/","content":"\n相信各位都有过这样的经历，发现一款产品，前期进行“试用”，觉得“适合”或者“喜欢”，会继续用下去，让它成为自己生活的一部分，就算偶尔遇到问题，仍然愿意解决问题继续下去。\n\n但是，如果有一天你发现它变得不再是原来的样子，让你觉得不舒服，不喜欢了，就存在流失或者离去的危机。\n\n拿产品来说，产品方，肯定不希望看到用户流失，想挽留，但又有一个矛盾，并不愿意把那个让用户产生“厌恶感”的功能或者环节给去掉（本来就是自己产品升级或者运营的一部分）。只好打感情牌，什么是感情牌？\n\n“你真的舍得离开吗？”\n\n“离开了就不能继续享用我们的服务了哦。”\n\n“失去了这个身份就不能继续享受优惠了哦。”\n\n等等。\n\n本文正是由此而来。\n\n前阵子看到一篇新闻报道——“从未见过如此厚颜无耻的退款流程”。\n\n大家应该知道，共享单车最近都在实施“免押金”方案，大概介绍一下我使用单车的过程。\n\n开始—我用的是摩拜，因为它最先出现，可以说夺得了市场先机。\n\n选择—有别的单车出现，我尝试使用，但发现它没有摩拜方便，比如ofo，需要输入编号，我觉得麻烦，所以，虽然同类产品众多，我依然继续使用摩拜。\n\n退押—当单车开始实施“免押”，就代表用户是可以，并且大概率会选择这个操作，因为那是一笔不小的费用，因为有供应商出现了退押难的问题。所以，我第一时间在摩拜上面退了押金，虽然入口不是那么明显，但整个操作两步以内完成，押金很快回到了我的账户上。\n\nofo什么情况呢？正如我前面举的例子那样，它用了至少四步，每一步都“苦苦挽留”。\n\n这会给用户什么感受？反感，反感的后果是，不管你多少步，我都会退，不仅要退，我甚至会选择卸载，这当然是产品方最不愿看到的，可它为什么偏偏要这么做呢？\n\n其实这样的例子我们并不陌生，让我印象比较深的是360安全卫士，我曾经因为使用了腾讯电脑管家而选择卸载360，它就一而再再而三地挽留，看似诚意满满，但它留的次数越多我可能走得越坚决。\n\n单从这方面来讲，很多人喜欢苹果的系统，它有个明显的特点是，安装和卸载软件都是“无感”的。\n\n我们常常谈的一个词叫“用户体验”，通俗一点说，就是为用户着想。\n\n这句话当然不能简单理解成—用户想免费就免费，想要什么就加，不想要就去掉。而是需要给用户足够“使用且喜欢”的理由，既要达到自己的目的，又能让用户开心。\n\n一旦用户不开心了，需要怎么做呢？用语言去阻止，或者生拉硬拽？\n\n举两个生活中的例子。\n\n一对情侣，一方做了让对方很失望的行为，另一方选择分手，这时候，你对他说“我很爱你，不要离开我，我不能失去你”，却没有做出实际行动，那么再多看似生动有诚意的语言，都显苍白，意义都不大。\n\n又或者求职，如果你的简历，你的能力，都不够好，只是跟面试官说，我是个好人，我会好好学习，以后我会很优秀，那么面试官也是不会要的。\n\n这里想强调的是，**做好前面，比弥补后面更重要，服务不好，态度就没有意义**。用户是十分敏感的，功能的喜好可能难以捉摸、因人而异，但体验的舒适度和流畅度一定要好，用户是被服务，而不是被动服务，否则，再大的诚意都是用户离去的助推剂。​​​​\n\n\n\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"成熟不是妥协，是更懂怎样改变","url":"/2018/07/08/when_people_be_man/","content":"\n这个话题出自一位行业前辈对后辈善意的教导，名字我就不说了，当时看完脑子一热，我就写下了这篇文章的主要部分，搁置到今天，我把它写完分享给大家。\n\n他文章的主要意思是，一个人会随着年龄的增长，经历的增多，知道不要试图改变别人才是正确的。\n\n我明白他的立场和用意，但我觉得需要表达一些不同的东西，并非反驳，权当补充。\n\n我相信很多人都有类似的感想，当我们有了一些见识，一些知识储备，一些经验，就禁不住想利用它去做一些事情，要么跟别人分享自己的见解，求得认同，要么想运用它做成某件事。用一个抽象的词来概括，就是“改变”。\n\n但很多时候，改变是困难的，你有你的想法，别人有别人的想法，说通俗些叫“立场”，说大一些叫“信仰”。你想几句话就改变别人的信仰？难如登天。\n\n影响范围越大，支持者越少的人，这种感觉会越强烈。\n\n久而久之，我们就会从最初那个到处找人交流切磋，和人争论，想做各种事情去改变事态的人，变成了一个沉默寡言，习惯了很多事都一笑而过的人。\n\n并不是不再有不同的看法，只是我们承认了，改变是困难的，索性放弃吧，或许真是一种更聪明的活法。\n\n真的这么绝望？我们不妨来聊个社会话题——“脑残粉”。\n\n为什么会出现“脑残粉”，是他们真的脑残么？并不是。人总会喜欢上某种东西，一位作家、歌手、影星等等。近乎痴狂地喜欢，它不具备普适性，但对个体的影响巨大，那成为他们的一种精神支撑和寄托，它会让人专注且执着地追随、支持、信任和效仿，由此给自己的生活、职业、甚至是人生带来改变。\n\n还有一个常见的例子——网红，网红为什么发微博，而且有大量的关注者“点赞”和“转发”？因为喜爱，因为欣赏，因为相信，同时会产生与之相关联的行为，这也是改变。“脑残粉”只是其中一种暴露给大家看的，比较极端地，通常意义上不理智的例子而已。\n\n所以，直接的改变是很难，但不是不可能，甚至可以是容易的。\n\n同样，改变别人的想法也不是错误的。老师通过教育去引导学生提升学识，拥有积极的价值观；专家通过培训，去引导农民科学种田；通过跟合作伙伴充分沟通来调整彼此的工作方式，以提高效率。这些都是有益且人们需要的改变。\n\n我们不宜用自己曾经失败的经历，或者一部分人功利性、忽悠性的反面教材去否定它本身的正确性和意义。\n\n我们可以不面红耳赤地争论，可以不恶语相加，可以不利用权力去压迫，可以不放弃传播真善美的念头。我们需要做的，是用实际行动去做出令人心悦诚服的事情，从而影响他人。\n\n成熟不是放弃改变，而是改变自己改变别人的方式，以及多一些实施它的耐心。​​​​\n\n\n\n\n\n\n","categories":["思考"]},{"title":"三年三个总部，除了努力的都交给命运","url":"/2018/06/18/binhai_start/","content":"\n>努力和命运，是敌，还是友？\n\n## 前传\n2014年，毕业不到一年的时候，我已经基本适应了深圳的气候和节奏，在一家创业公司找到一份对口的工作，完成了从校园到职场的过渡，生活趋于平稳。\n\n但对于每个在大城市打拼的年轻人来说，平稳绝不是答案，活得舒服、活得漂亮才是，人们称之为“理想”。\n\n不论出身，不分职业，在任何一位职场新人的脸上，你都看不到一丝倦怠，只有带着些许谨慎的谦虚和满满的干劲儿，他们努力上进，积极主动，不怕新事物，不怕被挑战，渴望被接纳、被发现、被认可，所以，职场的前两年通常是一个人的快速成长期。\n\n当然，成长的目的无非是一步一步往上爬。\n\n不论是走在路上，坐在地铁里，还是待在房间里，我都会时不时构想着，过个四五年，自己应该能变得优秀，够资格进入大公司？\n\n这是我当时的全部念想和动力，我甚至想过选腾讯还是百度，就像小时候我想过长大上清华还是北大一样。\n\n带着这种盲目又可爱的想法，我开始做各种努力，加班，跟同事学习，把市面上的好书都买回来读，扩大社交圈去结识更多同行朋友，坚持写技术博客。\n\n看似准备做得很足，但当我试图去靠近那座灯塔时，却发现它仿佛是个陌生的世界，那么遥不可及，一个不经意的挫败都会让我惭愧不已，将自己全盘否定。\n\n是它太高贵，还是我太卑微？说到底，是平台的差距，大公司的氛围、制度、规范和对工作质量的要求，都是小公司难以匹配的，当没有一个明确的标准作为方向时，努力似乎都是徒劳的。\n\n这并不是对小公司的否定，创业和名企有着同样的吸引力，它们都意味着某种成功。我向往名企，但当意识到自己的力不从心时，我只好继续做着创业的梦，万一成功了呢？\n\n我经历过两家创业公司，它们有一个共同点，寒酸的现状和美好的愿景，每位老板都会跟你说，你会得到怎样的成长和锻炼，有多么美好的未来，俗称“画饼”。\n\n作为身处其中的一线亲历者，哪怕每天坐在狭小又简陋的办公室里，搬几个凳子凑一起就能开会，你每天在做什么没人知道，也仍感觉未来掌握在自己手中，会为它所取得的每一次进步感到欣喜。\n\n创业有着极大的不确定性，这种不确定是双刃剑，会让人兴奋，也会带来不安。\n\n值得一提的是，对于个人成长来说，它扮演着不可替代的角色。主要体现为两方面：\n\n一、敢于尝试。因为创业本身就是尝试，允许折腾，能让你在不断地尝试中接受更多挑战，这跟在稳如山的大公司里循规蹈矩截然不同，你会发现，虽然自己需要面对一些突然到来的困难，但进步神速。\n\n二、自主性强。如果你有一个想法，想去实现它，没有很多的条框和流程限制你，可以自己做主，马上行动。\n\n尽管如此，它带来的不安却会让这二者大打折扣，试想，如果公司发展不景气，产品夭折，资金链断裂，拖欠薪水，同事离职，这样的情形下，还有谁有心思去做梦，去沉下心学习？只会人人自危。不巧，我都碰上了。\n\n两次创业，两次以失败告终，始于激情，终于不安，这就是我工作前两年的全部写照。让尚未在职场站稳脚跟的我对小公司不敢再抱幻想，重新点燃了大公司梦。\n\n## 正传\n\n1、\n\n彼时我对腾讯还十分陌生，只是远远地仰望过，但仍阻挡不了我对它的向往，只要看到可能的机会，都像找到一条缝隙般使劲儿往里钻。\n\n偶然看到一个职位，部门感觉不错，要求不是很高，心中暗自窃喜，把简历投了出去。\n\n线上沟通，机试，面试。\n\n我能随意地说出当时的过程，但那种紧张我现在仍记得，我不相信自己能成功，却又不得不逼自己搏一把。\n\n那次我发挥挺糟的，准确地说是水平还不够，有几次都被难住，结束后很沮丧，觉得自己输定了。\n\n意外的是，我最终拿到了offer，来不及思考，喜悦盖过了一切，我马上奔走相告，跟朋友，跟家人，得到的都是赞许和祝贺。\n\n事实上，我得到的是外包岗，简单说，跟腾讯的员工一起办公，但不真正属于它。\n\n即便如此，我还是骄傲地戴上一条绿色带子的工卡，怀着激动的心情入职，见到的每个人都像大牛，如饥似渴地，去汲取营养。\n\n当时我所在的办公地是大族激光，需要说明的是，因为办公区不够，腾讯租了很多其他大楼的楼层作为办公场所，大族是一个，科兴、松日、万利达、飞亚达等都是。\n\n大族就在腾讯大厦隔壁，虽不在腾大，也觉得沾了不少光。但只过了一个月，我刚适应新的环境，就被通知收拾东西搬家，整个组被从大族调到了飞亚达，有种被发配边疆的感觉。\n\n从那时起，我开始了将近一年的飞亚达生涯，离腾大更远了，但里面有很多腾讯员工，也并没有太大落差，一点都不觉得自己是外人。\n\n后来，当我了解到更多公司发展历程后才知道，原来那里是腾大建成之前的旧总部，而我所在的楼层，是小马哥当年所在的办公楼层，如此想来，又多了几分宽慰和自豪。\n\n随着工作慢慢稳定，我的心情也恢复平静，每天的生活不断重复，而我也逐渐意识到外包岗和正式工的区别，福利少，薪水低，更为重要的，是会被某些人另眼相看——“哦，他是外包啊”，“这个是外包做的啊？怪不得质量一般”，“那些绿色工卡的是外包。”\n\n这些话当然会困扰到我，或者说我们，会有人跟我说，外包同样很优秀，可以做得很好，不必在意。可每次听到类似的谈话都难免尴尬，我们激励彼此“不爽？那就努力转正啊。”\n\n是不爽，可转正谈何容易，机会在哪里？\n\n正在我每天为之烦恼发愁的时候，机会悄然降临。\n\n还在创业公司的时候，我就认识一位在腾讯的前辈，有过几次接触和交流，我来腾讯做外包他也知道，于是，有合适职位机会的时候，他想到了我。\n\n虽等待已久，我并没有十分欣喜地迎接这个机会，而是陷入犹豫，我行不行呢？万一不行岂不是浪费机会？\n\n后来我说服自己，要勇于尝试，成功当然很好，不成功也知道自己差在哪，就有了努力的方向。\n\n同样的过程，却是更大的挑战，我接到一个从未做过的机试题目，完成它，我才能进入面试，完不成，一切将提前结束。\n\n我怂了，像两年前一样，想知难而退。但推荐我的那位朋友一直鼓励我，引导我，又给了我接受挑战的勇气。\n\n于是，我白天工作，晚上做题目，在那几天里天天熬到深夜，敲键盘到腰酸背痛，经过无数次的尝试和调整，最终完成。\n\n当我走进腾大，接受第一轮面试的时候，就觉得自己已经成功了，因为最难的一关已经闯过。\n\n我一路正常发挥，最终成功进入腾大，进入理财通。\n\n过程和我想过的所有版本都不同，但还好结果不错，殊途同归。\n\n有人说过，外包转正，至少需要两年，我用了八个月。当然，由衷感谢那位前辈。\n\n2、\n\n真正成为一家科技巨头的一员，感觉是美妙的，更何况，是令其他员工都羡慕的总部，腾讯大厦。\n\n我终于告别了那个进入大楼都需要别人帮刷工卡的身份，更为可喜的是，互联网金融正当时，作为一个没买过一分钱理财产品，对金融毫不感冒的人，我就这样因为工作而走了进来。\n\n没过多久，部门召开了一次千人大会，宣布成立支付基础平台与金融应用线，由总裁直接管辖，我并不完全清楚这意味着什么，但知道，我再也不需要站在这艘大船的边缘去羡慕别人，而是在向中央靠近。\n\n2年10个月零13天，这是我在腾大待过的日子，在这两年多，我经历和见证了很多，有喜悦，有苦恼，也学到很多，从一个鹅厂新人成为一名老鹅，很幸运的见证了它的十八岁成年礼，又即将见证它走向二十岁。\n\n很多认识或不认识的人试图跟我交朋友，让我帮忙推荐职位，那种欲望比我当初更甚，仿佛只要能进来，怎样都可以。这让我想起毕业之初，刚找工作时，我姐跟我说的一句话“我宁愿你到微软扫地，也不愿你在一个普普通通的公司浑浑噩噩。”\n\n这么说不无道理，但也的确夸大了事实。\n\n实际上，大公司也是一座围城，你所期待的，只是它和现在的你之间的不同，你觉得它优于自己，当你习惯了它，就像是你习惯了现在的生活一样，不会感到不同。\n\n这两年多，一同入职的伙伴有不少都已经离职，一个部门的同事也变动很大。离开腾讯会有更好的选择吗？当然有。人的幸福感从来不是自己得到了什么，而是那是否让自己觉得快乐和满足。任何一个地方，都有你喜欢它或讨厌它的理由，选择坚守或离开，都是对的。这或许能打消一些人“都进了腾讯还换什么工作？”的想法。\n\n天堂本不存在，美好的只是向往。\n\n不过还好，我坚守着，等来了搬迁新总部的那一天。\n\n3、\n\n滨海大厦，腾讯新总部，背靠深圳大学，面对繁华的海岸城，从它动工的那天起，到竣工封顶，到投入使用，每有新的动作都会成为新闻而广受关注。\n\n从那些文章里，你可以明显地看出它有哪些不同，如果很多人眼里的腾大是高端大气，那么滨海堪称奢华。\n\n颇具特色的外形，高科技的电梯，人性化的工位，宽敞舒适的餐厅，温馨安静的休闲区，各种高规格的球场、健身房。\n\n我有限的认知和词汇已经不足以描述它，起初，我不知道自己能否有机会去到那里，而当得知我们在搬迁部门之列时，除了开心，更多的是感恩。\n\n身处新大楼，不论在哪个角落，都有一种不真实感，我不认为它本该属于我，而是上天的赏赐。\n\n可能你会这样形容我：屌丝逆袭，春风得意。\n\n其实并不是，我追喜欢的女孩一年多失败告终，做公众号三年多默默无闻，写文章两年多读者寥寥，被领导误解，被琐事纠缠……得意都是留给别人的，失意才属于自己。\n\n如果你羡慕我，是对的，人有目标总是好事；不羡慕也是对的，我的生活与你无关。\n\n一路走来，我经历很多，也思考很多，现在这份工作是否仍然合适，我的职业生涯该怎么走，我的未来在哪里。想来这和几年前那个迷茫的我又有多少区别呢？人就是这样，从一个起点走到终点，再从新的起点重新出发。\n\n但我能做的只有努力，剩下的交给命运。\n\n努力和命运，是敌，还是友？知难而退则为敌，锲而不舍则为友。望你我，能用努力改变命运。\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"关于“抖音”，说点不一样的","url":"/2018/06/14/douyinshuo/","content":"\n偶尔看到一条新闻，抖音发布重要数据，其日活已超1.5亿，月活超3亿。\n\n这个结果我并没有太多意外，抖音一度占据着苹果应用商店免费下载安装第一的位子，现在仍然名列前茅，它在我们身边也同样火爆。\n\n“过亿”这个字眼，随着人们见得越来越多，已经稍显麻木，但它仍是个了不起的成就，毕竟很多产品还仰望千万而不及。\n\n如果放到其他类型的产品上，我会觉得吃惊，并且思考，为什么，它满足了人们的什么需求，它做到了哪些让用户乐于使用的细节，它有哪些方面值得其他产品经理或者创业者学习？\n\n但抖音似乎并不需要，因为它太简单直观，打开看就是了。\n\n为什么看？美女、绝活、整蛊、搞笑，等等。反正就是有意思，你给我多少都看不够。\n\n所以，抖音刚开始流行的时候，很多人都说，一晃两三个小时过去了，根本停不下来。\n\n我是个慢热的人，你说什么电影、电视很火，我极少会马上追，基本都是过好几个月才会去碰。\n\n我可能比大多数人都更早知道抖音，因为17年一档很火的选秀节目——《中国有嘻哈》，抖音在里面打了广告，当时它的用户数和知名度应该都还不怎么样。直到又过了几个月，好像突然就火了，周围人人谈抖音，但即使这样我还是没有用它，直到有一天别人想用我的手机玩儿，才不得不安装它。\n\n试玩儿之后，说几点它易让人上瘾的原因：\n\n​一、时长短，这样就能极大地降低成本，反正花不了多长时间，看就看了呗，不缺那几秒钟；\n\n二、音乐，轻快地伴奏或背景歌曲，能让人心情放松愉悦；\n\n三、好奇心，这是谁？在干什么？漂亮吗？帅吗？厉害吗？搞笑吗？\n\n四、使用体验佳，所有繁琐过程皆无，什么注册、登录、菜单选项、列表、标签，通通没有，上来就是内容，无需等待立即投入使用，且切换成本极低，不需要关闭，返回，点击选择（如果你想也可以），就只需要上下翻动，好看多看几遍，不好看翻过去看下一个，且播放流畅不卡顿。——正因为如此，你才会觉得自己好像没有花多长时间，但两个小时过去了。\n\n我说它不需要分析研究，其实上面几点就是。\n\n好用的产品，即处处为用户考虑，而不是为了自己商业目的而增加额外的东西，令用户讨厌，很少使用，甚至卸载。\n\n做产品这个事情，人们常常费力不讨好，自认为用户需要那个，需要这个，那样能让用户停留，这样能让用户注意，实际很多结果反馈那就是错的，都是产品设计者自己的一厢情愿，不知不觉就南辕北辙。\n\n把事情做复杂容易，做简单难，又简单又对更难，这点抖音做得极好。\n\n但是，它的产品做得再能吸引和留住用户，再流行，却不能改变它本身的娱乐属性，以及它单一的表现形式。\n\n换句话说，虽然它的产品制作方法论是优秀的，但不代表它有足够生命力。\n\n娱乐有很多形式，近些年，选秀和搞笑最热门，前者带来关注和话题，后者纯娱乐。\n\n综艺节目很早就有过流行，比如当年的《快乐大本营》，但鲜有几个能十分吸引眼球，让大家狂热追捧，直到超女打破僵局。\n\n第一届超女颇有席卷全民之势，有人拿超女总决赛和春晚相比较，万人空巷，这档节目将湖南卫视重新拉回到中国电视综艺界的舞台中央。\n\n随后，各大地方台甚至中央台开始争相推出选秀节目，比较经典和成功的有《中国达人秀》、《中国好声音》等，还有包括《喜剧总动员》、《欢乐喜剧人》之类的专门喜剧节目，后来，《奔跑吧兄弟》又将明星真人秀这种新型节目引入国内并且流行起来。\n\n说这么一大串，也远未列举完全，只是想说，娱乐的东西都是有生命周期的，且很短。举个最简单的例子，一个笑话，你听第一遍能把你笑得喘不过气，再回味一遍还觉得可乐，但让你接着听同样的笑话，或者同样套路的笑话听多次，你还那么乐？\n\n一种节目可以红一年，两年，三年，再多来几次，它的热度和关注度必然大幅下滑，收视率下滑怎么办，需要新的东西给予新的刺激。\n\n正因为太容易让人产生疲劳，太容易过气，所以那些电视人、娱乐人才会绞尽脑汁，变着法地推陈出新。\n\n节目如此，游戏如此，其他什么能够例外呢？不论形式怎样，本质不变。\n\n从数据上看，抖音貌似仍在高歌猛进，但我宁愿相信，它只是增长的速度比衰退更快而已，从周围人提及和使用它的频率就能看出，它的热度正快速消散。\n\n欲要毁灭，先要疯狂，这是事物的发展规律，更是人性。\n\n或许用不了太久，人们就会像当初说“抖音为什么这么火？”一样问“抖音为什么不火了？”，也会从问“你玩儿抖音吗？最近挺火的”到“现在谁还玩儿抖音，早换某某某了”。\n\n是不是很熟悉？\n\n如果我是抖音老板，我绝不会因当下的大好局面而得意忘形，而是早早想到危机来临的那一天。​\n\n\n\n\n\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"读书作文的奥妙","url":"/2018/05/10/what-is-good-article/","content":"\n>第一稿只泛谈了阅读，新增部分内容在文末。\n\n近两年读了几十本书，不同作者，不同内容，不同风格，也写了几十篇文章，尝试不同的方向和节奏。\n\n有些读得津津有味，意犹未尽，有些很难理解，近乎催眠，有些文思泉涌，有些举步维艰。\n\n所以时常会思考，我该读什么书?什么样的文章算好文章？在创作时该追求什么？\n\n这个问题怕是没人能给出确切答案。每个人对书籍、文章、作者等都会持不同的观点和态度，褒贬不一。常会出现这样的情况，别人都说好的书，自己怎么就看不出哪里好，甚至都看不懂，就好比人们习惯对新手批评，对名家赞美一样，都不够客观，是不可取的。\n\n阅读是个即时行为，也是有针对性的行为，是否值得读，读完之后会有什么感受或者收获，都是自己的事情。\n\n写作同样，倘若觉得自己水平不够，不被认可，想找到一个学习的榜样，去效仿他的写作方向或者手法，又会发现，古今中外，无数文人，各种文体、题材以及写作方式、节奏、语言习惯都会有，有的很刺激，有的很平实，有的很晦涩，有的很通俗，有的很枯燥，有的很有趣，有的很长，有的很短，有的开门见山，有的悬念重生。它们在各自的领域中有着一席之地，被世人予以很高的评价，却显得跟你毫无关系。\n\n从任一单一方面去做取舍和分优劣都会有失偏颇，如果只是一味去寻找那个自己可以效仿的对象，只会逐渐迷失自己，最后把初衷都弄丢，写出的东西也四不像。\n\n说到底，不论什么作品，都是出自作者之手，每位作者都有自己喜欢和擅长的东西，相应的，也有短板和无知，从内容到叙述方式皆如此，表现在作品上就是特点和个性。世界是包罗万象的，我们只能在有限的空间里小有作为。所以不论是阅读还是创作都不必苛求，不必贪婪，找到适合的，需要的，去挖掘，去探索，就好。\n\n（5月13号）\n# 新增部分：\n\n## 为什么读书？\n\n很多人会把读书和“学习、文艺”等相联系，现在，书、音乐、咖啡等也几乎成了书店的标配，更让人觉得它们应该专属于某类人，其实不然，书有很多种类，除了那些我们从来不爱看的“教科书”，还有散文、小说、历史、哲学、科普、动漫等等。\n\n有些人读书目的性很强，要么为了学习，提升专业知识，要么因为个人兴趣，倾向于读某一类。如果没有这两个前提，轻易不会读书。\n\n其实，世界是多元化的，人的大脑也是多元化的，哪类书籍我们都应该有所涉猎，不为研究，不求数量，甚至不求质量，拓展一下自己见识和情感的边界也好，一页页、一本本地读下去，就会有意想不到的收获，同时会为自己培养了阅读的习惯而感到庆幸，然后就会慢慢地找到一些更适合自己的读书方法和类别，数量和质量随之而来。\n\n## 为什么写文？\n\n除了不想看“教科书”，还有一项让人讨厌的任务就是写“日记”，说来惭愧，我认真写过的日记应该不超过10篇，第一篇特别认真，从头到尾很细致，篇幅也较大，但越往后越应付，甚至瞎编几句了事，说真的，我到现在都觉得那是一种无奈，而不是不可饶恕的错误。\n\n生活大多是重复的，如果每天都要写，很快就会无事可写，但现在很多人的困扰不在时间，现在给一些人一个星期甚至一个月，让他写篇文章出来都会显得很为难。他们的问题在于，不是没东西可写，也不是没有必需的文字能力，而是没有书写下来的欲望和动力，找不到理由去写。\n\n我更倾向于把写文章称作“记录”，学习某样东西的过程，去过的某个地方，克服的某个困难，看过的风景，遇到的人，有趣的事，或者自己对于人和事的思考，每个人的生活不一定是精彩的，不一定是光鲜的，不一定是充满乐趣和意义的，但一定都是漫长且厚重的，如果过一天算一天，玩过、疯过、赢过、痛过，只留下星星点点斑驳且易逝的记忆，就很可惜了，我们可以，也应该，为它留下点什么，让自己活得更明白，也可能给别人带来帮助。这样就有了一种“不为绩效，不为‘乐于分享’”的源动力，久而久之，就积累了一笔宝贵的财富。\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"假期香港两日游记","url":"/2018/04/30/holiday_hk_twoday/","content":"\n每年假期都想出去玩儿玩儿，自从五一假期变短之后，就去不了太远的地方，索性来个短程，广东周边已经去得差不多了，自从去年办了港澳通行证还没用过，那么香港就是个不错的选择了。\n\n去之前并不是很清楚那边有什么可以去和玩儿的，之前对那边最多的印象就是很多人去买东西，奶粉和iphone什么的，甚至有些人去过好几次了，一个景点都没去过，我是去旅游，只好自己查攻略，然后跟着感觉走了。\n\n最终选择：**迪士尼公园、维多利亚港**和**杜莎夫人蜡像馆**。\n\n过关起初是想选“福田口岸”，因为网上查有地铁可以直接过去（其实也还需要坐巴士），后来又查去迪士尼比较方便的是“皇岗口岸”，出境前买的八达通卡，过了之后坐的迪士尼直通巴士。\n\n## 迪士尼    \n\n​给五星。\n\n虽逢五一前夕，人不多不少，网上提前买的票，进门处出示二维码即可。\n\n不论是门口还是玩乐设施都没有排长队，最长的一次顶多半小时。\n\n园子不大，但厕所不少，每次去都有大量空位，不需等待。\n\n门票是通票，每个项目或者表演都直接进入，直接玩耍，超级方便。\n\n虽然说很多是亲子游什么的，但既然想去就没那么多讲究了，适合任何年龄段去，只要你能乐享其中就是值的。\n\n出去玩儿求的就是既好玩儿又方便快捷，以上几点，是我去过那么多旅游景点从没有过的绝佳体验，所以给五星。\n\n## 维多利亚港  \n\n这个就不评星了，实质上不能算景点了，就是个海港，为了既看到夜景，又看到日景，决定游完迪士尼直接去了，迪士尼出来之后乘坐地铁专线，到欣澳站转车去香港站。\n\n去之前网上看有人说坐地铁到中环出来就是维亚港，其实…..还有很远。所以出来还是坐公交较好，然后下车还要走几百米，经过维多利亚公园就到了。​\n\n​​有很多船只在那里停靠，后面和对面都有不少楼，实地看的话，感觉还可以，普通相机拍照就出不来很好的效果了，走一走，坐一坐，吹吹风就好了。\n\n当然，如果你想坐船从水上过一遍也是可以的，或许可以体验到另一番风景，我没有体验，就不做评价了。\n\n## 杜莎夫人蜡像馆     \n给四星，不给五星是留进步空间~\n\n几年前去过上海的蜡像馆，这次陪朋友来香港的，如果你问我心疼票钱吗？去之前是的，玩儿之后就觉得很值了。\n\n首先，这个馆的蜡像足够多，然后还有很多之前没见过的，比如：特朗普、习大大、金秀贤之类，有些即使以前看过，这里的也是不同的，所以，还是很值的~\n\n​来蜡像馆，其实就是来了太平山顶，这里基本是几合一的，蜡像馆和山顶集市、摩天台，全都在凌霄阁里面，蜡像馆在负一层，摩天台在顶层，其他楼层就跟商场差不多。​\n\n​我想你肯定关心怎么去，我去之前查的，有什么来回缆车的套票之类，其实没必要（可能更贵还要排长队），自己搜一个站点能坐15路巴士就好了，下山一样。我们当时是在金钟站坐的，这个不定，就是公交站。\n\n## 闲谈\n几个小tips：\n\n**签注**：深圳过关不分G签和L签了，我看网上还有很多送关服务和很多小伙伴问，我亲测的不用了哈，早就改了。\n\n**港币**：我们到回来之前都没有换港币，一直网上买票或者手机支付，但回来的巴士必须港币支付......所以，不论用不用得到，换两百左右港币是明智的，省得急用麻烦。另外香港消费真的贵，随便一个什么都几十上百港币。\n\n香港地方小，所以寸土寸金，酒店很贵，400以下只是床位，4、500的也很小，想住得好点，只能花大价钱，这也是很多人不愿留宿的原因。\n\n香港街道很窄，抬头看去，高楼林立的感觉很明显，也会感觉比较高，街道窄了连车都“瘦”很多，但开车的速度较快，感觉跟之前去的泰国类似，街上有很多双层巴士，每次看它们转弯都有点害怕，怕撞到自己或者翻车。\n\n好了，先啰嗦这么多，如果还有什么问题，可以再问我，虽然我知道的也不多...\n\n祝大家假期同样愉快！~​​​​​\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["游记"],"categories":["经历"]},{"title":"公众号三周年，一场马拉松式的洗礼","url":"/2018/04/25/idea_weekend_three_years/","content":"\n简单多元、共同成长，就是现在的“灵感周末”。\n\n2015年4月26号，我发出第一篇公众号文章，彼时我还不在腾讯，得知一位同行前辈在做公众号，就学他做，那时的我就像很多职场鲜肉一样，碰到一个“大牛”就想取经和模仿，谁不是因为一个简单的想法去开始一件事呢，现在想想还应该感谢他。\n\n最开始是没有信心的，难点有两个：\n\n1、没人关注，我发出去给谁看？\n\n2、需要长期坚持，我能做到么？\n\n有一句“名言”：梦想还是要有的，万一实现了呢？\n\n单纯比韧劲儿我是不怵谁的，但会是什么结果？并不知道。\n\n最初发的几篇文章都是我自己写的，我真的很想每篇文都自己写，当时也确实每周都会写一篇，但太耗精力，选题、做示例、截图、组织语言和结构、查资料验证论点，最后从头到尾地检查和调整，常常从早上弄到半夜，肩膀僵硬脖子疼，没过多久就坚持不下去。\n\n既然做不到每篇都自己写，那就一定要找到足够优质的文章来发，于是，我网罗各大社区、网站、团队博客、个人博客去寻找和筛选，这也是我后来做前端资源导航的诱因，这样一来，即使不是原创，也相当需要精力，所以，我没有追求一周发几篇或者天天发，只有周末才发，我的时间有保证了，文章才有保证，才能对读者负责。\n\n前面的两年多，公众号的名称叫“前端周末”，借着“前端”的光，粉丝增长速度还算可以，两年时间到了2000多，大有一路高歌猛进之势。\n\n2017年7月2日，经过反复思量，我决定转型，把公众号的名字由“前端周末”改成“灵感周末”。原因有三：\n\n一、做到两年的时候，我已不单单满足于跟大家分享前端领域的东西，还有更多关于职场、生活、情感、世界的东西，我经历过的，我见识过的，也想分享给大家，不想因为名字被限制住。\n\n二、我更期望更多人是因为这里的内容他们感兴趣而且值得看，才留下，不只是因为“前端”。\n\n三、往糟糕了说，即使将来“前端”这个工种可能没有了，不打着“前端”的旗号，它仍然具备存在的意义和价值，还能做下去。\n\n改名字是件高风险的事，我当然知道意味着什么，即使我做足了准备和解释，即使我每周继续发优质文章，依然阻挡不了部分读者离开的脚步。\n\n我纠结过，反思过，我做错了么？它遵从了我的内心，也没有亏待读者，就够了吧。\n\n不仅如此，我还做了几件看起来挺傻的事：不再分享朋友圈、不再在文章的前后写一些看似必要且友好的“导语”和“引语”、后台留言广告合作邀请全部拒绝、从没试图去大平台露脸提高曝光度。\n\n当一种事物存在感和活跃度很低的时候，多数情况下会逐渐消亡。“灵感周末”看似就是这样一种存在，但还好，它依然坚挺~\n\n三年来，我见证了太多的成与败，新号出现，旧号废弃，品牌大号一次又一次刷新粉丝记录，说没羡慕过是假的，但如果得失心过重，疲于攀比和追赶，就会迷失自我，且对已经获得的成就和快乐视而不见。\n\n我不愿刻意把它推到某种高度，也不想它成为第二个“谁”。从兴趣驱动，到欲望膨胀，到失望接踵而至，再到近乎无欲无求，盛名之下其实难副，我为自己依然能处于现在这样的状态感到庆幸，我能做的很有限，也就不必想得到多少，把有限的事情做好，足矣。\n\n三年了，它存在的意义不仅仅是用文章传播知识，还教会我怎样不断反思、调整和创新，灵感杂谈、行业新闻、职业思考、编程人生，它越来越丰富，希望带给大家的也越来越多，也已经成为我生活习惯的一部分，我享受着每一次创作、寻找、编排、发送的过程，就像是每周往玻璃瓶里丢一枚硬币，能不能派上用场没关系，它就是一份坚持，一种见证，一场洗礼。\n\n我相信，有人在我不知道的角落默默关注着它并从中受益。\n\n简单多元、共同成长，不仅和你一起探索前端，还会陪你一同经历风雨，就是现在的“灵感周末”。\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"谁是最惨的？","url":"/2018/04/18/who_is_pain/","content":"\n这个话题来自一个问题：[测试是不是整个开发环节中最惨的？](https://www.zhihu.com/question/271955146)而实际情况呢？\n\n不妨拿开发当中的设计和前端来举例子。\n\n##设计：\n拿到交互稿该怎么下手，使用什么风格，用什么素材，用什么元素，色值、饱和度、亮度、透明度、阴影，这些所有的东西怎么拼凑和搭配才能让自己满意，让产品经理满意，让老板满意？\n\n不满意怎么办？改、改、改…设计稿能一遍过只能靠佛祖保佑，也就是不可能，所以就有了终稿、终稿1、打死不改终稿、打死不改终稿1。\n\n身心俱疲，眼都要瞎，好不容易通过了，页面做出来，来来来，开发GG，你看看这个，我视觉稿是这样的，你怎么做成了这样？balabala…麻烦你尽快改哈。\n\n你怎么要求这么高，这么麻烦呢？\n\n不这样老板会说我没做好，会挑我毛病的，咱要追求细节，追求质量嘛，我有什么办法？\n\n##前端：\n开工前 设计出个稿子怎么那么慢呢？总共只有三天时间，都过两天了还没给我，我还有时间做吗？！\n\n过程中  我去，这么多东西，这么多效果怎么做啊？图层这么乱，导个图片都很麻烦啊，这个图压缩了之后还200K，搞那么炫酷用户打开很慢有意义吗？\n\n设计改多少次前端就改多少次，什么科学化、合理化、用户体验，代码写成什么样，都是自己的事，他们只看结果，才不管你经历了什么，也不管你有多少难处。\n\n##交工联调：\n报错，打不开，数据不对，状态不对，图片没出来，文案不对，机型不兼容…这里要面对的人包括且不限于领导、产品、设计、开发、测试、普通用户。\n\n所以，谁是最惨的，又有谁轻松呢？每个人都觉得自己苦逼，自己做的工作没有得到足够重视和体谅，似乎带着苦笑干活成了很多人的常态，时不时有人憋出内伤想不开。正所谓，家家有本难念的经。\n\n实际上，法律只会对犯法的人有惩罚，问责同样，工作中的压力来自各种问题和难题。通过提升技能，改进工作方式，加强沟通，汲取过往经验教训，逐渐地把工作完成得足够好，才是减少问题，让自己没那么惨的正解。​​​​\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"不宅怎样度过业余时间？","url":"/2018/04/15/how_to_use_freetime/","content":"\n这个话题的缘由是“程序员如何度过周末”，但我觉得对多数人都适用，所以把题目改了。​\n\n大家对程序员普遍的印象是宅男或者直男，我本身也是程序员，所以充分理解，原因大概如下：平时多是和代码打交道，代码这个东西，不会说话，且极讲求严谨，不论是哪种编程语言，稍微写错或者欠考虑，它就会找你麻烦，把你折腾的苦不堪言。我相信，不论是因为爱好还是高薪加入这个行业，都会不自觉地沉浸其中，学习知识，绞尽脑汁去实现效果和解决问题。\n\n这就给人们留下一个印象，程序员木讷、死脑筋、不善言辞、不会变通，进而衍生出“程序员思维”等等。\n\n昨天跟一个朋友聊天，他同样是个“躺尸患者”，不知怎么办才好。\n\n我说，**多数人都是想改变却不擅长改变的，一旦长时间处于某种状态，就不容易走出来。**\n\n我有过这样的经历，写个好玩儿的小程序，从头开始一点点地写，但又不会很顺利，一路拼拼凑凑，调调改改，一个小东西需要折腾很久，这个时候，你让我出去走走，出去玩玩儿？不存在的好吗！不把它弄出来我能停下？\n\n这就是编程的魅力和程序员的执着，本身不是坏事，可久而久之，这种**习惯从职业本身延伸到了生活**。人本来的业余时间就不多，每天晚上和周末（加个班连这些都没了），结果闲暇时间你还在搞那些停不下来的东西，就更没时间和精力去想别的事。再退一步说，你学习没那么努力和勤奋，根本不是在废寝忘食地敲代码，但除了写代码似乎就找不到别的想做又有意思、有意义的事了，对很多事都提不起兴趣，只好选择抱着电脑或手机耗时间。\n\n这种状态，和沉迷游戏几乎没有区别了，或者说，沉迷于任何一种事情都是沉迷，对人的身心健康都是不利的。\n\n换个角度想，工作，它只是生活的一部分，它占了时间的大部分，但也仍然只是一部分，不论是程序员，还是其他人，都可能陷入类似的困境中——**除了工作就不会生活了，除了挣钱就想不到值得做的事了**。\n\n回到原题，如何度过业余时间，我也是“病”过的，病愈之后的做法是**多看、多想、多走**。\n\n它们并不孤立，可以同时进行，看什么，看书、看访谈、看风景、看周围的人和事，想什么，职业、生活、爱人、朋友、家人，走去哪儿，哪儿都可以，去爬山、去公园、去海边、去书店，人多的地方热闹，人少的地方清净。\n\n不论选择哪个，就是要**找个途径更多地接触和了解外界**，你总能发现其中的美和惊喜，给你带来知识，帮你解开困惑，认识新朋友，看到有趣的事情，等等。它们会让你从生活的单调空虚感中走出来，感受到它的丰富和多彩，久而久之，便会增加我们经历的宽度和厚度，使它更充实，更饱满，而不仅仅是个只会干活的机器。\n\n\n\n\n\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"【UI开发大观】一份友好样式的缘起与归宿","url":"/2018/04/09/ui_develop_world04/","content":"\n前阵子写了篇文章，记录参加第四届CSS大会的见闻，里面有个话题——“我不想写CSS”，谁曾想，有同行抓住我就问——“我的确不想写页面，设计给的视觉稿里面很多字体大小和颜色，不胜其烦，关于多页面的样式，你们是怎么管理的呢？”\n\n真是前人挖坑，后人栽树~开个玩笑。\n\n这个问题没有标准答案，一个公司的不同部门，一个团队的不同个人，都会有不同看法和做法，所以，本文所述，仅代表我个人的经历和经验，试图给大家一个合理的方向。\n\n# 缘起\n\nCSS是一门略显尴尬的编程技术，通过选择器和属性的堆砌，就能让页面更加整齐和漂亮，你可以什么都不讲究，但是，什么都不讲究显然不是程序员的脾性，程序员向来追求“美”~所以，这个话题得先从设计说起。\n\n一个项目或者产品，外观设计到功能设计应该是一体的，样式主要负责外观。\n\n外观是一种基本的审美，每个人都有分辨美丑的能力，就是那种批量生产的建站公司都知道，颜色和风格需要跟站点分类相称，网页和网页之间的风格需要统一，一个logo，一种颜色，就是一款产品甚至一个公司的标志。\n\n所以，网页始于设计，那么从视觉到页面需要一个怎样的过程？\n\n# 审思\n\n有人喜欢先写结构后写样式，有人喜欢同时写，这看个人习惯，也看娴熟程度。\n\n但不论怎么写，最好都先进行审视：它是什么风格？产品，活动，介绍，游戏？\n\n这就决定了页面是静态元素居多，还是动态元素居多，是文案居多，还是图片居多，或者图文混排。\n\n然后在脑海中对其进行区域和类型划分：（示例）\n\n头部：导航和banner，或者logo和banner、slogan等。\n\n中部：介绍、资讯、产品等。\n\n底部：底部导航，或者版权信息、小提示、跳转链接、二维码等。\n\n粗分之后是细分，这里的细分是：\n\n1、公用部分——包括背景、边框、阴影等。\n\n2、同类元素——标题、正文、按钮、图片、图标。\n\n3、是否有交互和不同状态——展开/收起、弹出层、小动画、作废/过期/空/不可用状态。\n\n这样就有了规划样式的大概思路：Reset——公用样式——个性化样式。\n\n这里是要利用好样式表的层叠特性，以避免样式冲突，也避免为了修正错误无谓地增加权重。\n\n还有另外一个需要注意的问题，以怎样的策略进行命名？这个问题，看似头疼，可以回想一下，我们给它们归类是按什么分的呢？——视觉效果，所以，命名时依然如此就好，这样以来，更可读，也不会与内容紧密相关，提高了复用性。（某些情况下这样也会有隐患，暂时不讲）\n\n# 应变\n完成了前面的事情，问题大都解决了，但是，随着页面越来越多，样式文件也越来越大，会带来两个问题：\n\n- 文件加载速度变慢\n- 人工维护成本增高\n\n怎么办？分组。\n\n标准有两种：业务类型、文件类型。\n\n将不同业务的html、css、js、图片，都进行分拆，只共用全局通用的部分，相互之间不依赖、不影响，减小单个文件大小的同时，使每部分文件更易维护。\n\n这一次的分组，看起来是应需而变，但它又何尝不是跟“审思”的过程相辅相成？进行了这一步之后，第一步就不单单是根据视觉元素来规划，还要加上分组情况，比如，属于哪个功能/业务模块的，应该放到哪里，它是属于之前的某个大的文件，还是需要单独新建。\n\n# 封装\n\n分类完成之后，貌似还是不够，还可以做点什么呢？\n\n如果把一个网站比喻成一台机器，它就是由很多部件组成的，同样一种部件，可能在不同地方反复出现，可以作为组件被分出来。\n\n比如，我们现在抽离出来的组件有：按钮、弹窗、图标、表单、箭头等。\n\n组件的样式代码会被添加到公用代码文件里，这样的话，样式只要写一次，就可以到处使用。\n\n要特别注意的是，这些组件的命名是跟上下文无关的独立存在，这样不会跟任何特定项目产生牵连，还能够利用作用域进行特异化改造。\n\n组件分离了之后，还有什么可以分吗？答案是肯定的。\n\n# 粒度\n\n为什么还要分，其实到了这一步，才比较接近那位朋友提的问题，当文件和代码都已经组织得足够好，还会为什么而头疼呢？\n\n工程师最喜欢的是相同，而设计师喜欢制造不同。\n\n设计师：“这个字体能大一点吗？”“这几个字能突出一些吗？”“这里能不能加个圆角？\"\n\n你：“你就不能统一一下吗？这么多种我很难做啊！”\n\n**矛盾在哪里？**\n\n工程师有代码洁癖，想用最简洁干净的代码，写出高质量页面。\n设计师有创意欲望，在整齐划一的基本审美前提之下，还肩负着“特色”使命。\n\n- 都是白色界面，出现一个黄条，肯定就更能吸引眼球，用来放一些“警示/公告”之类；\n- 都是黑色字体，中间加个红色、蓝色或者橙色，就会让人明显注意特殊字眼；\n- 都是文字，有大号、中号和小号，就能增加层次感，也能帮助用户分出主次。\n   等等\n\n怎么办呢？举我们组为例：\n\n字体大小，有这么几种定义，超小、小号、正常、大号，超大，分别对应：10px、12px、14px、16px、18px。\n\n首先它们牵扯到的属性很少，或者所要完成的使命很单一。\n\n再者，可以用在你实在不知道该如何命名或者没必要占用一个类名的地方，如果把它们划归到具体模块或元素里面，每次重复书写，还要多个类名，还要多层嵌套选择器，就显得得不偿失，因为你只是控制一个很通用的属性，却新加了两个需要维护的地方。\n\n同理：一像素边框、水平垂直居中、不同字体颜色、清除浮动、flex布局、文字溢出省略等等，都可以抽离单独的类来解决。\n\n关于这种方法，知乎有个话题专门讨论，https://www.zhihu.com/question/22110291 有人反对，有人赞同。\n\n有人说难维护，事实上，你可能写了就没改过；\n\n有人说背离了结构和样式分离，实际上它又恰恰利用了表现和内容分离。\n\n忽略一种方法的优点或者故意放大一种方法的缺点去否定它，就是为了否定而否定，是没有积极意义的。\n\n我还是搬出那句话，脱离实际的最佳实践就是耍流氓。在谈设计模式的时候我就分享过，只用和不用某一种都是武断的，应该博采众长。\n\n根据自身业务的代码积累、迭代，进行不同粒度的样式抽离，是非常明智的做法。当然，还可以使用预处理器来进行更加通用和灵活的改进，这里不多说。\n\n所以，最终的结论是：\n\n**从源头开始规范化，在视觉素材的基础上进行布局和规划，根据业务和功能的不同对文件进行分组，针对不同频次和范围的规则去划分粒度，应用合理的命名方法减少联动影响。**\n\n遵循此法，便能写出一份还不错的样式文件吧。\n\n时间空间有限，不能涵盖所有情况，有问题再具体交流。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["UI开发大观"]},{"title":"侧面还原第四届中国CSS开发者大会","url":"/2018/04/07/xiamen_css_2018/","content":"\n>侧面还原的意思是，我既不是组织者，也不是分享嘉宾，只是一棵无人知晓的小草，所以，发挥空间比较大，嗯~\n\n得知本届大会启动，是欲波在朋友圈发的动态，因为职业原因，每年我最期待的行业会议就两个——“CSS开发者大会”和“前端体验大会（前身是Webrebuild）”，一个跟我的工作紧密相关，另一个是由我的老部门同事主办的，那是一群很低调，但有追求、有创意、有格调的人，出自他们之手的东西，几乎从不让人失望。除二者之外，当然也有质量比较高的会议，我参加的不多，不做评论。\n\n说回本届大会，去年底的时候我就在奇怪，怎么没有第四届了呢？正如欲波自己说的那样，人的精力有限，他去年忙于别的事物无法抽身出来，只好推到今年初。\n\n会议地址在厦门文化艺术中心的一家影院，不是很起眼，有人吐槽说不好找，会场上欲波也说，只要开了导航或者路上随便问一个人，就没那么难找。他向来是这样的风格，比较直接，但说的在理，不过作为参会者，也想说，如果在主要路口立个宣传海报、指示箭头之类的，体验就会好很多了～之前在广州的第三届做得就挺好。\n\n这是我第一次参加在影院的会议，感觉蛮特别的，每次聚在一起的人都差不多，认识的都是明星脸，勾三股四、大漠、贺师俊之类，这次多了一丝、顾轶灵和张鑫旭，不认识的还是不认识～张老师还在现场办起了签售会，各种签名合影，俨然一幅综艺明星范。\n\n很难得这种场合，大家都不认识，不是为了应付和利益，却彼此很懂对方。\n\n铺垫完毕，开始正题。\n\n## 一、Building Scalable Components    \n\n第一位分享嘉宾是个中文不太好的新加坡人，Zell Liew。\n\n讲CSS怎样写更干净、可扩展，怎样做组件化。  \n\n以自己学习和工作过程中遇到的问题为主线一路往前，比如：适配方法、相对字体大小、窗口缩放、窗体单位，还有媒体查询打断点。\n\n我其实挺想听他讲打断点的方法和技巧，大家都知道这个痛点，无论是用比例还是具体数字，都可能碰到某些机型出问题的情况，不过，他就举了个简单的例子，没有细说…\n\n他还有讲到使用基类和扩展类制作不同按钮。网页当中看似不同内容，可用相同结构和不同样式加以区分，减少重复代码量，提高复用性。\n\n整体来说，逻辑比较清晰，但不够深入，介绍了一些常规的，正常情况下的方法，未涉及可能存在的“坑”。（或许是时间关系）\n\n另外，感觉他把中文换成英文听起来就更高端些了？ 逃~\n\n## 二、CSS Houdini 初探\n\n勾股这个人，我还是很钦佩的，我跟他没有过交流，但一直在关注，就此次大会来说，从内容和演讲效果，他都能排在第一位。\n\nHoudini这个东西，相信不少关注行业动态的人早有耳闻，因为一旦出现新事物都会传播特别快，但现场知道的人还是很少...\n\n勾股把它译成“胡迪尼”，包括后面把“One more thing”音译成“玩毛线”，不得不说，演讲中加入这些小幽默效果还是不错的。\n\n他讲的很多东西暂时都用不上，但却没有感觉假大空，而是一种期盼（能快点实现就好啦~）。总体概括有以下几点：\n\n一、样式脚本化，能够实现更便捷和灵活控制，当然，这里指的不是style属性改变。\n\n二、创建新属性和值，能够设置它可以做什么，不能做什么，相当于把定义CSS的这项工作部分放权给开发者，像定义组件接口一样去定义你需要的样子。\n\n三、CSS变量，应用倒是没有细说，提到它的一个弊端是不支持过渡和动画，可能即将被第二点提到的功能更强大的东西取代。\n\n四、图片变成画布，这个还是蛮大胆的，相当于，把现在只能设置成一个静态图案或图形的东西激活了，把一块画板换成了一块屏幕，Canvas能干什么，它就能干什么，赋予了更强的灵活性和创意空间。\n\n五、更新、更强大的布局方法。现场无法给出demo，但可想象，它能让人更轻松定义瀑布流之类，甚至更杂乱无章的布局，能够打破现存单调的布局模式，呈现更多样化的网页形式。\n\n当然，对未来的畅想还不止于此，盒模型可能被重新定义，动画的控制比现在更灵活，浏览器能够精确解析字大小等等，都是值得期待的。\n\n整体感觉，将CSS更加编程化，更复杂，也更强大。演讲过程轻快流畅，让人很舒服，各种demo时常引得周围的人次次惊呼：哇，好厉害。\n\n## 三、组件化开发样式API    \n\n知乎上常看到顾轶灵...回答的问题，属于接近规范的那类人~\n\n他从很古老的开发方式开始回顾，一直到现在：标签自带样式——内嵌样式——CSS的诞生——结构、表现、行为分离——组件化、模块化。\n\n讲到CSS这门语言本身的缺陷，从而会出现行业中广泛流传的那些方法论和设计模式，同样也聊到了CSS IN JS，CSS Modules，自定义属性、新的CSS选择器，以及Houdini。\n\n整体相当于发展历史回顾以及对未来的展望，理论较多，代码和demo偏少，细节给人的印象并不深，但如果仔细回味会有收获。\n\n## 四、领导，我不想写CSS   \n\n张鑫旭这个人，我想不必过多介绍了，从第一次看他博客就觉得怎么还有人在用这么low的界面？但还别说，绝大多数比他博客好看的，流量都大不如他，为什么呢？说到底，博客还是内容为王的，人家数年如一日地产出优质文章，有这么多回报也是应该的，这不，刚进门就看到他在那里签名售书，整个前端圈，到现在为止也没有出现过这个情况。\n\n但是，我却偏偏是要给他挑毛病的。\n\n不想写CSS，到底是怎么个不想法。\n\n哦，原来是不想写页面，所以，有人做了设计稿转网页的工具，方便是方便，但设计的灵活性和特异性做不到，无法做到人工那样细致和完善。\n\n然后怎么办呢，有人想到了把常用代码段，做成固定模块，可组装，可编辑，使用是时候按需拼接，这的确是个好方案，我们组正在使用中。\n\n那还要怎样缓解“难受”呢？其实在样式里面，我们也是常用到封装的，把一个具备某种功能的代码块，单独定义成一个类，称为“原子类”，那么，原子类再进一步，我们可以把它做成自定义标签，去替代div，但它也有个局限，只适用于长尾区域。\n\n有其他方法么，有，使用预处理器进行偷懒，写一些带参数的函数，一次书写，反复使用。\n\n代码层面说完了，还有么？我们写代码能更快些么？\n\n当然可以，编辑器本身会自带属性提示，而且我们可以自定义代码段，只需要敲两个字母，就能出来一大段代码。\n\n最后的最后，他介绍了一个脚本，叫Qcss，说得很好用，不过初看是让人有些头大的，实用性也有待考量。\n\n上面这些，我基本上是按照他的调调描述完了。\n\n我......为什么说要给他挑毛病，你们懂了？不懂的我也不啰嗦哈，你觉得有收获就好~\n\n## 五、探索动效开发模式    \n\n这个话题来自大漠，大漠的网站，是前端圈几大名站之一，他对技术的研究算得上勤奋，毕竟一把年纪，哈哈。\n\n据他所说，最近这一年他也没怎么写CSS了，比较多的在做各种动效，从他网站上也看得出，很多JS的文章。（说好的一起走下去呢）\n\n这次的话题，分享了几种不同类型的动画及场景、用途，比如：引流 、氛围 、富交互作用、展示、互动，分别适用的动画形式为：路径、帧、timeline、视频、小游戏。\n\n然后简介了一下动效技术的发展历程，虽然随着CSS3的推出，做动画比以前多了一种简便的方法，但在现有环境下，CSS驱动的动画越来越无法满足需求，故而需要转换到使用JS驱动，比如：精灵动画、路径动画等。\n\n既然开发方式不同了，那么流程和工具都要做出相应改变，于是他给出了这么一个思路：使用设计软件转出json，这样就很方便用JS去控制DOM，甚至于，走到这一步仍然不是很满意，还想到了使用数据驱动，动画环节的大部分工作都交给设计师搞定。\n\n除了传统动画，可使用的动画形式随着技术的更迭和丰富会有更多，比如：AR、陀螺仪、Webgl、各种传感器等。\n\n整体看，首先要有好的动画创意和设计意图，然后找到适合运用的技术，再工具化，提高实现质量，降低制作成本，提高效率。\n\n## 六、面向设计的CSS  \n\n对一丝最初的了解，还是那篇那些年，那时刚从业不久，浮动、居中，这一直是前端圈经久不衰的话题，一看到有什么好文章，或者谁曝光度比较高，就觉得肯定是大牛，说的话肯定有道理，也时不时地去看他的言论和文章，有过两次问题请教。\n\n所以，我对他这次的演讲话题和内容还是相当期待的。\n\n他首先进行了一番调侃式的自我介绍，接着，他讲了CSS书写方式的演变历程，从裸写到预处理器，到Postcss，最后还是说道CSS IN JS。\n\n当然，这些东西放到现在都不再新鲜，已经是大家耳熟能详的，就光会议当天，也都有人已经讲过了，难免让人觉得重复和乏味，但这些都还没到他要讲的正题。\n\n他说，CSS本来是用来做什么的呢？还原设计，那么面向设计，才是需要尽最大努力做好的事情。\n\n这句话说得很在理，接下来，他列了CSS开发者需要具备的三个力：生长力、创造力、灵动力，然后举了三个相关的例子来说明。（具体是什么例子，大家可以看PPT）\n\n例子本身，可以说具备一定的创新和启发性，但很多人没想到的是，三个例子讲完就没了，戛然而止。\n\n另外，在之后的提问环节，他的回答也是差强人意，比如：\n\n问：响应式和自适应的区别？\n\n答：翻译的不同。\n\n问：是运用js去计算进行适配更好，还是使用VW和VH更好？\n\n答：程序员都有洁癖，能用样式解决的，干嘛要引入一个脚本呢。\n\n欲波听完之后都忍不住说：你就这样回答完了？\n\n主要论点：怎样运用技术能不妥协求次，而是高度还原设计，提升体验。\n\n但不足的是，速度稍快，内容稍薄，后半段讲述的才是主要内容，却以三个小例子就“草草”结束，轻松有余，而严肃不足，像欲波说的那样，本可以期待更多内容但没有看到。\n\n## 七、聊聊CSS中的黑科技   \n\n聊这个话题的，是我厂互娱的一位同事，标题是“黑科技”，但在我看来并不黑，而是用来实现某种看似很难做到的效果的思路和技术选型问题。\n\n一个动画，是一棵树，从很小的枝叶慢慢动态长大的过程。\n\n想用Canvas分层绘制，觉得生硬不自然，想用视频，但修改成本高，文件过大，最后，选用了CSS animation+SVG的线条动画来搞定，然后介绍了两个属性，和实现动画的方法，这是几乎每个人都可能有的经历。\n\n接下来，他又提到了很经典的一个div实现某某效果，当然，需要结合伪元素、阴影、渐变、滤镜等技术，还是那个老生常谈，技术只是工具，最神奇的东西从来不在技术，而在创意和思维，现在这些看起来很平常的东西，功劳应该归功于第一个吃螃蟹的人，他才是真的了不起。\n\n整个分享的最高潮部分，是最后现场所写的一个demo，是什么呢？PPT里面没有，这里先卖个关子，我只说，可能过段时间，本届大会的很多内容会被遗忘，这个就会被记住，甚至会后都有不少人忍不住重新敲打了一遍来向本届大会致敬，哈哈，留这么多悬念我也是太坏了，感兴趣的可以再找我~\n\n## 八、在线图像编辑器中的CSS黑魔法  \n\n刚走了个黑科技，又来了个黑魔法。\n\n说实话，内容本身并没有给我太大的惊喜，使用渐变，文字描边，镂空遮罩，这些可能多数人都搞过。\n\n属于实现特殊效果的小技巧，但他通过这些东西向大家传达的理念我还是认同的，充分利用技术和技巧去武装自己，使自己面对各种需求的时候都能更从容。\n\n最后，他还比较取巧的，把本届大会当做素材，讲了个问题，什么问题呢？——一个模版多种样式。\n\n在结构不变的情况下，怎么做到，不同背景、不同字体颜色、不同配图、不同展示顺序。\n\n听起来是否耳熟呢？是的，作者很自然地引出了那个经典案例——CSS禅意花园。\n\n但让我大感意外的是，现场居然还有人不知道这个，这就有点让人搞不懂了，现在的前端新人学习都看啥？信息越多，精力越被分散，视野越窄了吗？\n\n## 总结\n\n整体感觉，优化、效率、新事物。\n\n但不禁又引起我另外的思考，当这个圈子的话题被讲的越来越多，自适应、布局、单位、好玩儿又有用的属性、设计模式、组件化、快捷编码、还原设计，那么还未讲到的就越来越少，以后还讲什么？\n\n稍微想想，又有了答案，人们参会无非两个目的，学新知识和获得解决问题的方案。先不说他们到底有没有讲完，即使讲了，有一部分也是点到为止，并未深挖。所以，可以从不同纬度去考量，可以在同一个知识点上进一步拓展好的实践方法，以及实际项目中所遇到问题的解决方案，从知识型向问题型转变。比如这一届，好几个话题都让人意犹未尽，可以下次再续。\n\n虽然我给它挑了一些刺儿，内容重复，层次和充实度不够，但总的看来，正如欲波所说，收获肯定比失望更多，哪怕仅有五分钟的内容是有帮助，有启发的，那就值得，听君一席话，胜读十年书嘛。\n\n另外，很明显感觉到，大家都在努力挖掘技术的潜力，以及很积极的实践新技术，不说别的，就没见几段代码是在“老老实实”地写CSS，都是预处理器、变量之类用的很普遍。\n\n举办一届这样的全国性会议很不容易，记得大学时组办一个系的社团活动都不易，这个就更加劳心劳力了。努力不等于优秀，但不努力，就没有变优秀的可能。在这个人人顾己不言他的社会，能有一帮这样的人，还在组织对大家、对行业有益的事，真的难能可贵，所以，我很直接地指出一些问题，是真心希望，在大家的付出和热情之下，它能够更好，也的确代表我本人，再次对所有付出辛劳的人说声，感谢！\n\n期待更好的下一届！\n\n因为博客上传图片太繁琐，所以，这里是文字版，想看完整版可以[点击这里](https://zhuanlan.zhihu.com/p/35347680)。\n\n","tags":["分享交流"],"categories":["分享交流"]},{"title":"我们被蚕食的意志力","url":"/2018/03/25/hold_yourself/","content":"\n​早上起来感觉精神不好，索性运动一把，平时都是晚上运动，改成早上，就全当醒神。\n\n练完坐在沙发上，扭头看了一眼书架，看到史铁生的《病隙碎笔》，买来挺久了，一直没看完，就拿下来看上几页。\n\n说来惭愧，我有个不好的习惯，喜欢买书，纸质也好，电子也好，买了看不完又买，书架上琳琅满目，实际看完只是很少一部分。\n\n然后我会想，我为什么做不到把它看完呢，其实据我的经验，一本300页左右的书，如果集中精力读，两个多小时就能读完，这是比较适中的速度，既不咬文嚼字，又不走马观花。\n\n两个小时，这是多数人都能轻松抽出的时间。\n\n但事实是，大部分人，每周用来读书的时间是小于一个小时的，甚至很多人是零，对书不感冒，从不碰。\n\n这跟我有一天和朋友聊的话题也有关，你是否愿意，且是否能够管理好自己的时间和精力，去做对自己有益的事。\n\n他说，自己很迷茫，为自己三五年后的前途担忧，想提升自己的核心竞争力，但因为没有一个明确目标，不想浪费精力。\n\n这便是问题所在，我跟他举了个例子，如果我告诉你，做一件事能稳赚500万，肯定会很多人抢着干，但是我告诉不了你，我只能说，你这次可能不会有什么收益，不过如果长期坚持下去就会有。\n\n那么，还会有人愿意做么？怕是极少的。\n\n人们已经习惯于接受现成的东西，也喜欢去直接得到某些东西，种瓜之前就要知道那是西瓜子，而且肯定能长出西瓜，而不愿意在不确定的情况下尝试种它。\n\n殊不知，就是没人能那么细致体贴的帮你，很多东西需要自己努力、尝试以及坚持，才能提高做选择的判断力，最终找到正确方向。\n\n年少的时候，我就经历过类似的事情，我是个个性偏保守内向的人，有人给我安排什么，我才放心地做，其他时候什么都不做，再看另一些比较大胆调皮的孩子呢？老师或者家长没让他们做的事，他也做得很来劲，虽然很多事后证明是会闯祸、会失败或者没有意义，但十件里面至少有三件是很棒的，五件是能锻炼自己的，那么它们就是有价值的，更重要的是，他很大程度上丰富了自己的生活，结识了新朋友，有更多展示自己的机会，多了很多成就和快乐，不论从哪方面讲，他都比我强很多。\n\n这和时下一些人的“迷茫”有什么区别呢？为了确保利益最大化，而格外珍惜自己的时间，却束缚住手脚啥都没去做，结果就是啥都没得到！\n\n说得很严重吗？这就是事实。\n\n说到这了，就再多说一点，现如今很火的东西，短视频。之前就有很多人说，新闻，微博，知乎，游戏，会占用大家很多时间，现在又有新成员加入，而且多数用户的评价是“根本停不下来”。\n\n互联网大佬们早就说过，他们所争抢的，从市场，变成了用户的时间，app的选择有很多，我就是希望你用我的产品，而且越久越好。\n\n结合我前面说的，你稍微思考一下，会觉得这是个多可怕的事情——我们最需要的是时间，而商家就要利用人的弱点或者享乐需求去占有我们的时间。\n\n可能有人说，没人逼你用，没人逼你花时间啊，但事实是，很多人已经控制不了自己，这才是问题。\n\n所以，衷心希望，互联网形态，能够回归到真正为“人”、为社会，提供“优质内容”的服务，而不是纯粹为了用户数和活跃率而麻痹自己，不择手段。也希望广大用户，不要让自己精力被娱乐打散，被无谓的等待或纠结消耗，抽更多时间去做有益的尝试，去做一些实质的，能为自己的生活或者人生产生价值的事情才好。​​​​\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"择势而行，种因得果","url":"/2018/02/04/choose_result/","content":"\n​几年前，在一档招聘节目上，一位年入十几亿的网店达人出现，惊艳全场，他说，这是个娱乐的时代。现场的诸多老板表示一致认同和看好，觉得小伙子有想法，有见地，有眼光。毕竟，他取得了最直接也很具说服力的成功，赚钱。\n\n这里的眼光，说白了，就是获取利益的有效方法。\n\n直到今天，这种趋势仍未改变，甚至愈演愈烈——人们最喜欢做的事是娱乐，看新闻、看综艺、刷微博、玩游戏；最受欢迎的节目是娱乐节目，各种喜剧、真人秀，迎合了大众口味，也给了演员更多舞台；最受欢迎的人，是富有娱乐元素的人，要么会开玩笑，要么玩儿得开，要么长相有槽点。如果有人发出不同的声音，做着跟别人不同的事，就会被埋没，被贴标签，存在感极低。\n\n前一段时间，看许知远访谈李诞，他说，我工作那么累，下了班干嘛还要做严肃的事情？乐呵乐呵就好，开心最重要。这是时下很多人的想法，也成为他的价值观，于是，他的工作，就变成了给别人的业余时间提供乐子，大获成功。\n\n不仅网络上，现实中也有不少类似的娱乐场所，几个人在台上乱吼，唱一些简单的歌，讲着荤段子，一群人在台下应和，谈不上美感，也没有趣味，就是大家一起闹腾。\n\n不论我们是否愿意，每个人都难免成为那嘈杂纷乱中的一员。总有那么一会儿，头昏脑胀，百无聊赖，什么都不想干，只想寻求身心的放松，这个时候，娱乐的，甚至有些无聊的东西，就有了空间。\n\n就像每次醉酒之后总说下次不再喝，每次熬夜过后都说明天一定早睡一样，我们时常会反思，把时间和金钱花在那些事情上，值得吗？\n\n可能有人说，你又想带着有色眼镜去划分优劣，让大家选择高雅，远离低级趣味？\n\n当然不是，凡事无绝对，毒品用对了地方也是良药，制造娱乐和享受娱乐的人都没有错。但如果我们跳出自己沉浸其中的那个盒子，稍加思索，我们生活的主旨是什么？我们想成为怎样的人？是否已经本末倒置，娱乐过头？\n\n听过这样一个段子，晚上睡不着有什么好的解决方法？答案是，手机没电了就好。\n\n还有人说，一个人在洗手间能待多久，取决于那里是否能充电和是否有wifi。\n\n这里并不谈手机和互联网的危害，它本身并无害，只是，在不知不觉中，我们已经变得无法掌控自己的精力和时间，而是被外在的、不确定的、可以不断刺激我们神经的事物牵着鼻子走，说被绑架、被麻醉，都毫不为过。\n\n人问，你有心事吗？没有，你有烦恼吗？没有，你有压力吗？还是没有，那我们的头脑为什么时常空空的，没有任何想法？\n\n我们的人身是自由的，但精神已经被无意识地控制了，是涣散的。古语有云：业精于勤荒于嬉。“勤”，并不单是持之以恒地做事情，而是保持一个积极的精神状态。\n\n娱乐确实舒服，没有困难，不用动脑，它就像是个舒适的避难所，但同时，它也像放鞭炮一样，砰！只听得一声炸响，然后灰飞烟灭，剩一堆垃圾。\n\n这与我们的初衷是背道而驰的，每个人都想过得有意义，而不是一天又一天地产生时间垃圾。\n\n娱乐远构不成一个时代，它只是一种社会表象，是非常小的一个领域，我们有很多机会接触到娱乐之外的世界，但每当我们踏入那个领域之后，又难免陷入茫然和恐慌，因为太陌生了，它让我们感到距离感和无知，比如历史，比如绘画，比如哲学，比如任何职场之外、柴米油盐之外，同时又在你认知之外的东西，它们让我们望而却步，想去接近，却很快又退回到舒适区。\n\n我们习惯维护已知，怯于探索未知，我们习惯憧憬未来，而不去认识过去和把握现在，我们习惯去追求金钱本身，却少有想过，怎样通过提升自我价值、丰富生活内容，去获取更大的财富。\n\n世界的多元化是真实存在的，排解烦闷的方法实在很多，我们不应该拒绝，应该雅俗共赏，但这个时候，懂得区分和选择就显得尤为重要，信息爆炸，娱乐玩耍，乃当今之大势，我们就要顺从吗？答案是否定的。\n\n人常说，优秀的人需要耐得住寂寞，**所谓寂寞，不是一个人独处，而是要经得住来自娱乐和信息流的诱惑，坚持自我和外在的不同。**\n\n**严格自律很难，对谁都一样，但起码它该是常态，放纵娱乐该是偶然，现在却是相反。**\n\n我们选择哪条路，种下什么样的“因”，就会得到怎样的“果”，是做个随波逐流放纵自我的人，还是做个特立独行却踏踏实实的人，很值得我们思考。\n\n\n\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"张鑫旭和他的《CSS世界》","url":"/2018/01/28/css_world_thinking/","content":"\n​说到本书的作者，前端圈里没见过他的人有很多，但没读过他文章的人很少，他就是很多前端同行眼中的，张老师，张大神——张鑫旭（以下简称“张”）\n\n前一段时间，去参加“前端体验大会”，有一位张的同事作为分享嘉宾，当他在现场说张要出新书的时候，台下观众无不感到惊喜，那该是一本怎样的书？\n\n《CSS世界》，书名很霸气，甚至比之前那本被“魔法哥”称为十年来最好的《CSS揭秘》更胜一筹，但这本又与那本不同，它更接地气，没有《揭秘》那么多炫酷的技巧，却能让你发现很多比炫酷更实用的东西，或者，**利用好它自身的本领，不需要技巧就是最好的技巧**。\n\n为什么张这么受欢迎？还要从他的博客说起。\n\n首先一点，张的博客SEO做得很好，当然，或许是因为他的文章太多了，而他研究过的课题，也正是很多人要的，百度很容易搜到，所以，他每篇文章的点击量都很高，另外，不少人会收藏他的博客，不定期去看看，再加上微博推广，多种因素加在一起，张的博客流量，可能要赶上百万级用户的内容平台了，着实厉害。\n\n那么，这些只是“果”，“因”是什么？\n\n大家都知道，在这个信息爆炸的时代，标题不够吸引人，就很难有读者，但如果仅仅是标题党，只会让读者短暂停留，很快便会离开。\n\n张没有那样做，他不需要用标题吸引人，该是什么就是什么，但当你跟着他的文字和示例一句句、一段段读下去的时候，就不难发现：\n\n1、你要解决的难题，他已经解决了；\n\n2、不仅解决了，还考虑周全，包括兼容性、问题和优缺点；\n\n3、方法巧妙，你闻所未闻；\n\n4、就算你知道，也玩儿过demo，但你没能把它和实际场景相联系，而他做到了；\n\n5、更让你惊讶的是，他用的就是你自认为已经熟知的方法，但是，看了他的思路之后，你才恍然大悟，原来并不是你所认为的“如此而已”，而是大有学问。\n\n所以，无论是从张创作的文章数量也好，还是质量也好，在整个前端圈，少有人能与之媲美，久而久之，便形成了其鲜明的个人品牌和影响力，被大家所熟知。\n\n说了这么多，貌似都在夸赞张，并没提到《CSS世界》？非也。\n\n张博客文章的特点，也正是这本书的特点，你会发现它并没有涉及CSS3的内容，而是止于CSS2.1版本，但这并不影响他的精彩度和质量。\n\n比如：书中说，当使用了vertical－align:middle，却没能做到居中，怎么办？\n\n很多人会选择使用margin或者relative定位来解决，这两种方法有什么好处呢？简单粗暴，可控性强，能快速解决问题，但实际上是逃避了问题，它为什么没有居中，怎样才是更科学有效的方法？书中给出了他的一些思考和尝试。\n\n这本书既不是纯理论，也不是纯实践，是从**理论联系实践，实践回溯理论**。它不是按照死板的属性或字母顺序，也不是简单的罗列和解释，是有一个独立的介绍逻辑，张用他自己的风格介绍了“流、盒模型、内联元素、层叠、文本处理和元素装饰”等等，帮你一步步地理解CSS世界当中的那些点，怎么连成线，又如何相互联系，相互破坏，相互成就。\n\n虽然，书中还有一些显得“偏门”的属性和技巧，但更值得关注的，显然是那些实用的大多数，在吸收知识点的同时，学习其思想和方法，比如：\n\n1、利用页面元素本身的流动性做内容适应\n\n2、利用无依赖的绝对定位设置元素位置并减少其他未知影响\n\n3、利用层级的自然特性设置元素之间的层级关系，而不是依赖z-index\n\n以及大家都会遇到的：\n\n图片下方空隙问题、主容器右下方返回顶部按钮问题、模拟表单占位符问题、表格的表头固定内部不动的问题等等。\n\n不当拿来主义，**不止知其然，更知其所以然**，这就是张所具备的、刨根问底的钻研精神，这种精神使得张对CSS的认知走到了很多人的前面。用书中的一句话说：“只要了解透彻，说不定就可以变废为宝，化腐朽为神奇”。\n\n当然，这本书并不会涵盖你需要知道的所有知识和场景，也不能超越标准，更不能真正代替你解决问题，就像作者最后说的那样——“这本书热衷于挖掘CSS属性的潜力”，能帮你解开很多疑惑，也能激励你一起去挖掘CSS的宝藏。\n\n就在这篇文章完成之前没几天，传来一个好消息，《CSS世界》发行两周之后，已经迅速登上几大电商新书类榜首，且数次加印，我把它称为“一名IT人的胜利”。\n\n每个行业都需要有这样的人存在，也都需要更多优质的输出。\n\n记得《战狼2》在取得票房佳绩之初，就有这么一篇文章——《这个世界正在狠狠奖励认真的人》，**朝着正确的方向走，才会得到相应的回报**。\n\n张如是，他没有频繁地出现在大众面前，也没有加入什么社交群体，但就是有非常多的人知道他，了解他，喜欢他。\n\n如果你想知道，对事业的喜爱是什么样子，从哪些方面提升自己的技术，怎样成为一名优秀的前端，或许你能从他身上找到答案。","tags":["读后感"],"categories":["读后感"]},{"title":"纠结的“标准”观","url":"/2018/01/21/standard_thinking/","content":"\n微博上有一位前辈发了个链接，标准大全[链接](https://dynamis.github.io/webapi.link/)，不多想，先围观、转发，但同时有两种冲突的感觉相继出现：东西挺好！可是怎么用？\n\n## 历程\n\n究其原因，还得从我入行之初说起，对标准，我有过这样一个认知的过程：\n\n1、无知\n\n初学都是看电子书，在线文档，或者视频，不知标准的存在，也不知它在哪；\n\n2、懵懂\n\n学了一些属性和方法，能用，且顺手，但在某个时候突然有人跟你说，你那样用不对，不好，按标准应该这样用，不明觉厉，赶紧改正；\n\n3、升级\n\n知道了标准的好，想深入学习，却又发现文档众多而且全英文，头皮发麻，很难看得进去，就算看得进去，也不一定理解和记住，索性还是看同行们总结的中文版“最佳实践”，东一篇西一篇，貌似逐渐地出师，成为一个比菜鸟多懂一些的人。\n\n4、瓶颈\n\n慢慢会发现（大概两三年），不论是个人项目实践，还是网文“最佳实践”，几乎都快被挖光（而且不完全准确），毕竟我们的业务类型和项目类型短时间内不会发生变化，在有限场景下，能出现的问题就那么多，从而由像发现新大陆般求知若渴，变成千篇一律的不屑一顾——“又是说居中”、“又一篇最佳”、“又谈性能优化”，于是，瓶颈就来了，边界就来了。\n\n5、重视\n\n重新审视的意思，边界的出现并不可怕，但人总会不自觉地去排斥边界之外的东西，喜欢待在界线之内，一旦超出认知，就觉得是不必要的。\n\n一个简单的例子，html5标准推出之后，相比较之前，有很多语义化或者功能性的东西，但是，真正把它们应用到实际项目中的有多少呢？html标签超过100个，实际应用的超过20个吗？另外那么多没有用？当然不是。很多人不会在意“用了是不是对的”，而会去想“不用是不是可以”，既然可以，为什么用？徒增负担。\n\n但如果我们偶尔回过头，去重新审视一些东西，就会对自己的能力水平和知识本身有一个更加客观的认识——我所知道的并不是全部，甚至只是一小部分，我应该继续学习，去汲取营养，探索未知。\n\n## 如何探索？\n\n一个是**思维**，另一个就是**标准**。\n\n思维，你会时不时地看到，有一些大家都熟知，也常用的技术，自己都是规规矩矩地用，但别人想到了另外的用途，你才意识到它的其他可能，这个“其他”，要么是做出了不错的效果，要么是解决了棘手的问题。这就说明，你对它的掌握和理解还不够，再或者说，你没想过它有其他可能性，固步自封了；\n\n标准，因为标准的全面性、复杂性、理论性，甚至略枯燥，这就导致会去看标准的人很少，会细看的更少，于是，多数人习惯于通过非标准途径学习，这样带来的弊端是：\n\n1、有新的方法或者属性出来，你也不会及时更新自己的知识库，哪些可用，哪些废弃，你不知道；\n\n2、同一个属性，你只用了它一两个属性值，其他的不知道；\n\n3、你自认为熟练的那两个属性，也不知道它实现的原理是什么，它最适合什么场景，自己习惯的用法有什么问题。\n\n以上几点，都可以通过学习标准来适度弥补。\n\n## 小结\n\n再回到开头说到的感觉，东西挺好，但我们平时接收到的好东西太多了，一篇文章、一个代码库、一个资源导航，这种“大全”之类的东西，大家都见过不少，我自己也做过，但是，不论作者觉得它有多全面，多实用，总会有相当一部分人，把它往收藏夹里一丢，就很少打开看了，哪怕那里面有他需要的东西。\n\n所以，东西真的不在多，我们已经拥有的足够多了，投入时间和精力去学习和思考，才是正解，把它变成自己的东西，它才有价值，它的价值体现出来的时候，也是我们的价值得到提升的时候。共勉！\n\n","tags":["思考"],"categories":["思考"]},{"title":"2017，真实比想象更美","url":"/2018/01/02/2017_summary/","content":"\n早在一两个月前，我就在想，怎么回顾这一年，因为它太过特殊。\n\n多特殊？换一种说法，它很“胖”，很充实。而这种充实，大过金榜题名，也大过入职名企，它不是任何成绩能够替代，而是一种内在的自我突破。\n\n成人的世界里太多得失，知道什么是难得的，是值得的，才能更坚定地向前走。\n\n# 付出比回报重要，付出是自己的，回报是他人的。   \n- - -\n**公众号**\n\n我有一个维护了两年多的公众号，去年年底，粉丝量达到2000个，看起来还不错，但如果跟同样时长，同类公众号相比，少得可怜。\n\n我跟朋友开玩笑，17年底，目标粉丝数2000万。\n\n谁都知道不可能，更何况，我还在这一年进行了一次自我变革，将公众号由纯前端领域换成“职业+生活”，名字由“前端周末”改为“灵感周末”。\n\n改的时候，粉丝数是2410+，一改不要紧，净增长量再也没有超过20个，屡创新低，我必须承认自己的郁闷和挫败——那么用心的好文章，我那么坚持，你们不看，还取关？\n\n但我依然没有做出什么改变，甚至我都忘了有多久，我不再把公众号的文章分享到朋友圈，因为那里有很多外行朋友、亲人，那些文章对他们来说没半点用处，我不想频频烦扰他们的视线。\n\n不做推广，不求曝光，不求流量，这使我看起来是个很不称职的公众号运营者，但就像是我在12月31号晚上跟所有读者说的那样，我不会因此沮丧或放弃，我在挑选好的内容，给读者提供可能的帮助和启发，它是值得的，我就会用心做好。\n\n**简书创作**\n\n还是两年多以前，我开始了在简书的文字写作，为什么选择它？纯粹，简而美，彼时的动机有些功利，写文章，签约，出书，因为看到别人“很容易”就能成功。\n\n写到第十篇，将近5万字的时候，我给编辑投稿，想出电子书，经过了漫长的审稿期，被拒，说“不连贯、没有人物、没有主线”。\n\n我那又不是纯故事，也不是小说，哪来的这些，只好回头继续。\n\n我对自己文章的标准是，不为了写而写，不为了文采飚金句，不啰嗦，有所表达，流畅有美感，读过之后有感触和思考，或者感动，怎样都好，总之不能是白开水。\n\n我坚持着这些原则，也看着很多没有原则的人风生水起，语不惊人死不休。\n\n总有一种冲动，迎合，还是坚持？每篇文都会有这样的纠结，自始至终。\n\n但最终都选择了坚持，自己的就是自己的，如果为了吸引读者，吸引眼球，去改变文字形式和内容，那真的不是我。不是真实的我，得来的一切就都没有意义了，我也不会快乐。\n\n所以，到现在为止，四十多篇文，超过十八万字，粉丝和阅读都很少，更别提签约和出书，我却是快乐和欣慰的，用自己喜欢的文字写出了想表达的东西，足矣，其他留待时间去证明。\n\n**健身、读书**\n\n依然两年前，我把丢了多年的两件事捡了起来，锻炼身体和读书，有过经验的人都知道，这两者，都是说着容易，做起来超难，说锻炼，懒得动，说读书，翻不开。\n\n也许是因为不再那么年轻（20岁左右），会经常有点疲惫感，也会从镜子中实实在在地看到自己不复当年的青涩和青春无敌，所以，为保持年轻也好，为以后的健康也好，亦或纯粹锻炼意志力，我又开始了健身，很简单，俯卧撑，仰卧起坐，伸伸胳臂，踢踢腿，偶尔跑跑步，出出汗，结果就是，马上年满30的我，身体状态达到了前所未有的巅峰。\n\n我一直说自己喜欢读书，但说真的，大学时买的书，有些到现在还没读，我买书，就和女人买衣服一样，看到就想逛，逛了就想买，买了没看几下放那里，继续循环。\n\n现在我们最不缺的是什么？是信息，渠道太多，只要想看，永远看不完，最缺的是什么？是时间，是花时间做一些有意义的东西，比如学习、读书，甚至欣赏美景，甚至什么都不干，静坐思考。\n\n读书，就是一个成本很低，多方面受益的事情，可以是见识，可以是乐趣，可以是知识，也可以是思考，它能带给我们很多不同的世界，而这些，是其他事无法比拟的。\n\n只要稍作计算和比较，你就会明白时间都去哪儿了，我们的生活之美去哪儿了，我们的幽默感和创造力去哪儿了，也能找到让自己焦虑的原因——积累的少，成就感少，快乐就少，无聊就多，焦虑自然也就多。\n\n# 主动比等待重要，等待没有尽头，进一步有一步的惊喜。\n- - -\n从小到大，我们都有过很多想做又没有做的事，究其原因，无非是习惯了等待，等待时机，等待某个人，等待一份心情，时间长了，等待就成了习惯，哪怕早已不需再等，这时候，就要有股力量推着我们走出那一步。\n\n今年我就学会了主动，结果，一发不可收拾，因为结交了一些有趣的朋友，然后一起去做了很多疯狂的事，比如，去桂林旅游，圆了小学课本里的梦，去泰国旅游，圆了多年的出国梦，前几天又去厦门走了走，这一系列的事情所带来的深层次影响是，我慢慢地放开了套在自己内心的那道锁，不再是那个你问我做什么都会下意识选择说“不，算了吧”，而是想着“可以呀，为什么不？”，然后出发，呜呼爽哉！~\n\n不夸张地说，这一年，我过得比之前十年都更爽，因为坚持了真我，释放了自我，同时，也更淡定和坦然，没有想去挽留什么，因为没什么遗憾。\n\n没有遗憾，不是没有失败，也不是没有烦恼，而是所有的喜忧都已化作过往的财富，值得纪念和珍藏。\n\n我希望，2017没能实现的，2018能够实现，我会继续沿着对的方向努力走下去，希望你也是！\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"2019，我的阅读清单","url":"/2018/01/02/2019_read_list/","content":"\n\n\n《岛上书店》\n\n《1988，我想和这个世界谈谈》\n\n《一个陌生女人的来信》\n\n《追风筝的人》","tags":["总结"],"categories":["总结"]},{"title":"【UI开发大观】挑战的出现——从项目到自我","url":"/2017/12/20/ui_develop_world03/","content":"\n前段时间，我参与组织了一次分享会，谈论UI开发，主题是“革新”。\n\n近两年，已经很少有纯讨论UI开发的话题，都时兴“全栈”或“全端”，从招聘，到应聘，各种分享会，整个行业趋之若鹜。一时间，只懂UI开发或者只懂前端的人，都多少有些紧张和焦虑，特别是前者，不知哪天就可能要“拥抱变化”。\n\n有人说，要“一专多长”，也有人说，不要让职位成为束缚，艺多不压身。所以，没有去阻挡这个趋势的正确性和必要性。那我们到底要怎样？\n\n这次的话题并不是突然有感而发，而是思考良久，但会后我们在讨论问题的时候又引发了新的思考：\n\n> 每个任务之于我们的意义是什么，每个种类的页面会带给我们怎样的开发体验？每个工作阶段，我们有着怎样的经历和成长？\n\n所以，就此开题。\n\n## 做成，还是做好？\n有一件事我印象很深，在第一家公司的时候，缺人，经理让我到网上去找，碰到一个简历看起来还不错的。\n\n他很自信，说自己一般的页面都没问题，我问他，如果给他一个页面，他会怎么做，他说：\n\n> 用div，里面套个列表，加个浮动，下面一个边栏可以设置左浮动，右边来个有浮动，加个margin......\n\n寥寥数语，一个页面被他“做”完。\n\n我当时也是如此，设计师把稿子给过来，我就用我犀利的眼神，娴熟的技术，把页面的结构一一拆解，然后噼里啪啦地敲起来，要不了多久，框架就搭出来，再开始调细节，背景、边距、边框、字号、字体颜色之类，一个页面很快做出来，再拿下一个，如此重复。\n\n看似没什么问题，但**问题往往是未知的，也是积累出来的**。\n\n前阵子，朋友换工作，去面试，也考到一个类似的问题，他问我应该怎样答，我简单给出如下几点：\n\n-- 首先，跟设计师确认，提供的稿子是否完整，是否有遗漏和错误\n-- 再者，问询一下页面之间的逻辑关系，是否要根据不同用户或场景，有不同状态\n-- 然后，更具体的交互行为是怎样的\n-- 如果出现异常，比如页面打不开、列表为空、404、过期、作废等，要怎样处理\n-- 列实现优先级和整体项目规划、规范\n-- 代码的扩展性、复用性和灵活性\n-- 图片和代码的优化，以提高性能\n-- 充分的体验和测试，把bug风险降至最低\n\n**两者的区别在哪里？**\n\n两者的目的相同，输出页面，制作产品，但区别是：\n\n第一种，经不起挑战和推敲，稍有改动，可能就会破坏原有代码的结构和之前的规划；\n\n第二种，既能做到代码的健壮性和可维护性，又尽可能地从各种方面照顾用户体验。\n\n那么，怎样从只会写效果、做布局的简单人工，到达能够输出优秀作品的程度呢？\n\n## 从小到大\n\n**可读性、可维护性**\n\n从我工作当中的一次事故说起，那时刚毕业没多久，在一家创业公司做企业站，企业站的模式都是类似的，“头部、banner、产品列表、行业新闻、关于我们”，稿子拿来之后，一边切，一边敲，敲了半天，基本完成，满满的成就感，准备伸个懒腰下班吃饭，突然发现电脑右下角提示我“系统错误，文件被破坏”，从来没见过那样的提示，慌了，经理正好从我身边经过，他帮我把文件另存，然后关闭，后来发现另存一份也没有用了，大部分的代码都丢了，真心悲剧。\n\n我既不甘心又懊恼，只能再来一遍，但我并不想简单地重复之前的过程，毕竟已经做过一遍，就一边写一边想，怎样更清晰，更有条理，更便捷。（其实是为了早点下班~）\n\n功夫不负有心人，原先写了大半天的页面，几乎从零开始只写了一个多小时就让它回到原样。\n\n这个原样，只是看起来的原样，**页面还是那个页面，代码却是不同的代码**，模块更清晰，注释更详细易读，简单来说，就是“可读性和可维护性都更好”。\n\n引起我更多思考的是，之前我为什么不那样写？为什么要拿来急着做，从头到尾的简单堆砌，而不是稍加审视和规划？\n\n如果是小项目，这个问题还不明显，稍具规模的项目，它的必要性就显示出来，因为页面繁多，模块繁多，必须有组织和条理，并且，这种整理不是一蹴而就的，而是需要动态的，不定期的检查和整理。\n\n**适应性、可扩展性**\n\n第一次注意到这个问题时，我还不在腾讯，是一位腾讯的前辈想做个私人项目，项目需要做展示页面，他找到了我，我当然没怎么考虑就很荣幸地接受（就像现在的很多人看到大神就兴冲冲往上凑一个样~）。\n\n我十分认真且谨慎地做完，发给他，等他夸我，他的确夸了我两句，怕是出于客套，然后就跟我说，哪里使用的某个方法不够好，不够灵活之类，其中就提出，页面底部的容器最好不要定高，而是使用padding把整个区域撑起来，这样的话，就算需要改变里面的内容，或增、或减，也不会对布局的视觉效果产生破坏性影响。\n\n看似很简单且随意的一句话，在当时却像一根针一样刺破了我的固有思维——**原来不是严格按照设计稿去精准实现才是最好。**\n\n以上只是举个简单的例子，真实的情形远不止于此，在大型项目里，甚至是某些小型项目，需求产生变动的可能性以及使用场景的不确定性，都会给我们造成一次次“打击”，比如说：\n\n1、一个容器，你做的是容纳3个字或者5个字的情况，真正拉取数据的时候，它可能是10个字，结果是怎样，溢出？换行？还是截断处理？\n\n2、一个tab结构，设计的时候是有两项，做着做着，突然说要再加一项或者两项，如果你当时严格按照两项去做了，这个时候不仅要改结构，还要改样式。\n\n3、两个水平的元素需要垂直居中，你会用什么方法？position？vertical-align？margin？还是...如果有好几个元素大小不一怎么办？如果容器高度改变了怎么办？\n\n暂举以上三例，有经验或者勤于总结思考的人，能够轻松应对以上三个问题，情况怎么变，代码都不需要改动，或者仅仅少量改动。\n\n**模块化**\n\n这要从一次项目沟通说起，当时我还是一名外包，我们三个外包和其他人在不同的地方办公（这是想说明，团队对个人的影响），有一次，我需要和那边的同事合作项目，同事看了我的代码之后，又是一顿挑毛病，当然，挑得我心服口服。\n\n其中一个就是，我在模块里面命名的类，太过通用，比如：info、txt，这样以来，就很容易跟外面更大作用域或者通用样式相冲突，也容易被另外的样式覆盖，命名一时爽，随时就掉坑。\n\n换种做法就会更好，比如：intro-txt或者 intro txt，这两种做法的目的也是不同的，intro-txt是个全新的类，样式要重新定义（标签定义的样式和可继承的除外），而intro txt，可能是对原有txt样式进行修改或者补充，比如，改大小、改颜色等。\n\nBEM不就是为此类问题而生？\n\n**弱耦合**\n\n这是另一个注意点，还是举我跟同事的例子，有一次，一个项目涉及几个页面，页面中有几个数字，代表用户的收益，可能涨，可能跌，涨是红色，跌是绿色，在写第一个模块的时候，我把它定义在了模块内，后来写到第二个，依然没问题，等我把做完的页面给到同事之后，他就跟我说，你能不能把颜色的样式抽出来？因为总共好几个地方用到，抽出来的话，绿色我都加“green”，红色我都加“red”，这样就方便很多了。\n\n相信大家都遇到过类似情况，拿到页面就开始写，数量少的时候还不明显，当项目越来越大就会发现，某些模块的某些属性是一样的，比如：标题、背景、边框、字体的颜色和大小，甚至是间距，相当多的重复，那么这些东西，就不适合被定义在任何一个具体的模块里，会造成代码的重复书写以至大量冗余，维护起来也是相当困难，适当地提取出来，不仅更清晰，还利于维护和复用。\n\nOOCSS和Meta CSS不正是为此而生？\n\n**组件化**\n\n前面几点，似乎都是在样式层面对怎样编码更好进行讨论，实际上，每种思想都不能适用所有情况，因地制宜才是正解。\n\n当我们把页面从大看小，分成模块，甚至细化到颗粒之后，似乎，还面临着别的问题，可以走一些回头路。\n\n前面说了，不要太固化，要灵活，那么，是否有些模块它就是十分固化，特点鲜明，变动概率极小，又极具复用性？\n\n答案是肯定的，比如：标题、按钮、表单、弹窗等等，这些东西，在大项目中一般都会有着一致性的设计，被复用的几率非常高，它们可以不属于任何页面和模块，而是单独抽离出来，每次使用，只需要直接引用，对其内容进行微调即可，比如，文案、宽高、颜色等，这样以来，再有相同的东西，就不需要走UI开发阶段，直接进入下一阶段了。\n\n上面这些名词，你可能都听过，但如果没有足够的经验和思考，就会被自己暂时学到或做过的东西给局限住，产生一种“这样比较好么？可是为什么？”的想法，这里跟大家简要分析一下“为什么”。\n\n当然，任何一种方法或者方式都被人推崇过，也被人吐槽过，我认为，**站在任何单一立场去反对另一立场都是在耍流氓~**\n\n它们到底好不好，优势在哪里，劣势又在哪里，我们都可以客观看待，针对选用即可。\n\n**工程化——贯穿始终，相得益彰**\n\n一个怎样的项目，可以将其称为工程？一间房不算，一个石柱更不算，但一个建筑群，就可以。——**量大**\n\n如果它不只是房子，旁边还有道路、停车场、花园等等，就不能按照一个方法去对待所有事情——**多样化**\n\n这么多事情，不事先做评估和规划，材料不够了，房子把路占了，房子盖歪了，怎么办？——**全局规划**\n\n一个人干吗，要么累到吐血也搞不定，要么等到猴年马月。——**团队**\n\n都手动去做，砖一块块搬，楼爬上去？——**工具**\n\n每栋楼占地多少，每种户型房子面积多大，怎么布局，甚至细化到每扇门的宽高。——**规范化**\n\n厨卫用品、客厅用品、卧室用品，需要重新再造么？不需要。——**组件化**\n\n别人，或者我们自己，有没有过类似的经验和成熟方案，可以拿来借鉴，能适用于现在的项目，能避免问题和提高效率的？——**设计模式**\n\n以上几点，应该能够囊括一个项目需要考虑的大部分层面，也是多数人的学习和实践历程，每一个词汇你可能都熟悉，也都认为是合理的，但有没有过一个系统性认识？\n\n## 小结\n\n很多人认为前端门槛低，薪水高，就越来越多的人涌入，也看到很多人问“怎么学前端，才能跟某人一样厉害，一个怎样水平的前端能够拿高薪”等，个人认为，作为一项事业，需要长期从事且不断进步，才能有所建树，所以，首先应出于兴趣，而不是利益驱使，它能给自己带来成就感和愉悦感，能让自己不断精进去把产品做得更好，才是好的。\n\n再谈“瓶颈”，每个人都会碰到这个问题，它可能出现在人身上，可能是技术，可能是业务，多数人离技术层面的瓶颈还有距离，大部分是在人，如若浅尝辄止，略有所成，便觉足够，则难有更多进步，再就是业务，这是多数人认为自己被束缚的原因。\n\n怎样突破“瓶颈”，便是这篇文的论点—“挑战”—的来由。拿我自己举例，刚开始只做PC，且只做一种类型的企业站，常用组件还不用自己写，长期如此，就算做几十上百个站，我也只是个能使用几种有限布局方法的切图工人，故而革了自己的命，决然离去。相信不少人有过跟我类似的经历，只做一种终端，或只做某一类业务（邮件、后台系统、官网）等等，长期没有机会涉足其他，这不是其他东西难不难的问题，它再容易，你不去接触也是无法学会的，除了种类，还有量级，一直做着一个个小项目，文件怎么组织，代码怎么写，都不会出问题，没有遇到问题，就不会锻造出解决问题的能力。\n\n所以，鼓励大家踏实学习基础知识的前提下，乐于尝试新事物，乐于接受新挑战，才能把自己的能力和思维水平提升到一个新的台阶，过程可能比较煎熬，但结果终归是甜的。\n\n就絮叨这么多吧，下篇见~\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["UI开发大观"]},{"title":"《活着》","url":"/2017/11/22/living_read/","content":"\n听闻本书很久了，作者余华是个老前辈，有很多为人熟知的作品，比如：《活着》、《在细雨中呼喊》、《许三观卖血记》、《兄弟》、《第七天》，但惭愧的是，我都没看过，所以，我还是以一贯的风格，先看那本“最红”的。\n\n我相信，很多跟我一样没看过这本书，但看过相关评论的人，都会对一个名字有印象——福贵。\n\n我以为这本书会围绕着福贵多灾多难的一生去展开，让我们知道活着有多少苦难和烦恼。\n\n但我低估了它，甚至，你会觉得整本书里福贵只是一个配角，或者一个很普通的人，一个倾诉者，书中铺陈更多的是跟福贵有关的，其他人的命运，朋友、战友、妻子、儿女，有的很长，有的很短，但不论长短，都能给人留下深刻印象，阅毕合卷，却迟迟不能从中抽离。\n\n活着的对立面是死去，没人会随便死去，也没人愿意接受死亡。\n\n几十年前，死亡是件很常见的事情，可能饿死，可能冻死，可能病死，可能战死，甚至被很冤枉的打死。\n\n福贵本来出身阔绰，却很快被自己败光，不得已回到乡村种地为生。\n\n他经历过战争，很偶然，上街去买东西，然后就被拉了壮丁，逃也逃不走，离家越来越远，仗也没得打，同时吃不好睡不好，还有对家人无边的思念，见过无数尸体躺在自己面前，身边的战友一个个死去，而他奇迹般地活到了部队“放生”的那天。\n\n福贵成功回到家，很高兴，却发现自己那病重的母亲已经去世，女儿凤霞也因为一次高烧变成了哑巴。\n\n后来，老婆得了一种怪病，变得很虚弱，不能再干重体力活，试过很多方法都没有让病好转起来，慢慢地发展成干不了活，连个针都拿不起来，家里本来人手就不多，过得更艰难。\n\n随着凤霞长大，家里操着心为她婚嫁，但只要是正常人就不会考虑要一个哑巴，最终嫁了一个歪脖子的男人，所幸，那男人对福贵一家人都特别好，还风风光光地把凤霞给娶走，那一刻，没人再去在意他们是不是哑巴和歪脖，他们很幸福。\n\n但终归，幸福只是生活中少许难得的片段，不幸依然不停地降临。\n\n福贵的儿子有庆，在一次学校组织的义务献血当中，被不负责任的医生抽了过多的血，小小年纪，不治身亡，本身出于好心助人，火急火燎地第一个跑到医院，知道自己的血型符合时兴奋不已，却落得一个极悲惨的结局。\n\n福贵的女儿凤霞，在分娩过程中意外死去，儿子还没多大的时候，老公在工地上被砸死。\n\n福贵的老婆，卧病在床多日，不仅自己身子虚弱，还需要人照顾，多次想一走白了，都被鼓励和劝解，但终于有一天还是不行了，只留外公和外孙两人相依为命。\n\n读到这里，或许很多人就会为福贵一家坎坷的命运叹息不已，但一切尚未结束。\n\n福贵的外孙每天跟着他上地干活，有一天发高烧，就让他自己在家睡觉休息，为了哄外孙开心，福贵做了半锅黄豆留在家里，好让他安心在家待着，想吃的时候就吃，谁能想到，他又饿又馋，吃太多，把自己吃得嘴唇发青，一动不动，等到福贵干完活回到家，怎么喊，怎么摇，都没有再醒来。\n\n全走了，自己的至亲，自己曾经的仇人，朋友。\n\n后来福贵花大价钱从屠夫的刀下买回一头老牛，人都笑他傻，他却觉得值，牛是老了，但自己还能活多久呢？忙时干活，闲时聊天，共度余生，也挺好。\n\n回顾整本书，经历了枪林弹雨，看似最有可能先进鬼门关的福贵，幸运地活了下来，活了很久，却是那些看似没有任何危险的人，一个个因为各种原因死去，可是，活下来的人，他的心情，谁又能懂。\n\n死亡真的那么远吗？看似离你我都很远，但说不定某一天，它就会来到我们身边，猝不及防，无法阻挡。\n\n看似夸张的剧情，却把我们每个人可能经历的生活情景都被浓缩了进去，回想我并不算长的二十多年人生经历，同学、老师、亲戚、朋友，包括我自己，也都曾有过这样那样的意外，有人离开了，在我完全没想到，也难以接受的时候离开，每次都让我更真切地感知生命的短暂和脆弱——活着不难，难的是一直活着，并且活得好。\n\n\n","categories":["读后感"]},{"title":"《一个人的朝圣》","url":"/2017/11/20/one_people_road_read/","content":"\n如果一切都如我所愿，我将失去走下去的信念，因为要等你来，所以我不忍离开。\n\n一旦踏上旅途，就会和很多人相遇，跟有幸结识的每个人讲述，我在干什么，将要去哪里，会有疑问和质疑，也会有鼓励，甚至走着走着，开始自我怀疑，要不要继续下去。\n\n当希望遇到一次次挫折，会发现连原本以为很简单的事都变得非常艰难，比如，只是把一只脚放到另一只脚前面，直到自己想放弃希望，哪有什么奇迹，都是骗局！\n\n不自信，甚至胆怯，使得自己都不再敢去想象那个曾经坚信能够到达的终点，不可能，她一定早就如遇到的大多数陌生人说的一样，不会在等我，不是不想，而是做不到。\n\n人们会认为我做的事是一件奇事，但事实上，它的起点只是我的一个小愿望，虽然略显疯狂。\n\n很多时候，我们相信有人陪伴更好，但一旦我们陷入喧闹和纷争，才发现独自一人才是正常的，才是最完整的，哪怕会冷。\n\n所有人都反对我们做一件事，我们却要坚持，到我们真的撑不下去了，想放弃，别人却说，你要坚持下去，因为，离成功已经很近了。\n\n离终点越近的地方，却愈加不知自己一直在寻找的是什么，也没有那么急切地想去揭开它，但仍心怀敬畏，也很激动，直到，发现它跟自己想得太不一样。\n\n与其说，我们走了很长一段路去到某个地方，去寻找某个人，去完成某件事，不如说，是在进行一次心灵的救赎，欠下的债，犯过的错，那些凄美的回忆，和应该珍惜的现在。\n\n一个人的朝圣，我们都在路上。\n\n\n\n\n\n\n","categories":["读后感"]},{"title":"没必要努力时，你还会努力吗？","url":"/2017/10/21/should_hard_work/","content":"\n大学时，每到茫然无措，每到期末考试，常会和同学聊天，说如果能拿出高中时期三分之一甚至五分之一的劲头来学习，物理呀，英语呀，高数啊，还有什么好怕的呢，别说及格，肯定能排年级前列拿奖学金啊！\n\n因为那时候大家不是在睡觉，就是在打游戏、追剧、谈恋爱等等，很少有人学习，你只要稍一努力就能赢过那些从来不努力的人。\n\n现在走出社会，和当初的情形又是何其的相似，刚工作那两年，为了赢得一个能赚钱不至于没饭吃的职位，再为了谋得一个更好的工作机会，大家都非常努力，非常好学，各种看书，看视频，加好友问问题，充满饥饿感，困难重重，但也收获颇丰。\n\n可一旦这两者都满足的差不多了，就相当于经过了初入社会的大考，没有生存压力，职场上升也已经到了一定阶段，比下有余，比上的不足看似没有那么严重和迫切，所以，还拼什么？歇歇吧，抱着这样的心理，就又开始睡懒觉、打游戏、追剧，各种嗨。\n\n是真的没有问题需要解决了吗？当然不是，买车，买房，或者我猜你想来一次云南、西藏旅行，出国旅行，甚至你想职位再晋升一下，薪水再提一些，都还没有实现呢，有继续努力下去的理由啊，但为什么多数人都停滞不前了？\n因为经历了刚出校园的紧迫和窘迫之后，经历了刚入社会的青涩和压力之后，想放松一下，漫漫人生路，理想就可以慢慢实现，咱要会享受生活，急什么。\n\n一不着急不当紧，什么时候急呢？生病了跑医院急，起晚了上班怕迟到急，考驾照又要应付考试了急，要向领导提交报告马上到截止日期了急，要么逼的没办法，要么临时抱佛脚，这时候才急。\n\n我们常羡慕那些很厉害，取得了好成绩的人，可是心里想的和实际行动却有巨大差距，不愿牺牲多余的玩乐和睡觉时间，等于没时间，把事情形容得极难，让别人觉得你没有实现它是正常的。\n\n事实是我们根本没那么努力啊，没什么事情是可以一蹴而就的，只有每天努力一点点，那些想实现的，看似很困难的事情，才会逐渐成为现实。\n\n当没必要努力的时候，你还会努力吗？努力了之后，还会有那么多人迷茫去思考道路和意义吗？\n\n\n\n\n\n\n\n\n\n\n","tags":["总结、思考"],"categories":["总结、思考"]},{"title":"【UI开发大观】始于布局——项目布局","url":"/2017/10/17/ui_develop_world02/","content":"\n上一篇说了页面布局，是从执行角度，也是技术角度考量，但是，只有执行是不够的，那就跟机器没有分别。\n\n编程，应该是一件有乐趣、有意义、有挑战的事，会写和写得好之间存在着距离。\n\n你肯定听别人说过：拿着项目，不要上来就做，要先做好规划。\n\n听来不明觉厉，规划什么？怎么规划？\n\n怎样能最大限度地降低成本，怎样能更高效，简言之，就是又快又爽，虽然有些不是技术范畴，但也需要做好，这需要练习和积累，只有踩过坑才知道。\n\n本文就跟大家分享一下这些“可有可无”的重要环节。\n\n**需要做什么+应该怎样做=最终的产出**\n\n项目规划，即怎样做。UI开发只是网页开发中的一环，很多公司都没有这一环，而是由前端开发包揽，我们暂且把这一环拿出来，既然只是一环，就会有上下游，即设计师和JS，甚至包括产品经理，所以，要知道需要怎样做，就必须把上下都打通。\n\n## 产品经理\n\n接到一个项目，我们首先要知道它应该被放在哪里，也就是业务类型或者项目归属。\n\n然后要了解项目的目标或者目的，虽然这看起来和UI开发没有直接关系。\n\n两个极端情况：\n\n其一：产品说，这个页面很简单，只是一个入口引导页，或是一个临时公告，你要用一天甚至半天时间来完成它。\n\n那么，你要做的就是“简单、粗暴、直接”，相应地，它可能十分死板。作为一个有追求的开发者，如果只是切几张图，随便弄两行文字，就结束一个项目，你会觉得体现不出你的功力——你的经验，你的技术，你的技巧。不过，你也可能会庆幸，没什么困难就能轻松完成一个项目，因为不管你是轻松还是困难，得到的报酬都一样（其实很不一样~后续文章详谈）。\n\n实际上，你几乎必定会遇到这种情况，也不必纠结到底值不值得，那就是你在那个项目里需要做到的程度。\n\n其二：产品会跟你说，这个项目稍微有点复杂。\n\n注意，在产品经理眼里，很少有“复杂”和“难”的概念，因为如果连他都认为复杂，你就可以任性的花时间去做，而这就和他希望你“快点，再快点”的意图相背离。\n\n快是可以，忙中出错怎么办？\n\n“能不能快点修复下？”\n\n......\n\n除非真的有很多页面和比较炫酷的动画，他能够通过直接的感官判断“这个应该不简单”，才会说复杂。\n\n你拿来一看，My god，这么多？这么炫？各种圆弧透明，各种不规则形状，还有不同状态，提示文字，弹窗，别说页面，就连一根头发都可能需要单独分出来做个动画。\n\n你就会绞尽脑汁地搜罗自己的技术图谱，想怎么做，实在没有好主意，开始向同事、网友求助，最后通过层层筛选，选择了一个看起来还行的可行方案，开始了漫长的历练之路。\n\n这是两种极端情况，其他大部分情况都是介于这两者之间，不是很简单，但也不是太复杂。\n\n现实充满不确定性，你觉得混乱也好，跟期望有差距也好，这就是理论和实践的距离，知识是固定的，而需求是多样化的，技术最终要为需求服务，它需要你简单就简单，需要复杂才复杂。\n\n## 设计师\n\n从某种程度上说，设计师也是产品经理意图的执行者，但是，问题在于，产品不懂开发，设计也不懂开发（部分例外），所以，有些时候，设计师的输出并不一定利于我们，反而会造成阻碍。\n\n简单的说，他可能漏给了页面或者元素，可能对视觉稿做过多次改动，发给你的却不是最新版，可能由于时间匆忙或个人习惯，图层命名很随意，分组很乱。\n\n如果你把页面做到8成的时候才发现这些问题，就只能望图兴叹。\n\n看到这里，可能会有设计师想打我，我不是故意要黑谁，确实是我全都遇到过，所以，可能的问题无处不在，我们和设计师是两个领域，又要紧密合作，这就需要进行充分的沟通和反馈，彼此监督和配合。\n\n再者，我们应该认真审视或听从产品和设计师给我们的输出和意见，这是职业素养，但是，我们也是一线的专业开发，同时又是用户，不论是项目层面，还是代码层面，甚至是视觉、交互层面，我们都要有自己的考量。\n\n一旦发现问题，现有方式需要改进，比如，有些视觉元素需要统一化和规范化——标题、段落文字、图标等等，却被设计师比较随意地处理，有些元素的位置过于突兀，有些动画会喧宾夺主，适得其反，就需要及时提出和矫正，而不是拿过来就完全照做，如果你是这么做了，后来再被别人发现问题，回过头还是要我们改。根据经验判断可能有问题的，几乎都会被证明有问题，切莫抱有侥幸心理。\n\n## 前端开发\n\nHTML、CSS和JS三者本是一体的，如果把UI和交互以及数据分离开来，它们就成了两个步骤，但终究无法分开。\n\n哪些地方是需要配合JS的呢？\n\n- 处在一行字当中，但要动态取值\n- 需要根据身份或时间不同切换样式\n- 需要根据不同场景进行显示、隐藏\n- 要根据不同情况换肤\n- 复杂交互动画\n......\n\n以上几点，就是和前端同事合作中会高频出现的问题，不能想当然的按照自己的想法来，而是需要两人达成一致，否则，你做完之后可能会给对方造成麻烦，还要进行二次修改调整。\n\n## 小结\n在我最开始工作的时候，是考虑不到这么多的，拿到项目就想用最快的速度去完成它，看着自己的劳动成果一点点成型，很有成就感。\n\n但是这种成就感是有隐患的，没有充分沟通，就无法了解需求的全貌，只按照看到的东西去做，做出来的东西就经不起折腾。当页面中的静态数据被替换成动态数据，当返回数据失败，当状态提示缺失，等等问题，都会使得我们看起来已经完成的页面出各种状况，怎么也做不完，修补不完。\n\n所以，虽然项目规划它不在需求的内容里，却是你我都必须去做好的事情，否则后患无穷。\n\n好了，这一篇先唠叨这么多，前两篇文章都稍微偏理论，也罗列了一些我曾碰到的问题，希望对你能有启发，能帮你避免一些问题，我们下篇再见！~\n\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["UI开发大观"]},{"title":"【UI开发大观】始于布局——页面布局","url":"/2017/10/13/ui_develop_world01/","content":"\n得布局者，得重构天下。这里说的重构，就是UI开发。\n\n每个从事前端开发的人，起点都是静态页面的制作，HTML——CSS——JS，这个顺序不是谁规定的，而是一个自然的顺序，先有骨架，再有样子，然后再有行为（事件、数据、交互）。\n\n随着现如今阅读设备的多样化，“多机型适配”成了网页制作中的一大工程。所以，虽然布局只是UI开发的一部分，我仍会说“**得布局者得重构天下**”。\n\n## 一、概念\n很多人开始接触网页制作，看到的可能是“div+css”，因为很多课程和书籍都是这个名字。\n\n因为它俩是并列关系，所以，我疑惑的第一个问题就是，div是什么？有什么用途或者功能？得到的答案无非是，它就是一种元素，一个盒子。\n\n这并没有解开我的困惑，css是一种语言，是一种技术，相应的，div也应该是，它居然不是，那为什么要把二者并列？\n\n好的，上面有提到一个名词——“盒子”。我最初学习网页制作，第一个不能直接理解的名字就是“盒子模型”，因为“链接、标题、段落、列表”等等都是能够很容易联想到的网页信息形象，但是盒子跟网页能有什么关系？什么盒子？鞋盒子？\n\n直到后来时间长了，才能慢慢地对以上两个问题释怀：\n\n其一、之所以会有“div+css”的说法，是因为在那之前，大家都在使用table（表格）进行网页中大大小小的元素进行包裹、嵌套布局，当人们意识到了它的缺陷，就有了使用div来替换table进行页面当中没有明显语义的大区块结构构造。其本身没有特殊的意思和用途，但后来的发展却又走向另一个极端，div开始泛滥，人们好像总是在用新的错误去替代老的错误，然后再去反思和改进，或许这是人类进步的必经之路。\n\n其二、盒子模型的提出，我认为更像是一种学术研究成果，当你真正搞懂了之后，才觉得这是个合理的比喻，但对于初学者反而不利，盒子和网页没有明显的对应关系，是网页当中的隐性骨架，当你了解到了“content、padding、border、margin”之后，才知道“盒子”的概念是怎么来的，才意识到这个不知所云的东西其实无处不在，只有当我们练就了庖丁的本领，才能看牛不是牛，所以，我不知道这种命名是更好，还是南辕北辙？\n\n## 二、脉络\n网页是二维平面，要么横排，要么竖排，**形态只有这两种，但是方法有很多种**。这句话几乎可以说是布局方法论的精髓。\n\n我第一个上手实践的网页，是做毕业设计，当时还没有系统了解过布局的知识，边做边学，做到导航链接的时候，从形式上看，它是列表，所以我选择了ul，但我写完之后就觉得不对，我需要的是横排，它默认是竖着的，怎么让它横着呢？我在百度上搜，向网友求助，他说：这个不确定，要看你是什么情况了。我找到的第一个答案是使用float（浮动），然后我跟他说，原来浮动就可以呀，然后他说，不一定啊，你用span也可以啊。\n\n当时我是略有不屑的，明明我找到了正确的方法，你还说什么span。\n\n但事实上，我并没有很具体说我的代码是什么，所以他那样说没错。用a也可以，用display:inline-block;也可以，方法有多种，只是看需要或者应该用哪种。\n\n我当时没有理解，也没有深究，这是很多人都有的一种不好的习惯，**容易看到学习成果，容易获得成就感，但也容易浅尝辄止**，结果只看到冰山一角，遇到新的问题又不知所措。\n\n## 三、范畴\n哪些表现属于布局？\n\n会影响到元素位置和尺寸的属性，都属于布局。比如：宽、高、定位、浮动、内/外边距等等。\n\n哪些因素会影响视觉效果？\n\n首先就是宽高和间距，没有这些，网页内容就会全都挤在一起，美观暂不说，可读性极差，这也是为什么，人们常说按照规范的建议使用标签，因为就算不给网页加任何样式，只要代码写得够科学，浏览器给它提供的默认样式就会有不错的可读性。\n\n其次是归类，怎么能够一目了然的看出，谁属于谁，谁和谁是并列的一类，这就需要视觉风格的层次感和一致性，通过排列顺序、文字大小、文字颜色、背景颜色、边框颜色等等来给内容归类。\n\n第三是细节，UI层面的细节是很容易被忽视的，但也是设计师非常关心，会直接影响到最终效果的，比如：对齐、行高、透明度、渐变、阴影、纹理等等。让人欣喜的是，CSS3的技术能帮我们实现很多以前无能为力的效果，但我们面临的难题往往是人造成的，这个人是设计师。\n\n可以说，以上三个大方向的判断和思考，就奠定了后面所有方案实施的基础，使用怎样的布局方式，怎么组织和规划代码，答案就逐个浮出水面。\n\n这三个层面，能做到多少，做到什么程度，就基本能判断一个人的经验和用心程度。\n\n## 四、挑战\n兼容：\n\n作为网页开发人员，需要面对不同厂商的浏览器对代码的解析和理解的差异。小到表现不一，大到是否支持。\n\n过去是IE系列低版本广为诟病，战场转移到移动端后，又是安卓浏览器来背锅，一有问题，大家都会联想到安卓机，值得庆幸的是，安卓机的系统经过不断更新换代，能够支持大部分属性的机型已经占据了大部分的用户市场，使得我们在开发时不用太担心，但至少现在，我们仍然需要采取一些必要的错失以使我们的页面在少量低端机中不会出明显的问题。\n\n适配：\n\n如果这个世界不曾有智能手机的出现，那么适配就会变得很简单（排除其他设备出现的情况），但是没有如果，其实还应该感谢它，虽然因为它我们需要面对很多困难，但也因为有了它，让网页的浏览和使用变得更加便捷和有趣。\n\n适配是个大的话题，因为**并没有一个单一的方法来完成它，但人们常常喜欢单一的去谈论它**，大到页面布局，小到图片的显示，文字的大小，除了要适应各种设备，还要考虑特定的元素适合使用哪种方法，后面的文章我会稍作展开探讨，这里不赘述。\n\n## 五、不只是CSS\n我在文章开头说，得布局者得重构天下，但也不全对，搞好了布局，只是搭好了框架，还有细节，还有代码维护、性能优化、团队合作，上下游沟通等。\n\n所以，不能单凭代码能力去判定一个人的综合能力，做事效率，完成质量和合作舒适度，也不能看出一个人的提升空间有多大，故而，我们也不仅仅需要在代码层面提升自己，还要会总结，思考，不断反思和改善自己。\n\n开篇先啰嗦这么多，后续咱们再聊。\n\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["UI开发大观"]},{"title":"从理论到实践的距离—由两个元素引发的思考","url":"/2017/09/12/two-ele-think/","content":"\n前两天看到这样一个话题：**“如果 div 内只有一行文字，到底要不要插入 p 标签？”**\n\n乍一看，这个问题很简单，有人从“语义”和“规范”层面展开了学究式的探讨，还有人说要看具体业务和代码。说得都没有错，可就是觉得少了点什么？\n\n这些答案对提问者有实质性的帮助么？换句话说，作者为什么会提出这样一个问题，他的困惑点在哪里？\n\n简单剖析如下：\n\n1、div就是一个容器，它可以用来放任何东西，就一行字而已，我还需要用多余的标签来放它妈？\n\n2、一行文字应该算一个段落，应该用p来包裹？所以，div里面再来一层p标签吧。\n\n3、既然要用p标签，我还要div干嘛？直接用p就是了。\n\n4、那么，p是放在某一个大的容器当中呢？还是跟那些大的盒子并列？\n\n5、我需要给p加个类再定义样式妈？\n\n6、慢着，这里用p真的是最合适的吗？它是一段文字，但有更适合这个使用场景的标签么？\n\n假如我是抱着这些疑问来提的问题，那么从以上两个层面给的答案就没多大意义了，第一类是基本的概念定义，第二类太笼统。\n\n也就是说，**技术正确并不能保证写出经得起考验的代码。**\n\n为什么需要考虑这么多？初学者通常不会考虑什么，但随着项目经验的增多，见识的增长，对自己要求的提高，或者来自同行的建议等等，就会不自觉的考虑这些，以免给自己挖坑。\n\n如果你的项目足够大，改动也可能随时发生，那么代码就不再是写一遍之后万事大吉的，它可能面临着上线前的不断改动，上线后的不断迭代，以及本地页面和线上用户实际应用场景之间那些未曾预料的不一致。\n\n举最常见的两个例子：\n\n**文字溢出 增加提示性文字/图标/动画**\n\n大家常说代码的健壮性、灵活性和可维护性，那就不仅仅是正确的代码，而是更好的代码，要想写出更好的代码，设计师不会教你，产品经理不会教你，通常情况下，只有在遇到问题的时候，你才会问“怎么还会这样？”，他们才会说“是的，这里要处理一下”。\n\n为什么不提前说？一个项目从最初的idea，到大框架形成，到各种细节的优化，没人能把所有需要注意的点都告诉你，并且，事情充满不确定性，新的问题也随时会出现，所以，只有自己吃一堑长一智，踩过坑才会明白，“知道”和“有意识”运用到每天的工作中，是两回事。\n\n比如还是文章开头那个问题，你想，要不要p标签都可以，干脆就不要了，那么，如果遇到如下场景怎么办：\n\n1、需要新加一行字，并且二者样式不同，大小、颜色或其他；\n\n2、需要新加一行文字，并且这两行字需要放置在两行；\n\n3、需要新加其他任意内容，且需要重新定义很多样式，而这些样式是最初的p不需要的；\n\n4、需要新加一条内容，比如按钮，之前的p有10px的左右边距，按钮需要撑满屏；\n\n5、文字前面需要新加入一个图标，它的高度超过文字的高度，但是需要二者垂直居中或其他种种，但是你之前已经把样式定义在了div上。\n\n....\n\n所以，div只是一个通用型、框架型的盒子，为什么要让它和具体的细节样式紧紧绑定？有时候真的不是一句简单的“适不适合、要不要”就可以判定优劣，考虑到它内部的内容、它和外部结构之间的关系，多提几个如果，怎样做更好就不是那么纠结的选择了。\n\n我以前曾写过一篇文章，从前到后的叙述了自己从业至今对UI开发的理解，有提到一些定义公共组件和公用样式需要注意的点，命名要怎样做，需要更通用化而不是具体化，然后怎样合理的划分粒度和利用继承，来做到一定程度的复用又能够避免过度耦合，又可以放置在需要它的地方，不产生样式冲突，这都需要项目历练才能知晓。\n\n我常常会有点后怕，那些看完了某篇“最佳实践”文章或者听了某位前辈简单指导的朋友就确信自己获得的和运用的就是最好的了么，**通用的方法论和技巧是有，但放之四海而皆准的方案并没人能提供**，它只能来自于我们每个人的思考、积累和沉淀。\n\n\n\n","tags":["CSS","HTML","思考"],"categories":["思考"]},{"title":"新版前端导航前瞻——我的一念执着","url":"/2017/09/09/f2er-club-new-guide/","content":"\n还记得两年前那个“传遍前端圈”的前端资源导航吗？\n\n对，“醉牛前端”http://f2er.club。\n\n已经两年没更新了，但我仍没有放弃它，也没有废弃它，因为我没有忘记自己的初心，也知道它存在的意义。\n\n虽然在我的多次安利之下同事也都很少用它，但每当他们有什么东西找不到的时候，我都能霸气地把链接甩出来，他们也都会一次次地惊叹，毕竟，它虽不完美，却也是我当初煞费苦心之作，所以它真的很棒。\n\n在这两年间，发生了太多的事，我也已经换了工作，也见过很多类似的前端导航站，可能他们跟我当初的想法一样吧。\n\n不过这都没关系，我并没有丧失热情，也不会气馁，不影响我把“醉牛”继续维护和更新下去，并且也相信，通过改良之后的它不会比任何导航差。\n\n这两年中，我增长了不少见识和经验，也多了一些新的思考，让我对一些事物和现象有了新的看法，我会把它们都加到新版的导航中去。\n\n保持改变，保持前进，往用户最痛的地方走，向最佳体验无限靠近。我想，这就是我创造它，并相信它不可替代的原因。\n\n细心的朋友如果现在点进去看，应该会发现它已经有了一些变化，我已经偷偷进行了一部分链接的调整～\n\n当然，这只是个开始，在不久的将来，全新的“醉牛”就会和大家见面，它会是什么样子？让我们一起期待！～\n\n除了导航，我那曾辗转多处的个人博客（从网易博客到lofter，到blogcn，再到现在的hexo+github）已经挺久没更新了，因为近一年转移了精力的重心，到简书开始搞“文学”创作，一直喜欢文字，后来做了程序员，但又逐渐地不满足于只用代码“改变世界”，我想用文字去触达更多的人，他们的生活，他们的情感，他们的理想，不过到目前为止还没取得什么成绩...\n\n每次给博客搬家我都会折腾很多，然后寄予厚望，觉得终于能大刀阔斧干点什么了，网易博客被说幼稚，lofter也是他人的平台，然后可定制性不强，搬到了独立的blogcn，却又发现，把所有东西都搞定了之后，才知道它绑定独立域名的功能被无限期关闭，平台奄奄一息，郁闷至极，再后来，决定还是用大家所说的有逼格的，更程序员的方式，选择了hexo。\n\n和导航的重新启程一样，个人博客也准备重新启程了，换了新主题，修复了文章“分享”和“评论”的功能，还有其他各种调整。\n\n每个人都在边走边看，什么时候来感觉了，就会多做一点什么，只因为我们心里有着某种执念，只因为，我们曾经用心做了一些东西，为什么不继续做下去？\n\n我是这样，希望你也是。\n\n如果你还没看过我提到的前端资源导航，可以先去看看，如果你已经使用了很长时间，那么可以把你的看法和建议在文章下面或者github上留言，来一起完善它。\n\n","tags":["思考"],"categories":["思考"]},{"title":"每个人都在跟自己赛跑——我的鹅厂两年记","url":"/2017/08/17/tencent_two/","content":"\n关键词：**新鲜感、成长、学习、团队、头衔**\n\n2017年8月17日，立秋已过十天，这天是我来到腾讯两周年的日子，又一年过去，四季轮回如常，我在腾讯的生活也将进入新的周期，总得留下些什么。\n\n一周年时，我写过周年记，挺大的篇幅，当时就担心以后会不会没得写，现在看来是多虑了，只要我还在这里，还经历着，就会有新的收获和感悟。\n\n不止一个朋友跟我说过：\n\n>“我之前换工作比较频繁，但都是迫不得已，如果能进腾讯，还换什么工作？”\n“BAT是所有程序员的理想殿堂，我们想进都进不去，还有人想出来？出来只会后悔。”\n\n也不止一个朋友想托我推荐进入腾讯，所以，坐在很多人梦寐以求的办公室，做着很多人都想做的工作，就真的一切都很好吗？\n\n## 新鲜感\n\n**天堂也会厌倦。**\n\n我的腾讯生涯是从外包岗开始的，三年前，我抱着“不管怎样，能来就好”的想法，斗胆尝试应聘外包职位，据说外包的要求稍低些，但没有正式编制，这并不影响它在我心中的重要性，没想过会不会被区别对待，也没想过之后的路怎么走，只有期待，对新工作的期待，对更好的自己的期待，《滕王阁序》有云：“物华天宝，人杰地灵”，总能沾点仙气？\n\n面试在朗科大厦，那是我第一次走进腾讯的办公楼，像所有第一次来的人一样，拿着手机一顿狂拍，然后迫不及待地跟家人分享：这里就是腾讯，我来了！\n\n面试官看起来很年轻，我觉得应该是个小兵或助手，心态很放松，后来才知道，那是一位从业多年的前辈，也是那里的组长，想想一阵后怕，但也说明一个现象，公司的平均年龄不大。\n\n**工卡**\n\n每个来到这里的员工，第一件比较兴奋的事，是拿到一张属于自己的工卡，工卡是身份的证明，有了它，就可以自由进出，享有公司员工才有的权利，每位员工都曾因它而自豪，恨不得到哪儿都戴着，但久而久之，它就渐渐失去了光环，只剩下每天进出大楼和吃饭刷卡的功能，不会再拿着它看，卡带也脏兮兮的，哦，对，如果弄丢了就要赔偿几百块，这是它仅剩的调侃价值，所以，除了必须要用，我现在都不再把它挂在脖子上。\n\n**食堂**\n\n吃饭是人生要事之一，在腾讯可不缺吃的，除了总部腾讯大厦，还有几处别的楼层，比如：松日、万利达、大族、科兴等等，每栋楼都有食堂，每个食堂都有很多食物可选，普通快餐、粉面档、烧腊档、营养餐、麻辣烫、韩国餐等等，我基本都吃过，但是，每到饭点，常在电梯里听到这样的对话——\n\n>“今天吃什么？”\n“什么都不想吃，哎，每天吃饭已经成了例行公事，真不知道吃什么”。\n很多人说飞亚达食堂不好吃，大族食堂不好吃，我都无感，我会告诉你我吃了两年的腾大三层食堂有多腻么？没有胃口到哪里都一样，不是它的差与好，是早已失去新鲜感。\n\n**办公楼**\n\n刚来公司做外包的时候，我在大族待过，后来搬到飞亚达，不论在哪，都很羡慕在腾讯大厦工作的人，那可是总部，每次有机会去参加活动或者开会，都很兴奋，后来，我通过面试转为正式工，换了部门，搬到了腾大上班，每天进进出出，几百个日夜，动作早就自动化，也不再有心跳加速的感觉，有时下车走神了，回过神已经到楼下，上班的路都走出了惯性，就像曾经闭着眼都能走的上学的路。\n\n我时常在上下班的时候抬头看腾大，尝试着刷新对这里的记忆，它依然笔直耸立，高大帅气，却不再有当初那种神秘的魅力，这就是习惯的力量，它能成就一些东西，也能把某些东西摧毁。\n\n## 学习\n\n**逆水行舟，不进则退。**\n\n学习使人增长见识，增添技能，这跟做什么无关，事物的丰富是客观的，人们的狭隘是主观的，这就决定了要不断学习，我们从小到大都在学习，但随着时间的推移，没有了考试的压力，工作逐渐稳定，事务日趋娴熟，就会暴露出问题：\n\n**1、我们的知识能否经得住时间考验？**\n\n每种技能都有一个“学习曲线”和“保鲜期”，从基础到熟练，再到精通，是一个从易到难的过程，学会容易，保持很难，学会了就能做事，能做事就可以完成任务，就能胜任职位领到薪水，看似合情合理，但古训说的好，学而时习之，温故而知新，再简单的东西，学会之后就不去管，时间久了都会模糊，比如我自己曾经写过的技术文，有些又忘了怎么用，知识就是需要不断地咀嚼和回味，才能保持熟悉度，进而熟能生巧。\n\n**2、浅尝辄止 OR 深入钻研？**\n\n海量、重复、零散，这就是现在的信息呈现给我们的样子，随之而来的，是“碎片化”、“问题式”的学习方式，网络搜索，口头探讨，再者，人们常常着力于一个知识点或某个应用场景的交流和记录，而缺少主动的深挖和拓展，所以，很容易成为井底之蛙，也很容易被误导，会大大限制技术的施展空间，更不能说对其有了真正的理解和掌握，不少人常会抱怨技术实现的瓶颈，其实更多的是个人智慧的瓶颈，那些热衷于深入钻研的人，常会做出让人啧啧称赞的事情，研究成果也会被列为行业典范。当然，我们不可能遇到了问题就马上去研究它的全部，那就走了另一个极端，探究到什么程度，需要自己拿捏，但探究本身绝对乐趣无穷，价值连城。\n\n**3、学习即是竞争力，努力即是幸福感。**\n\n还在读书的时候，很多人就跟我说，如果选择做技术，就会面对知识的快速更新换代，要不断跟进，我不信，但现实不容我不信，因为技术的确是在不停地发展，一年一小变，三年一大变，有在实践中的不断改进，也有一批富有工匠精神的人去开辟和不断打磨，所以，技术总是在演进，各种提升效率的工具也应运而生，就像有人发明火车、飞机一样，故而，如果想不被同行甩在身后，就要坚持学习，这不仅是为了提升工作技能，如果你真的热爱自己的工作，那么工作的成就感就能转化为生活的幸福感，越学习越强大，越努力越幸福。\n\n## 成长\n\n**对自己狠一点，不瞎忙，不虚度。**\n\n我们总喜欢制定计划，却不擅长完成计划，找了很多时间管理和事务管理工具，最后却发现最需要管理的是我们自己。执行力不够，意志力不够，再简单的事也无法完成。\n\n有很多次，我爬上床想睡觉，但一躺下就不自觉地想一些事情，想那些悬而未决的事情，两年前订过的目标到现在还没进展，这两年都在干什么？也没闲着，但总有几件重要却不紧急的事一直被搁浅，定计划的时候都觉得时间非常充足，干劲十足，执行时却疲软。\n\n最终我想明白一个道理：\n\n > 盲目地制定好看却无法完成的目标是愚蠢的，分清事情的主次轻重，把生活过得紧凑而又从容，才是聪明的。\n\n看似简单的道理，迷茫过才更懂它的含义，我们的生活充斥着各种诱惑和琐事，有些可做可不做，有些需要优先做，有些可以延后做，但人的本性是倾向于更轻松的事情，于是，更多的时间被不重要的事所占据，重要的事反而没时间做，这是多数烦恼的根源，所以，强迫自己去完成最重要的事，才能有所成长，也才能让自己更快乐。\n\n**多项选择，平衡且不单一。**\n\n我身边有这么两类人，一类是刚毕业的职场新人，充满激情和冲劲，住得离公司很近，每天早到晚走，想用最好的表现获得大家的认可；另一类，已经工作了几年，但迫于经济、职场竞争和绩效考核的层层压力，同样一门心思扑在工作上，甚至常常顾不上吃饭，也鲜有业余时间去做点别的事情。\n\n我说他们是两类人，其实是一类人，被某种强烈的情绪驱使，把几乎全部的热情都倾注在一件事情上，充实，有成绩，但也略显单调，每每看到别人谈论其他事情，都会问，你怎么那么有时间？其实时间是最公平的，每个人每天都是24个小时，把时间花在哪里，收获就在哪里，很多人宁愿一直做“正事”，也不愿“浪费”半个小时去发展业余爱好，其实时间真的没那么紧张，用在不同的地方就能发挥出不同的价值，分出来一部分，给自己多一种选择，就能收获多元化的自己。\n\n## 团队\n\n**方便他人，就是方便自己。**\n\n程序员界有着这样一句调侃，最讨厌的事情是：自己写文档，自己写注释，别人不写文档，别人不写注释。\n\n很明显，有些事对大家都有好处，但谁都不太情愿做，任务来了卷起袖子就是干，但如果我们稍加留意就能发现，有些东西具备共性，可以提取出来供自己或他人复用，有些东西可以更好地规划和设计，从而避免不必要的坑，有些东西可以提供给我们的上游或者下游，能使合作更顺畅和高效，不幸的是，往往这些事情界限模糊，会被当做“脏活累活”，我们常常会心存侥幸地去猜测，应该是这样的，没问题吧，但结果十有八九都会出问题，所以，为了他人，也为了自己，主动多做一些不是坏事。\n\n**统一至上。**\n\n“统一”是团队最好的沟通方式，特别是需要多个人共同维护一个大项目的时候，每个人的工作都不再独立，而是随时产生关联，相互影响，但团队里又都是一些个性鲜明、习惯不同的人，你的方式我不习惯怎么办？我的写法你不明白怎么办？你的方法很好，我的方法也不错，要怎么办？\n\n答案就是“统一”，这也是规范存在的意义，当然，规范不是一言堂，它不是任何个人的产物，而是团队成员共同讨论的结果，是从技术、业务、项目、应用场景等方面综合考量后的最佳方案，它出自每个成员，也会让每个成员受益。\n\n**总要有人主动，一个就够了。**\n\n上面有提过规范，对团队有利的事情远不止规范，使用什么框架、工具，怎样的工作方式，怎样能让大家的经验和智慧聚集起来，成为团队的宝藏，问题的解决方案等等，这就需要有人提出，有人分享，有人推广，而不是每个人各自行事，不能指望每个人都主动，但只要有一个就够了，所以，为什么不是你？\n\n## 成本\n\n**把精力用在值得花费的事情上，多一些也不浪费，否则，再少也是奢侈。**\n\n我们时刻都在计算成本，走哪段路最短，哪种方式最省力，买哪家店的东西最划算，时间成本、金钱成本、人力成本等等。\n\n久而久之，我们形成一种习惯，只要是大成本的都不做，所以我们需要思考的是：哪些成本是值得的？\n\n>如果我今天遇到一个问题，有些麻烦，但我额外花了些时间做了另一件事情，以后遇到同类问题就可以轻松搞定，为什么不做？\n如果我抽时间制作了一个工具，可以让我的工作快好几倍，为什么不做？\n如果我抽时间把正在做的东西整理、归类一下，可以减少维护和合作成本，不论是我还是团队其他人都会觉得更清晰和更轻松，为什么不做？\n如果我抽时间和上下游做更多沟通，以便对相互之间的需求更明确，可以减少每次合作中不必要的障碍和反复，为什么不做？\n\n表面来看，这些事情跟手头的事情都没有直接关系，也会花一些额外的时间，但磨刀不误砍柴工，这些成本就是值得的。\n\n**第一次就把事情做对。**\n\n“先简单弄一下吧，等以后有需要了再说”。我们常听别人这么说，自己也经常这样说，但无数的事实证明，这是在挖坑，那些被简单对待了的事情，往往都需要花第二次的成本去往更复杂的方向改进。\n\n以前不理解为什么要第一次把事情做对，难道明知道有错还去做？后来才明白，这个对或错不是站在单次事件去考量，而是一种可持续发展的角度考虑，如果一时偷懒，或者不具备相应的经验和眼光，就会先挖坑再含泪填坑，出力不讨好。\n\n**不确定性决定了永远会有问题。**\n\n在一个集体里，每件事都跟很多人相关，人和人之间的联系像一张大网一样展开，远远超出我们的掌控范围，故而，虽然我们常期望依靠个人经验来降低工作成本，但结果往往令人气馁——“不是好好的吗？怎么又有问题？！”，“不是说好不再改吗？怎么又改？”\n\n我们希望一切都能固定下来，但到处都充满不确定性，场景很复杂，人的想法和思维也极具偶然性，所以，没问题都只是暂时的，随时准备面对和解决问题才是常态。\n\n**从点到面，逐步完善。**\n\n我们常会面对这样一种解决问题的思路：遇到一个小问题A，追溯到相关责任人B，B给出了一个历史遗留问题C，解决A很简单，但如果要从根本上解决，就要解决C，但C的成本很大，所以，索性就先解决A，结果是，A不断地出现，不断地被解决，而C一直存在。\n\n那么C是否无解？当然有，怎么解决？答案就是：不要想一次把问题解决完，借鉴产品迭代的思想，将方案进行分解，逐步的拼凑和补充。比如，解决C，需要做A、B、D、E、F、G，现在A和B已经做了，而且已经错了，那么就从D开始采用正确的做法，这样保证了从D往后都是对的，有空闲或者正好要做AB相关的东西再把AB纠正过来，这样就不需要因为成本大而搁置，也不需要纠结在做D的时候要不要重新做AB。\n\n再大的拼图都是从一个点开始，不论是从头开始，还是中途发现的问题，都可以从某个点开始，逐步向全局扩散，而不是让它成为前进的拦路虎。\n\n## 裁决者\n\n**自己才是最终的裁决者，赢了自己就好。**\n\n以前总看别人写“XX年记”，转眼我也已经工作四年，从新人到老鸟，改变了很多，认知，心态，跟之前不同的是，这次不再自卖自夸，更多的是教训和反思。\n\n这一年我收获了很多，看书、锻炼、旅游、搬新房子、交新朋友，也失去了很多，工作方面的提升近乎停滞，没有学习新东西，也没有有价值的输出和贡献，所以，喜忧参半，欣喜中掺杂着挫败感。\n\n挫败感带来危机感，所以一次次失眠，我身在腾讯，享有着令人羡慕的福利，在通往高级工程师的路上迈进，但这能代表什么？没有执行的计划，已经失衡的生活，逐渐消失的激情，都在提醒着我没有付出就没有收获，虽然如此，我并不后悔自己的选择，海明威说过，“人不是为失败而生的，一个人可以被毀灭，但不能被打败”，经历、思考、改进，这就是成长，也是人生得以丰富和厚重的基石。\n\n标题定为鹅厂两年记，因为文章主要内容还是从工作中来，但有些东西已经超出工作，我们总会给自己找目标，某个人，或某个地方，其实那些目标只是假想敌，别人的标准，别人的评价，都没那么重要，每个人都是在跟自己赛跑，我们的成就和快乐只会忠于内心。\n\n有人说生活淡如水，也有人说生活乱如麻，其实它并不残酷，也没那么美好，它就是一张静待书写的白纸，你挥洒笔墨，它呈现色彩，只有持续前行，才能不断超越。\n\n还会不会有三年记呢？我不知道，也已不重要，追寻理想的过程其实就是在找自己，知道了想要什么，心怀远方，就有拨开迷雾的力量，不论在哪里都能找到方向，去努力成为最好的自己！\n\n","tags":["经历"],"categories":["经历"]},{"title":"第三届CSS中国开发者大会纪实","url":"/2016/12/18/css_conf_2016/","content":"\n![来个正脸](css_conf_2016/cssconf_banner.jpg)\n不算几次路过，这是我正儿八经第二次来广州，每年的这个时候，南方还是阳光明媚，12月17日，第三届CSS中国开发者大会，就在这样一个温暖的早晨开始了。\n\n此次大会举办地谈不上高大上，甚至比较偏，但会场内环境和规模尚可，400人左右。\n\n今年是CSS诞生22周年，在会议的开头，特地播放了CSS之父Håkon Wium Lie录制的一段视频，其简单提及了CSS的发展历史和现状，并对CSS的未来有更多期许，希望大家能带着它挑战更多现在尚未触及的领域，挑战更多可能。\n\n## 一、3.14 Things I Didn’t Know About CSS——Mathias Bynens\n第一个分享的是位外国友人，我虽然大学英语过了六级，但英语这个东西，不进则退，更何况是听力，还有很多专业词汇，所以，不得不承认很多没有听懂，但大家都是程序员，代码是通用语言，演讲者的代码演示依然给了大家不少冲击，大多是我们平时没注意到的东西或者没有用过的用法，还有比较一些大家平时有用到的方法的优劣和规范与否。\n\n比如：!important的用法、CSS注释的用法、font-family有什么讲究、非常规选择器 Escaping css selector、CSS表达式  css expressions in IE<7、IE legacy document modes、Freeze Firefox等等，诸多的细节，每一个都能让人感叹，引人思考。\n\n里面提到的两个网站大家可以欣赏一下。\n\n[youmightnotneedjs](http://youmightnotneedjs.com/)和[HTML KONG](http://kong.xn--8ws00zhy3a.com/)\n\n## 二、CSS Grid Layout——大漠\n现在大量网页设计基于网格布局。虽说人们通常注意不到它，无论从理论、美学和整齐来说，这样的布局都很好平衡。网格结构是所有现代网站的基础，它总能给最终用户完美无暇的设计。\n\n大漠给大家介绍的Grid，相信很多人挺早就有接触，但因为浏览器对它的支持还不好并且看起来能够大胆使用还遥遥无期，就没有更深入去了解和实践，为了到会场之后不会在演讲者快节奏的讲解下一脸茫然，去之前几天，我借助着Eric Meyer那篇文章以及扩展阅读，稍微把Grid又过了一遍，对整体有了大概的了解，但文章终归是文章，和PPT以及现场嘉宾讲解还是会有不同，大概的定义和概念就不必多说，重要的是看它的亮点以及能够用什么巧妙的方法解决什么问题。\n\n其称为“网格系统”，当然就有它强大之处，强大在它不像行高、浮动这些属性只是对一些具体区块的影响和作用，它能够把整个网页都规划进去，而且在不变动HTML的情况下大幅度改变布局。就像很多人认为的那样，这跟当年很多人热衷的table从外表上看有点像，但又有本质的不同，网格较之更加强大和灵活，首先，不需要特殊标签，只是属性，另外重点在于，强大的属性值选择，怎样分配行和列、区域，怎样高效的书写，怎样智能的计算，等等。\n\n大漠也对未来的布局大势做了些前瞻\n\n![布局走势](css_conf_2016/layout.jpg)\n\n了解过的人都会有一种感觉，Grid跟Flex box有相似之处，那么，它俩该怎样选择，会是替代关系吗？\n\n在现场，大漠对这一点也做了解读：\n\nFlexbox   定义一个维度、内容更擅长，比如，一个容器里的图片和文字排版\n\nGrid Layout   定义两个维度 外部大布局更适合，比如，各种大模块的排布\n\n总之、Grid是对CSS技能包很好的补充，而不是矛盾或者冲突关系，技术在人的手里，可以灵活运用。\n\n## 三、闪电分享——勾三股四\n第三个话题，由勾三股四带来的闪电分享 Css in Native。之所以称为闪电分享，是因为时间很短，所以，语速也很快。\n\n说实话，内容跟CSS本身相关的东西不多，多是关于Weex的介绍，有点广告之嫌哈，但Weex出来之后的确曾引起行业的广泛关注，我们组也不例外，不过过了那阵儿就没有太多关注了，可能很多人和团队也都是这样吧，这个跟自身的业务项目相关，但作为个人去了解和学习是可以的，其演讲对时间的精准控制和流畅度给人留下深刻印象，跟主题相关的是讲了Weex中是怎么写CSS的，以及对原生CSS属性的支持情况，具体等资料放出来大家再细看吧。\n\n## 四、Sass & CSS Design Pattern——廖洧杰\n如何设计出灵活性高、易维护的网页版型，一直都是大家憧憬的目标。这个话题是我比较感兴趣的，因为是我们团队正在使用的方案，演讲者先是列了一些数据，关于大家平时写代码的规范性和意识的统计，比如使用的工具（Sass）、设计模式（BEM）、CSS的命名规则等等。\n\n重点是提到的一个金字塔：\n\n![项目构建金字塔](css_conf_2016/cssconf1.jpg)\n\n自底向上，不同层面，从整个项目的高度去考量，一步步构建出这个金字塔，看似简单而顺理成章，其实是需要很多的实践和思考。\n\n这部分内容，应该能和很多人脑子里的想法发生碰撞。具体如下：\n\nvendors：第三方插件  jquery plugin  inbox\n\ncomponents：组件\n\nelements：元素/原子 ——分子（模块）——机构\n\nbase：预设样式，全域样式、减轻各类设定负担、前端和设计共同讨论\n\nbrowser：浏览器，reset差异\n\ntools：开发资产、积累、成型方案\n\nconfig：全域变量 、档案路径 、前端任务 gulp等   \n\n这些环节，其实就是一个项目从无到有的过程，对于基础阶段的朋友来看，可能有些费劲儿，但细细品味一定会有所悟，也可以借一步看下我前段时间写过的另一篇文章明白了这些，你不仅仅能成长为优秀的UI工程师会有一丢丢的帮助~\n\n在谈论这个话题的过程中，演讲者插入了一大段不同角色和团队眼里的职能和所关心的侧重点，比如：\n\n1、只写前端的，会更注意到什么\n\n2、既懂设计又懂前端的，会是怎样\n\n3、分工比较细致，团队协作，快节奏的，又是怎样\n\n这些能让处在不同角色和团队的人感同身受。其中有一段说，好的设计师要考虑什么：自适应布局、图片格式、状态、页面回馈、元素动画效果描述、WebUI 种类。我觉得这会令很多设计师汗颜，因为据我所知，相当一部分的设计师是考虑不到这些看起来更偏向于开发范畴的东西，能考虑到这些，对前端或者UI开发来说应该是很幸福的。\n\n## 五、微信网页重构实践 && SVG工程化与动画实践——罗正烨、方潇仪、倪栩生\n这个话题讲了SVG在项目中的应用。SVG就像Grid一样，大家早有耳闻，但应用一直都不太普遍，像是一直在圈儿外打转一般。\n\n这个环节是由微信的三个同事来进行的，基础的东西不必赘述：\n第一位主讲了“什么是SVG，为什么用，怎么用”。这些，其实大家可以通过上网和书籍去查阅。\n\nSVG优势如图：\n\n![SVG的优势](css_conf_2016/cssconf2.jpg)\n\n大家都知道我们在实际开发中会遇到的痛点，常常做了很多代码层面的优化，但到头来顶不住几张很大的图片，整个文件就显得很大，另外就是虽然CSS3在视觉和动画方面已经做了很大的提升，但有些动效实现起来还是很困难的，故而，很多场景下，SVG能成为一个很不错的替代方案。\n\n第二位，主讲了SVG的各种动画效果和大概的实现细节，比如：描线、变形、路径运动、图案填充、滤镜。还通过简单的代码展示，介绍了是用哪些属性如何实现的，对刚接触或者还尚未开始接触SVG的朋友应该帮助蛮大的，它会告诉我们，那些很炫的动效离我们并不遥远，而且一点也不难，会让人忍不住马上去尝试一番。当然，首先要掌握一些基础，然后就是发挥自己的创意了。\n第三位，讲了信息和网页的关系，网页是信息上下文的情景重现。\n\n网页特征：多平台、可访问、可用\n\n信息在网页中的形态\n\n意识形态：元信息  一个信息仅有一个意识形态，就是网页结构中独一无二的内容。\n\n实体形态：标记\n\n表现形态：样式\n\n在我看来，相当于是对网页内容重新进行了一下抽象和归类的描述。\n\n## 六、从矩阵走入 WebGL 世界——陈剑鑫\n这个话题，我没有学习过，也知道它没那么简单，这涉及到硬伤——数学和物理，嗯，不是懂几个属性就能解决的，没有多方面综合而来的能力和技巧，做出来的东西也是不堪入目~所以，也没有临时抱佛脚，就权当去现场感受一下它的魅力了。\n\n抛出来几个概念你们自己感受吧。\n\n矩阵matrix transform基于矩阵实现效果            \n\n欧拉角rotateXYZ              \n\n四元数rotate3D\n\n演讲者在现场也演示了几个运用这些技术做出来的炫酷效果，这是其中一个\n\n![矩阵的魔法](css_conf_2016/cssconf3.jpg)\n\n## 七、CSS animation && CSS: The secret drawing tool——Wenting Zhang\n来参会之前，就已经看到过演讲者的站点，但是说实话，人大多数情况下都是懒的，再加上精力有限，对很多东西会一扫而过，我所看到的网站和演讲者自己演示出来的相比少了很多亮点，有很多“秘密”没有发现，具体大家自己去发现吧~ [cssicon.space](http://cssicon.space/#/)\n\n演讲者以现场写代码的方式，写出一个可爱的胡子来开场，像这样\n\n![现场撸码画胡子](css_conf_2016/iconfont.jpg)\n\n胡子本身并没有多少难度，利用圆角和阴影以及伪元素和定位等，大家都能画出来，但是，当这些东西，结合着CSS变量和calc函数，以及少量js的事件，便能产生出让大家惊叹的效果，你会觉得，原来看起来那么炫的效果其实这么简单就能做出来。\n\n我的感受是，画icon是个简单的事，但如果画了512个，还给它们安了个家，不仅如此，还特地花了一些功夫，增加了非常赞的体验，就是一件很不简单的事~\n\n## 后记\n期待了几个月，提前一天抵达广州，带着本子做了一堆笔记，事实证明不虚此行。或许因为个人工作的局限，或许因为懒惰，我们总会有一些东西尚未发现，然后一步步地走到了技术和心理的双重瓶颈，有人就觉得迷茫，不知道下一步该把精力放在哪里，这个时候，能够借助一些更加优秀或者比我们做了更多尝试的人的视角，去看一看未知的区域，对我们每个人都是个激励。\n\n尝试更多东西，找到更多精彩，这不正是我们编程人员工作的乐趣和初心么~\n\n感谢大会的组织者和所有工作人员，期待下一次的精彩。\n\n另附一个无意间看到的CSS二十周年作者专访 [CSS: It was twenty years ago today — an interview with Håkon Wium Lie](https://dev.opera.com/articles/css-twenty-years-hakon/)\n","tags":["分享交流"],"categories":["分享交流"]},{"title":"明白了这些，你不仅仅能成长为优秀的UI工程师","url":"/2016/11/28/ui_developer/","content":"\n不久之前，我做了一次公司内部的分享，但时间有限，很多东西没能展开。这篇文章算是文字版，当然，不仅如此，还会增加一些新的东西，下面正文。\n\n## 话题由来\n首先，技术是没有界限的，一个网站，一个人可以完成，分成三个人也可以，分成五个人也可以，比如：交互设计、视觉设计、UI开发、前端开发、后台开发。所以，就会出现不同团队的技术分工不同。有多种分工会怎样呢？各自在自己的领域挖得更深、做得更精，但问题在于，对于另外一个本来也应该了解或者掌握的相邻领域知之甚少，这是精细分工的弊端。\n\n再者，最近两年，网站开发中最火的莫过于前端开发，因为移动互联网的大热，因为各种工具和框架、库的层出不穷，因为Node.js对后端领域的入侵，仿佛一下子JavaScript变得无比的迷人和强大。但同时，不论是行业会议还是博客文章，都很少看到有人在谈论CSS方面的东西，当然，还是有少数人在坚持做的，后面会推荐给大家。\n\n所以，在很多人不知UI开发为何物，以及很多人对CSS和页面开发的认识有失妥当的情况下，就有了这个话题，谈的更多不是代码，而是环境、方向以及方法论。\n\n结构大体如下：\n\n1、**认识UI开发**\n\n2、**重新强调Web标准**\n\n3、**CSS设计模式的思考**\n\n4、**工具，让开发更敏捷**\n\n5、**怎样成为一名优秀的UI开发**\n\n始于开发，但不止于开发。\n\n## 认识UI开发\n\nUI开发，之前叫网页重构，现在仍有不少人在这么叫，大家看到了知道是什么就好。简单来说，职责就是还原视觉设计稿，使用HTML和CSS把视觉稿做成网页。它的概念，可能跟你印象中的代码重构相冲突，那么来看看为什么叫网页重构。\n\n“首先，腾讯的这个网页重构岗位起名的原因就是大家说的因为《网站重构》一书。最早是叫网站策划与制作。工作内容包含产品交互稿，网页（HTML和CSS）本身，JavaScript，flash。重构的工作定位也很好理解，设计理念还原。所以在腾讯重构是在设计通道的，而前端是开发通道的。术业有转攻，划分开两个岗位是为了明确这一专多长的“一专”而已。\"\n\n——Twinsen Liang（梁璟彪）\n\n“『重构』并不只是写CSS和HTML，而是规划网页的实现方式。历史背景上，从表格布局的思维转换到样式布局的思维，是一个推翻重来的过程。是对旧有工作流程、分工的一种打破，是一种进化。是连接感性设计师和理性程序员的桥梁，是支持站点更美、更友好、更健壮的基石之一。”\n\n——ghostzhang（张癸鑫）\n\n“借用了软件开发中的著名书籍《Refactoring》的中文翻译《重构》来影射当时国内网站需要用类似的方式来改变网站底层的本质。现在来看，对网站进行重构更将是一个持续不断的过程，范围也超脱了单纯的css，还包括javascript、ajax、flash等等所有前端技术和非技术的集合体。”\n\n——王宗义 《网站重构》译者之一\n\n由以上三位行业前辈的话，不难看出UI开发是做什么的。但随着时代和技术的变迁，需要掌握的知识和注意事项也在发生变化。\n\n**设备**：以前主要是PC，很多时候只需要写一个固定的布局就好，但现在我们可能需要做出在PC、笔记本、平板电脑、各种安卓/iphone都能正常展示的网页。技术方案总是要与时俱进的，就出现了em、rem、flex、百分比、媒体查询、vh/vw、calc等等。\n\n**浏览器**：这是目前为止网页存在的唯一环境，以前，最大的麻烦是低版本IE的各种奇怪bug。现在，移动互联网的兴起，让我们从IE的坑里跳了出来，却发现掉到了另外一个更大的坑。浏览器种类更多，还有各种版本的手机系统，还有微信，很多时候，这些问题需要我们做更多的兼容甚至切换方案。\n\n**网络环境**：网站开发人员很在乎的一点就是性能，它直接决定了用户体验，从UI开发角度，就是文件加载和执行，更少的文件请求，更小的文件大小，更高性能的属性和方法。移动设备的网络环境是不稳定和不确定的，可能2G，可能3G，可能4G，可能wifi，可能没信号。所以，让性能更优是重要且必要的。\n\n具体来说，UI开发可以分成两大块：\n\n**视觉体验**：布局、文本。布局的范畴是，左右还是上下，宽高，背景，边框等。文本的范畴是，字体种类、大小、颜色、粗细等，font属性里应有尽有，后来又加进来一个font-face的技能包。还有图片，图片大小的控制，格式的选择，以及要不要使用图片，CSS3的强大，除了表现在布局，还表现在视觉，比如，圆角、阴影、渐变、滤镜、遮罩等等。\n\n**交互体验**：你可能会说交互不是js的事吗？其实不然，js只是响应行为，行为有什么样的表现，依然属于UI范畴，比如：鼠标悬停、点击态，移动端的触摸态，点击区域，层级，容器大小、位置变化的过渡，颜色变化的过渡，动画等等。\n\n开个小灶：\n\n**突破思维界限——广义的盒**\n\n上面说过，我们会面临着一些自适应和性能的挑战，那么，就需要有应对方法。常规的盒模型只有margin、padding、border、content。\n\n在实际的应用中，只看到这些是不够的，因为网页设计的创意越来越花哨，元素的排列不总是那么规规矩矩，横平竖直，形状也不规则，视觉效果可以非常丰富，拿到视觉稿之后，就要对它进行解构，有了CSS3的强大武器之后，我们能分得很细，一般的圆角、背景渐变/裁切、阴影、缩放等都能用CSS3来实现，一些装饰性的元素，可以用伪元素实现，如此分析规划一番之后，就能够知道，怎样用最少的图片、最少的容器，做出更合理也更健壮的页面。\n\n当然，要做到以上这些，需要这三点：够广的知识面、对技术细节更精确的把控、将视觉元素和技术实现之间相联系的能力。\n\n这里可以推荐一本书给大家，是由CSS魔法翻译的《CSS揭秘》，里面展示了一些CSS的高级使用技巧，能帮助大家拓宽思维，找到更多乐趣和解决方案。\n\n## 重新强调Web标准\n\nWeb标准，是个老生常谈的话题，给多数人的印象就是一堆堆的英文，足以将任何人送入梦乡。不过也有同行朋友花了很大心血翻译了一部分层叠样式表2级修订版1（CSS 2.1）规范可以给大家作为参考，但也不能太依赖它，就我本人所看，有些地方翻译得也是不准确的，说到底，技术这个东西，还是理论加上实践，百炼方可成钢~\n\n我们说Web标准，是在说什么？其实就是对网页开发者的一些建议，在使用技术的过程中，更科学，更合理的建议。遵守了它们之后，更专业，更不容易出错，能将语言的原生属性和功能发挥到极致。\n\n好处大致有如下四点：\n\n1、更好的兼容，让网页在不同浏览器和设备当中正常浏览\n\n2、结构表现分离，更易维护，更灵活\n\n3、改善无障碍性，使网站在触摸或者键盘操作时可用，易用\n\n4、利于SEO，比如关键字的书写，标题的使用等\n\n由于浏览器比较大程度的容错性，加上人为的忽视，并不是所有人都会去遵从标准来选择标签和属性，人们对于JS、CSS、HTML的关注度和在意程度似乎是逐级递减的，即使在UI工程师当中，也普遍“重CSS轻HTML”，这显然是不妥的，故而，不仅需要重新强调web标准，更需要大家坚持去践行web标准。\n\n## CSS设计模式的思考\n\n可以先从一个事故讲起，刚入行的时候，经历过一次不大不小的事故，因为刚开始做，很不熟，做一个简单的首页也要两天左右，当时的情况是，刚好完成一个页面，突然右下角看到有报错，说由于系统原因文件已损坏，一下就慌了神，喊主管过来看看怎么回事，他马上帮我把文件另存起来，可是最后发现还是没用，文件还是空的，也就是说，当天我的工作基本白做了，极其沮丧，但是没办法，重做，那时我每次拿到一个视觉稿，都是上来就做，边写代码，边切图，边刷新看效果，但是这次事故打乱了原本的节奏，切图和写HTML都省了，就是对着一个凌乱的页面直接写CSS，我可不想再花两天时间，必须有所规划和调整。\n\n毕竟已经写过一遍，对每个部分都还有大致的印象，于是，就从头部，banner，产品列表，侧边栏，底部，这么一路写下来，因为思路清晰，有所规划，这次复盘只用了一个多小时就完成了，写完之后，对着自己写出的代码，有一种说不出的满足，也是从那一次开始，我的编码思想慢慢发生了改变，这或许是命运的安排~\n\n回归正题，什么是模式，就是一套应对问题的方案，从实践得来，从解决问题得来。所以，很多新手在面对设计模式的时候，会一头雾水，不知所以然，为什么要那么做？没有碰到过的问题，自然就不知道为什么要解决它。\n\n那么，设计模式能解决什么问题？——CSS本身语法简单、限制少、编程能力弱。\n\n代码是死的，人是活的，无序的东西，我们可以开动脑筋让它变得有序。比如：\n\n1、怎样避免样式冲突\n\n2、怎样避免代码混乱难维护\n\n3、内容和表现分离\n\n4、怎样能让代码易拓展、易移植\n\n大致先列这四点，如果这四点处理不好，就别怪坑多，那都是自己给自己挖的~你可能会问我怎么避免，我只能说，有些坑必踩不可，有些坎必然要过。\n\n你应该见过这几种设计模式，并且可能已经在项目中使用：\n\n**OOCSS**——结构和皮肤分离，容器和内容分离\n\n**SMACSS**——Base（基础）、Layout（布局）、Module（模块）、State（状态）、Theme（主题）\n\n**Meta CSS**——预先定义好的、粒度小，样式和结构、内容无关\n\n第一种，是为了把表现和内容分离，比如， 一个新闻列表，一个产品列表，看起来都是列表，但既不能命名为new-list，也不能命名为product-list，因为它们是不能相互适用的。所以，重点就在于，把UI表现和具体内容分开来，相互不影响，哪里需要就可以放到哪里，可以合作完成很多事情，其他特有的部分，可以通过增加扩展类来实现，但也要注意不宜泛滥，如果添加了过多的类，就要重新分析一下规划的是否合理。\n\n第二种，关注点在于整站的规划，这就要求有更长远的眼光，基础和布局样式可能是在网站的很多地方都用到，单独提取出来，模块是为了保持清晰和独立性，状态这一点就需要对需求的使用场景有较为完整的了解，一个按钮不只是一个按钮，可能是几种状态，暂时的一个图标，可能是将来的一堆图标。\n\n第三种，是把一些大家都常用或者是你自己通过评估，某个项目里有很多地方会用的规则提取出来，比如：同一种颜色的字体，同一种间距，同一类布局等等，是一些粒度比较细的东西。\n\n设计模式不止上面这三种，只是拿出来给大家举例子。我们常会听到一句话，借鉴思想，怎样借鉴思想？任何一种框架，都是某种思想的一个具体实现，是一个样例，就像以上三者，也各有自己的优势和短板。当我们知道它们用什么方法解决了什么问题，就可以不拘泥于任何一种，融会贯通，皆可为我所用，正所谓“无招胜有招”。\n\n## 工具，让开发更敏捷\n\n日常工作中，很多朋友会受困于一些烦恼，其中一个就是效率低下。在我看来，编程从来都应该是一件充满乐趣和创意的事情，如果每天都在疲于做很多重复的、纯体力的事情，就太浪费了。故而，我们可以在工作的各个环节去进行改进。\n\n对于UI开发，可以从以下几方面去着手：\n\n**图片处理**：切图、压缩、格式转换\n\n**代码编辑器**：快捷键、代码模板、插件\n\n**代码处理器**：格式化、排序、压缩、预处理器等\n\n**自动化构建工具**：grunt、gulp、webpack、fis等\n\n简单来说就是，快速切图，更快的写出优雅的代码，自动化处理写完代码之后的所有事情。\n\n当然，现在可供使用的工具多种多样，构建工具可以做的，浏览器插件也可以，在线工具也可以，编辑器插件还可以，而且有些工具的学习成本是不低的，每个人都有自己习惯用的工具，所以，你可能又会犯选择困难症了。\n\n其实大可不必，所有工具需要做的都是类似的事情，差异在于处理方式和细节，所以，不必纠结，有兴趣可以多尝试，不想用新的也可以继续用原先自己最拿手的。\n\n如果你还不知道到哪里找工具，可以来这儿看看醉牛前端嗯，我做的，虽简单，但实用~\n\n## 怎样成为一名优秀的UI工程师？\n\n最近几天，有一篇文章，叫《既然写CSS很容易，那为什么大家还是把CSS写的那么烂呢？》，个人认为里面的干货并不多，但它再次引发了一些前端人的思考，大家都觉得它容易，为什么容易写得烂？\n\n我曾在知乎上回答过一个类似的问题——“写CSS，怎么知道自己的代码很烂？”，答案简单罗列如下：\n\n1、当你的单个CSS文件很大，代码很乱的时候\n\n2、当你不得不为增加新的内容而随便塞了一个新的元素，并随意给它命了个名的时候\n\n3、当你使用了很多不必要的规则的时候，比如position：absolute；display：block；\n\n4、当你忽略了继承，在反复定义font-size、color等可继承属性的时候\n\n5、当你忽略了复用模块的规划，在重复写一个相似度达到80%的两块内容的时候\n\n6、当你习惯于用一些性能很差的属性和很脆弱的结构的时候\n\n暂列这6点，不展开说了，有疑惑，有需要，咱再聊。那么怎么成为一名优秀的UI工程师呢？可以从以下三点来说：\n\n**工匠精神**\n\n关键词：**还原、探索、积累、跟进**\n\n还原：多体现在细节，比如：阴影、对齐、行距，中英文字符等，很多时候，用户，包括我们开发者本人，都难以看出这些细微差别，但往往逃不过细心设计师的法眼，而且的确会对整体的视觉效果有影响，这就需要我们对自己提出更严格的要求，也更能体现专业度。\n\n探索：平时我们都在不停的忙碌，做需求，做项目，好不容易完成了，稍微休息一下，接着做下一个，长此反复，就没时间去探索和尝试新的技术和工具，进而没有空间去改进自己的工作流程和技术方案，就会让自己的职业技能储备处于停滞不前的状态，所以，保持热情，坚持探索很重要。\n\n积累：我们在项目中难免会碰到各种问题，同时，也会不经意间碰到某种很好的解决方案，可能是一种思路，可能是一个代码段，这个时候就需要及时的积累起来，否则，每次遇到都像是第一次遇到一样，这都是成本。\n\n跟进：新事物跟进，在很多新的技术或者属性、方法出现之后，大家的节奏都是先欣喜后无奈，因为可能尚未发布正式版本或者浏览器尚未支持，然后就直接放弃去尝试和研究。温总理曾说过这样一句话“没有程序的民主，就没有实质的民主”，如果套用到这里来，可以改成“没有新的尝试，就不会有新的可行性方案”。很多时候，面对一个需求，我们会习惯性的面露难色，然后说“这个做不了”，其实有些不是实现不了，只是需要稍微多花些心思，或者是我们认知的局限，不知道有方法可以轻松实现，除了关乎项目的质量，还关系到技术选型，当手里的武器多了，可选范围才广，才能舒舒服服的去选择最优解。\n\n**更多可能性**\n\n关键词：**创造性、可行性**\n\n**创造性**：我们已经见过不少人用CSS3的技术做出各种以前不敢想象是CSS能做出来的东西，比如这两个18个你可能不相信是用CSS制作出来的东西、one-div，所以，新方法的出现，能给我们提供更多可能性，当然，你可能会说，这些都是一些奇技淫巧，在真实项目中并不实用，其实他们的存在，除了让我们感受到技术的趣味性，主要是给了我们启发，帮我们打开一扇门，至于能创造出的是什么，就看我们自己了。\n\n**可行性**：除了玩儿技术“自嗨”，实际工作中，技术的施展空间还是要跟项目紧密结合的，产品经理和设计师的想法是天马行空的，很多时候，我们并不只是一个“听话做事”的执行者，要充分发挥我们的专业性和主动性，某个idea到底能不能做，能实现到什么程度，需要多少成本，如果在早期能够沟通好，就能避免到了开发过程中或者验收的时候才有这样那样的问题。\n\n**最佳实践**\n\n关键词：**预见性、最佳实践**\n\n**预见性**：设计师给过来的视觉稿是静态的，内容是确定的，实际上线了之后，内容都是不确定的，所以，必须要有更多的考虑，才能尽可能的在前期避免掉一些不应该出现的问题，比如：文字溢出截断、文字折行、内容自适应、内容超出滚动等。\n\n**最佳实践**：有很多介绍最佳实践的文章，基本都是一些技术方面的通用注意事项，我想说的是，没有脱离项目的最佳实践，只有做了，踩了坑了，才会更加知道怎样做在特定场景下是最好的。比如：为避免结构变动引起的样式继承冲突，尽量不要使用元素选择器。因为图标在网站的每个地方和其他元素的相对位置是不确定的，所以，只定义表现，不定义布局。通用组件的外框是确定的，内容是不定的，所以，只定义外围，不定义内容。等等，都是在实际项目中才能切身体会。\n\n## 写在最后\n\n有不少人问页面重构是做什么的，也有人问，腾讯为什么把JS和CSS分开，这样做的利弊是什么？其实在文章的开头已经简单的说了，有利有弊。但是就目前前端圈的发展来看，其实是弊大于利的，但职位是死的，人是活的，如果想要学习，想要自我突破，怎样都挡不住。我们可以借张克军我的前端工程师之路的一段来看一下前端大概的发展路径：\n\n2002〜2005年，网页制作，从业者要求：手快、像素级还原、全面兼容\n\n2005〜2009年，网站开发工程师，从业者要求：网页重构、性能、SEO、jQuery（及同类）\n\n2009〜2013年，前端工程师，从业者要求：MV＊、AMD/CMD、SCSS（及同类）、Grunt（及同类）\n\n2013〜2016年，前端工程师，从业者要求：全栈、ES5/6、CSS3、RWD（响应式开发）、混合开发（所有要求向前兼容，不包含特殊领域的特别要求）\n\n从以上可以看出，不论是从市场需求还是技术领域，对前端工程师的要求都是越来越高，需要掌握更多实战技能，写出适应多终端的页面或者应用，更像是一个全能型选手。当然，大家也不用被吓到，千里之行始于足下，所有牛人都是从零开始一步步的走过来，不需要盲目的比较或者给自己徒增压力，只要你喜欢它，坚持学习和进步，定能有所成。\n\n在如今这个让人眼花缭乱的前端世界里，不论你是新手还是半生不熟，都会对选择有所迷茫，语言的迷茫，框架、工具的迷茫，书本的迷茫，公司的迷茫，怎样不迷茫？唯有行动起来，走近它，熟悉它。职业打拼的过程，就是在不断探索、积累、提升自己对事物的认知的过程。\n\n《生命中不能承受之轻》里有这么一句话，“人类一思考，上帝就发笑”。有人说是嘲笑，有人说是鼓励，我更愿意相信是鼓励，当我们在做事的同时，能够通过自己过往的经验和思考，使得以后做同样事情的时候更加高效和聪明，这就是我们能够越来越优秀的理由。\n\n最后推荐几位在CSS方面颇有研究的大牛，大漠、林小志、CSS魔法、张鑫旭，我相信很多人已经熟识，高手肯定不止这四位，但是，这四位是近年来在CSS领域最为高产、最有建树，给大家带来最多帮助的行业前辈，可以重点关注下。\n\n终于把许诺大家的文章版给完成了，很长，要吐血了~希望能够对你们有所帮助。\n\n心血之作，未经允许，谢绝转载，谢谢。\n","tags":["分享交流"],"categories":["分享交流"]},{"title":"征服javascript学习笔记（六）——面向对象的程序设计之创建对象","url":"/2016/09/21/javascript-study-six/","content":"\n面向对象的语言有一个标志，那就是它们都有类的概念，而通过类可以创建任意多个具有相同属性和方法的对象。\n每个对象都是基于一个引用类型创建的，这个引用类型可以是原生类型，也可以是开发人员定义的类型。\n\n##创建对象\n\n创建自定义对象最简单的方式，就是创建一个Object的实例，然后再为其添加属性和方法。\n\n比如这样：\n\n\tvar person = new Object();\n\tperson.name = \"idea\";\n\tperson.age = 28;\n\t\n\tperson.sayName = function(){\n\t\talert(this.name);\n\t}\n\n##工厂模式\n\n另外还可以采用对象字面量的方式，前面的文章里也有提到过，但是这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。比如：\n\n\tfunction creatPerson(name,age,job){\n\t\tvar o = new Object();\n\t\to.name = name;\n\t\to.age = age;\n\t\to.job = job;\n\t\to.sayName = function(){\n\t\t\talert(this.name);\n\t\t};\n\t\treturn o;\n\t}\n\tvar person1 = creatPerson(\"Nicholas\",29,\"programer\");\n\tvar person2 = creatPerson(\"Greg\",27,\"Doctor\");\n\n函数creatPerson()能够根据接受的参数来构建一个包含所有必要信息的Person对象，可以无数次调用这个函数，而每次它都返回一个包含三个属性一个方法的对象，它解决了创建多个相似对象的问题，但却没有解决对象识别的问题，即怎样知道一个对象的类型。这会是下面一个模式会解决的问题。\n\n\n\n\n\n\n\n\n\n","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"总有一个地方，我们未曾到达——我的鹅厂周年记","url":"/2016/08/17/tencent_oneyear/","content":"\n今天，是我入职腾讯一周年的日子，也是真正意义上第一次在一家公司待满一年。虽然在这里已经待了一年，但每天早上来到这里，晚上离开这里，都会再看看这座大楼，好像是第一天来到这里，我仍然保留着对它的新鲜感和敬畏感。这一年，表面上看来波澜不惊，其实是有着很多的经历和感悟，谨以此文跟大家分享一下这一年来的心路历程。\n\n## 大公司光环，那么远又这么近\n我相信，每个程序员，从刚入行开始，脑海里就有几个闪闪发光的名字，微软、谷歌、阿里巴巴、百度、腾讯等等，都是国内外的IT行业巨头，都会憧憬着，如果有一天能去看看该多好，更不用提如果能去那里工作，肯定会幸福死吧？~\n\n我也是，毕业之后，来深圳，与其说我是多方面考量和对比才笃定的选择深圳，不如说，是冥冥之中有一股力量把我推到这里，来追梦。是的，深圳是个很适合追梦的城市。但是，对于刚来深圳的我来说，一切是那么远，我只是一个刚踏入社会的菜鸟而已，社会经验，工作经验，都几乎为零，怎么办，先生存，先在这个城市立足，别的以后再谈吧。于是，我选择了一个门槛较低，愿意收留我的创业公司，开始了我的网页制作之路。\n\n起点很低，但我从没放弃过往上爬的想法，光有想法是不行的，要学习，要提升自己，要有机会，所以，虽然来到了深圳这座城市，我也没有到太多地方去玩儿，没有去更多的体验大城市的繁华，压力是一方面，加上一个人出去玩儿也没什么意思，所以，上下班，看书，上网查资料敲代码...就这样，过去了一年多，每次坐车途径腾讯大厦的时候，都忍不住多看几眼，然后，**心里想着：我现在的能力是在一个怎样的水平上，够了吗？应该不够吧，那里的人肯定都很厉害，我再多混个两三年再去尝试吧。**\n\n可以说是幸运，也可以说是努力终得回报，偶然的机会，得知腾讯理财通在招人，决定鼓起勇气尝试一下，之所以鼓起勇气，是因为没有把握，也没有底气，觉得自己还是有差距，但是，**如果你不去尝试，就不知道自己的差距在哪里，也就没有下一阶段再去努力的一个方向和目标，所以，就是尝试，尽力而为，成败顺其自然。**认真的做机试题，为自己赢得了面试的机会，一轮、两轮…不求成功，只求尽可能表现出自己最好的一面。\n\n最终，我成功了，从只求站在楼下看看就好，到即将可以走进这座大楼工作，有激动，有期待，更多的，是准备迎接接下来要面临的挑战。\n\n## 融入、适应\n到任何一个新的公司和团队，都有一套固定程序，办齐各种证件，了解环境，准备办公的软硬件，熟悉新同事，其实你会发现，来到这里，和到大学或者任何一家公司没多大区别，融入和适应一个集体，然后开始新的征程，这是一段看哪儿哪儿都好的阶段，也是对一个公司，一个团队进行了解的最佳时段，时不时会在乐问上看到小鲜肉在吐槽和倾诉自己的“新人烦恼”，觉得自己不懂的太多，感觉很困难，压力很大，**其实新人刚来的融入阶段，就是一个需要认识自己的不足，然后去学习、去改进的好时机，这段时间，别人都会很乐意很热情的去教你，去带你，所以，不用怕，不用急，要好好利用这段时间。**\n\n## 主动、主观\n我们常常会很憧憬，到一个好公司，一个好团队，跟一些牛人在一起，那么我们应该能有很多学习机会，也会慢慢变得很牛吧？其实这是一种假想，就像是多年前，你憧憬着，自己如果有一天考上了大学，会怎样怎样？后来呢？跟想象有很大差别，对多数人来说是差距。现实会告诉我们，想归想，落到实际的生活中，所有的东西都来不得半点虚的，都需要你去做，主观上有思考，有规划，主动出击。\n\n说到腾讯，这里有很多业界传说中的牛人不假，有各种可以学习的平台和技术分享也不假，但是**如果你不去主动参与，不去主动请教，那么，那些东西再好，也装不到你的脑子里**，另外，我们也不仅要去听那些分享，更重要的是实践，别人讲的都是自己实践和思考之后浓缩提取而成的东西，你没有经过实践，可能只会吸收一部分，甚至这一部分也会随着时间的推移而变得模糊。\n\n再来说说实践，对于很多人来说，这是不容易的，比如，新听说一个属性，可是它是怎么用的呢？我工作中用不到啊，然后就被略过，人都是有惰性的，用不到我学它干嘛？这就要谈到下面的话题。\n\n**需求驱动与个人驱动**\n很多新人会问，我已经学了“某某某”，现在我需要怎样做去进一步提高自己呢？老鸟们会说，做demo，做项目等等。\n\n这里说的“需求”便是工作当中的实际项目，对于每个人来说，这是最“轻松”的实践方式了，因为你不需要逼着自己做，别人也会逼着你做，所以，你不仅要保证质量，还要保证效率，在这其中，你遇到了什么生疏的知识点或者技术难题，都需要自己想办法去克服，这就是你不得不做的，成长和积累最快的方式。\n\n就像是上面说的那样，我们每天接触的东西都有很多，不是所有，甚至只有一小部分会用到实际项目中，那么除此之外的东西，怎么办？这就需要另一种——“个人驱动”，什么样的人会有个人驱动呢？\n\n**一种是觉得自己技术太菜了，经常无法比较好的完成所分配的工作，充满危机感；\n另一种，是真的对技术喜爱的，喜欢不断挖掘有意思的东西，不断提高自己的编程技巧和质量，利用所学的知识，做自己想做的事情。**\n\n这两种情况，都是正常的，也都是不错的，起码都是在发现，在进步，但我更希望你是第二种~\n\n## 承担、责任\n**为产品负责**\n每个公司或者团队，都有自己所做的产品，那么谁该为这些产品负责呢？你可能说老板，产品经理，其实，我们这些在一线的开发者同样有，甚至有更大的责任去为产品负责，为什么？\n**我们是执行者**，产品是从我们手中做出来的，一针一线都是由我们编制出来；**我们是专业人士**，哪里需要怎样做比较好，哪里可能会出问题，这些我们要比别人更清楚。所以，我们需要为产品负责。\n\n**为自己负责**\n作为一线员工，我们的工作质量，不仅关乎产品，更关乎自身的成长，你所积累的经验，所经历的项目，所接触的好的实践方式，这些都是可以通过做项目来获得或者尝试的，除此之外，你做的东西别人会看到，没人喜欢被说“做得很烂”，还有就是团队，你不仅是你自己，也是团队的一份子，为自己负责的同时，也是为团队负责。关于团队，下面会谈。\n\n## 大家好，才是真的好\n随着工作的开展，随着项目的逐渐推进，我们会发现很多需要做的事，比如，文件组织是否合理，需要优化吗？工作流程可以更高效吗？有什么好的工具可以在团队中推广使用吗？踩过什么坑可以提醒大家一同规避吗？学到了什么好的实用技巧可以跟大家分享一下吗？只要你想，能做的事很多。\n\n**规范化、统一化**\n另外一个需要重视，也是比较难实施的东西，就是规范。如果团队里面只有一两个人，我们的工作可以比较随意，有什么需要说的，口头交代一下也OK，但当团队中的人变得越来越多，大家对一件事的看法和做法都不同，所做的项目也越来越多，一切会慢慢变得复杂和纷乱，每个人如果都按照自己觉得更愿意，更舒服的方式去做，可能到最后大家都不会舒服，当窟窿越来越大的时候，也越难填补了。\n所以，团队里的成员，需要共同的探讨一套大家都统一去执行的规范出来，在规范形成之前，大家都可以各抒己见，去提出自己认为比较好的点，到最后，统一一致，那就是大家都需要遵守的东西了，不要出现的情况是，规范放在那里，你该怎样还怎样，那就失去了它的意义，也不能随意的去做大的更改，毕竟要考虑到的是整个团队。\n\n在这一段的最后，送大家一句话：**做一些对团队有利的事情，往往对你也是有利的。**\n\n## 可以要求别人，更要要求自己\n在我们的工作当中，难免会听到这样的抱怨：你看这个人做的，我也是无话可说，这样描述的不清不楚，这么乱，让我怎么做嘛。\n\n你，或者别人，可能都有过这样的挑剔，觉得自己的上游或者同事，做得不够好，不够专业，让自己很难办。诚然，人无完人，也都还在成长的过程中，难免会犯错，难免会疏忽，难免会偶尔对自己放松要求，所以，就有了你看到的那些没那么好的输出。但谁又不是呢？如果每个人，对自己多一些要求，那么一切会变得更好吧？可以要求别人，更要要求自己。\n\n## 加班，想说爱你不容易\n曾有个新同事，来的时候我帮她装电脑，一边装一边聊天，她问我：这里加班多吗？我对她笑了笑：你说呢？腾讯有加班文化~她很诧异，当然，我是开玩笑的。\n\n文化是没有，可是，你可以在每个工作日的晚上8点来腾讯大厦看一看，是一番什么场景，还有相当一部分人，沉浸在自己的工作当中不能自拔~或者你可以更晚，24：00以后，还会有人，很疯狂吗？深圳加班最多的大楼统计里，从来都没有少过科兴的身影，而它是腾讯互娱的所在地。\n\n好吧，说了这么多，不要怕，我并不是告诉你，来这里就要加班，就必须加班，而是周围会有那样一种氛围，这里没有严格的上班和下班时间，你只需要做好你该做的事，可能那些加班的人，真的不是不能走，而是喜欢待在那里不想走呢？~\n\n## 瓶颈和热情\n瓶颈，每个人都遇到过，从这个层面上来说，初学者是最幸福的，虽然相对显得无知，被人看作菜鸟，但每接触一个新东西，都是在快速吸收营养，能够保持住足够的好奇和热情，快速成长。而当学习到了一年，两年，三年，你在某个领域所能学习的知识，所做的东西，所遇到的难题、解决的问题，都已经达到了相对饱和的状态，这个时候，如果你没有比较好的平台去开拓视野，也没有主动的走出去发现一些新的东西，则会陷入瓶颈期。\n\n怎样从主观上努力走出瓶颈呢？可以从这三个层面入手：\n\n**项目**\n很多人进入了一个团队之后，会做比较多某一类的项目，对另外一些接触较少，甚至没有什么实践，比如：只做PC，只做系统等，那么，PC已经很熟了，移动呢？产品已经很熟了，活动呢？静态已经很熟了，动画呢？基础的东西掌握差不多了，性能呢？用户体验呢？效率呢？等等，从这些不同方面考量的话，你是否察觉了自己在实践当中存在着明显的短板？有没有空白？那么你就能知道自己的不足在哪里，不要怕做从来没做过的东西，不要怕接受看起来很难的任务，你就会得到新的成长。\n\n**知识维度**\n每一种技术，都是由很多知识点组成，在最开始学习的时候，我们没有完整的项目去做，也不会去针对某一点深挖，而是沿着比较系统和基础的线去学习，当我们学得差不多了，能够上手开始做简单的项目，便走入了实践之路，在不断的实践当中，遇到了问题，我们会再去找解决方案，去找答案，重新的，更深层次的对原有知识进行审视和理解。但即便是这样，我们也不可能把所有问题都遇到，都解决，那么，**有很多的知识细节，原理，会被我们主观上忽视掉，以为自己会了，掌握了，够用了，没问题了，人都会这样，没有暴露问题，就意识不到问题，往往我们又容易被不经意间出现的问题弄的束手无策，**每当问题出现的时候，你就应该知道，自己的功力并没有想象的那么深厚，那么无懈可击。所以，学会挑战自己，主动突破自己，是突破瓶颈的要点。\n\n**职位交叉点**\n什么是职位交叉点，举个例子，你是一名前端，那么往往会要求你对后台也有一定了解；你是一名UI开发，也会对设计和审美有一定要求。工作当中，不会对职位之外的范畴去做硬性的，很高的要求，但如果我们能够多涉猎一些相关的东西，多掌握一些技能，对工作当中的合作和自身的工作效率都会有不小的帮助。\n\n除此之外，还有什么会造成我们停滞不前呢？\n\n## 幸福的温室\n在很多人眼里，相比在一般公司，小公司工作的人，我们是幸福的；相比很苦很累，一个月却只能挣两三千，三四千薪水的人来说，我们是幸福的。于是，当我们很努力的走了进来，还会不会像当初那样，有着明确的目标，憋着一股劲继续努力？或许你会，但必然有另一部分人不会，这就像是到了一个温室当中，很舒服，没有危机感，不再那么朝气蓬勃，不再努力朝着阳光倔强生长。我不知道有多少人是这种状态，只能去尽力的避免自己不要那样。\n\n## 良性比较，职业发展的相对与绝对\n在进入公司之前，会想象着，这里肯定都是精英，大牛，肯定都高不可攀，会有很大压力。入职的时候，每个新人都会有一个“达人访谈”的任务，我选择了自己一直想与之交谈，也面试过我的“鬼哥”，他在腾讯已经第十个年头，访谈中，我问了他这样一个问题，您从业这么多年来，怎样看待自身的职业发展？他的回答很实在，大概意思是，人一直是处在不同的阶段，每个阶段都会有自己还没有接触到的东西，还不足的地方，即使是我现在这个位置，看起来蛮高了，但依然远没有到顶，上面还有很多人比我更高，更好。\n\n这就是我要说的相对位置，就像鬼哥所说，不论我们做得多好，多差，都是有一个跟别人比较而出的相对位置，有相对位置，当然也有绝对位置，那就是对自身能力的客观考量，**比别人差，那相对之前的自己是不是有了进步？比很多人做得都好，那是否就没有了进步的空间，是否做到了自己能做到的最好？**\n\n认识自己，良性比较，我们才能保持一个比较好的心态继续前进。\n\n## 懂得感恩\n**公司**\n腾讯人，除了别人眼里的高薪，还有很多福利，看得见的，弹性工作时间、班车、茶水饮料、健身房等等，看不见的就太多了，我常这样跟人形容：只有你想不到，没有它不提供。但即使这样，还是会有人时不时吐槽自己对公司哪里很不满，哪里很不公。\n\n我想说的是，不管你觉得有哪些委屈，有多累，有多少你应得的没得到，你都要想，已经有了什么，它给了你多少，那些你还没得到的，是因为团队，因为公司，还是你自己？\n\n**自己**\n感谢自己什么呢？首先感谢自己努力来到了这里，还要感谢自己在工作中所做出的那些小小的成绩，那些收获，甚至犯过的错误，因为很多时候，我们自身的提高是无形的，也是不易被别人察觉的，在尚未得到别人认可的情况下，自己要学会给自己激励，以获得更多前进的动力，要知道，大多数人都会是平凡的，默默无闻的，但这不代表我们的进步和成绩都是没有意义的，那是属于我们自己的东西，是我们职业生涯的财富积累，谁也拿不走，只要我们在不断的成长，说不定什么时候，就会发光，发热，被更多人看见~\n\n## 是终点，更是起点\n平时跟旁人聊起腾讯，人常会这么说，“世界500强”、“互联网巨头”、“薪资待遇好”、“很神秘”，诸如此类的词汇，诚然，很多人好奇，很多人想来，我自己已经重复了整整一年的时间每天在这座大厦里进进出出，不可谓不熟悉，却仍然抱有“我是怎样来到这里”的敬畏感。如果你也和我一样，通过不懈的努力加上无畏的勇气，终于来到了这里，那么请足够珍惜在这里的机会，它曾经是我们梦寐以求的，是我们那段奋斗经历的终点，更是走向下一站的起点。\n\n## 写在最后\n还记得，刚来公司的那段时间，做项目，写的代码存在着这样那样的问题，不能说写得不对，是不够好，不规范、不好维护、可扩展性不够等，导师都给我及时指了出来，后来，我受到那些问题的刺激，写下了一篇文——[那些年我干过的矬事](http://ideazhao.com/2015/10/17/those-year-i-do-bad/)。这篇周年记的标题，也是来源于这一路走来所遇到的类似的事情，**我们总是容易觉得够了，然而，却总有未曾到达的地方。**\n\n**人最痛苦的事，不是自己觉得可以，别人觉得不行，而是自己对自己失望，**所以，我很不想看到，一年前的自己比三年前的自己更优秀，一年之后的自己，却比想象中的差很多，所以，我会对自己说，忘掉成绩，忘掉负担，拾起好奇和热情，重新干起来吧，就像曾经做过的那样。\n\n\n\n\n\n","tags":["成长，经历，思考"],"categories":["思考"]},{"title":"静静的打开一本书，你会看到新的世界","url":"/2016/08/15/readbook_seetheworld/","content":"\n今天，读完了今年的第7本书，和那些一天就能读完一本书的人比起来，算很慢的了，可是，读那么快干嘛？\n\n第7本是刘同的《向着光亮那方》，说实话，知道他是因为《谁的青春不迷茫》比较火，他也通过自己的努力成为了一名畅销书作家。我是喜欢读也喜欢写的，今年4·23世界读书日，我在网上淘书，突发一个想法，那么多年轻人出书，我为什么不行？于是，当下脑子里像是刮起了风暴，平时自己思考过的很多问题都涌现出来，觉得可以写的东西好多啊，说来就来，提纲一列，随便就出来十个章节，踌躇满志，仿佛已经想到了书出来之后的情形。\n\n我真的开始写了，于此同时，我排斥其他所有人写的东西，觉得他们写的好窄，好浅，好俗……慢慢得我就发现，自己写得东西并没有多么受欢迎，成功也并没有想象来得那么快。这个时候我开始重新审视自己的初衷，也开始正视别人的优点和价值，重新开始阅读别人的作品，《向着光亮那方》便是其中一本。\n\n在今年以前，我已经很久没有阅读和好好的写文了，大学时买的书，有的我到现在还没读，并不是不爱了，也不是没时间，而是自己给自己制造出的压力填满了生活，一门心思在事业上，无暇顾及其他，不愿意投入精力去做别的“没用的”事情，更不用说，需要很安静状态的阅读和写作。\n\n这一切都在今年伊始改变了，因为我发现，生活里并不只有工作，很多事情也不是你发狠努力一阵子就一劳永逸，生活还是要从长计议，也要多元化，不仅能缓解疲劳，还能更丰富有趣，你会发现，自己的脚步没有那么急迫了，神经没有那么紧绷了，但依然不断前进着。\n\n思想通了，心态变了，行动就显得容易，我有了能重新静下来的能力，只要你能静下来，就会发现，很多不能接受，看不进去，听不进去的东西，就都能接受了，而且会觉得，有感悟，有感动，还很有趣～\n\n读刘同的书，就像是听郭德纲的相声，你不用管它是怎么开始的，读着读着，就被带入进去，它像是某个很熟悉的，在自己身上发生过的故事，亲近又有趣。这种状态下，其实是已经脱离了对文字本身文采和趣味赤裸裸的追求，而是想通过阅读去满足心理上某种需求，共鸣也好，力量也罢，你相信了作者能给你，那些文字能给你，不管它有多厚，你都能一字不漏的读下去。\n\n当然，我并不只是推荐给你这一本书，而是想让你也能像我一样，慢下来，静下来，或许你并不想读书，那么干点别的什么喜欢的都可以。\n\n总之，轻松快乐的努力着，心满意足的收获着，就好～\n\n\n","tags":["思考"],"categories":["思考"]},{"title":"没那么难，谈CSS的设计模式","url":"/2016/08/07/css_design_method/","content":"\n## 什么是设计模式？\n\n曾有人调侃，设计模式是工程师用于跟别人显摆的，显得高大上；也曾有人这么说，不是设计模式没用，是你还没有到能懂它，会用它的时候。\n\n先来看一下比较官方的解释：\"设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。”\n\n今天我们来聊聊CSS的设计模式。\n\n设计模式，这个词汇我们常见，几乎所有的编程语言都会有几套，但深入研究的人不多，原因如下：\n\n1、似乎没有太大必要性去强调它，有问题了改一下或者按团队规范来就行；\n2、不去使用一些既有的模式也无伤大雅；\n3、不少人所接触的业务量级还没有达到需要规划和组织的程度，光写布局，写特效，照顾兼容，就够喝一壶的了，没有意识去思考一些方法论的问题。\n\n当然，这三者都是我经历过的，相信你也是~\n\n我们都会长大，都会慢慢的做更多、更大、更复杂的项目，这个时候，就需要自上而下，全流程的去思考一些问题，后台不说，只讲前端，比如：风格的制定、色调、模块、布局方式、交互方式、逻辑等等，如果再加上团队合作，若再没有一个规划的话，要不了多久，那些看起来没问题的代码，就会暴露出各种问题，模块命名、类的命名、文件的组织、共用模块的提取、代码的复用、可读性、扩展性、维护性。它们看起来只是一些简单的小动作，却需要你看得更远，避免将来出问题需要付出更大的代价，甚至被迫整个项目重构，可谓，功在当代，利在千秋~\n\n既然要对CSS进行设计，那么肯定是它本身存在一些问题或者缺陷，其中，一个最明显的就是，**它的任何一个规则，都是全局性的声明，会对引入它的页面当中所有相关元素起作用，不管那是不是你想要的。而独立及可组合的模块是一个可维护系统的关键所在。**下面，我们就从多个层面来探讨一下，到底该怎样写CSS，才是更科学的。\n\n## 从需求出发\n\n**分**\n我们刚开始学习写字的时候，是不会去考虑，写出来的某句话好不好，文章结构合适不合适，因为我们是意识不到的。写代码也一样，刚开始，我们只是去定义规则，能用对了属性，语法正确，把页面实现出来了，就好。慢慢地，就会发现，页面也是有结构的，我们按照页面的结构去组织代码，会不会更好？比如，分成头部、导航、侧边栏、banner区、主内容区、底部等。\n\n然而这样貌似还是不够，因为还有一些东西，复用度是很高的，又不好把它归为任何一个固有模块，比如：面包屑、分页、弹窗等，它们不适合被放到某一个固有模块的代码中，就可以单独的分出一段专属的css和js，或许，这就是组件化的由来~\n\n**拆**\n在分了之后，我们的代码看起来已经比之前好很多了，组织清晰，维护性大幅提高，但是，好像还是不够，我们会发现另外一些东西，很细小，但复用度也很高，它们同样不适合被放到模块中去，比如，边框、背景、图标、字体、边距、布局方式等等。如果我们在每个需要它们的地方，都定义一次，它们会被重复很多次，显然，这背离好的实践，会造成代码冗余和维护困难。所以，我们需要“拆”。拆过之后会怎样？我们想在哪里用可以直接加，需要改的时候统一改。\n\n**排**\n经过了“分”、“拆”，我们的代码结构已经十分清晰，各个内容模块，功能模块，UI模块都乖巧的等待召唤，那么还差什么？是的，还差有序的组织，分类清晰之后，还需要排列有序，从不同纬度去考量，我们总能精益求精。举个栗子，我们可能会看到像这样：\n\n@import \"mod_reset.css\";\n@import \"ico_sprite.css\";\n@import \"mod_btns.css\";\n@import \"header.css\";\n@import \"mod_tab.css\";\n@import \"footer.css\";\n\n我们将不同的部分按照一定的顺序去摆放，能让我们的代码看起来更加有序，易于维护，同时，有利于进行继承或层叠覆盖。不要小看这一步，看似可有可无，实际要求比较高的统筹规划能力，可以减少冗余代码和快速定位问题位置等。\n\n除此之外，我们依然可以有其他的方法来帮助我们进行区分代码范围，比如：\n\n1、在文件头部建立一个简要的目录\n\n![](css_design_method/01)\n\n2、使用区块注释\n\n![](css_design_method/02)\n\n在注释中，应该尽量详细的写清楚该段代码的目的，状态切换，调整原因，交互逻辑等等，这样不仅利于自己的维护，更加利于别人接手维护你的代码。\n\n## 从结论出发\n\n除了需求当中一些通用部分，另外一些也是需要注意，但不会被正式定义的东西，它们来源于我们的实践经验，比如：\n\n**层级嵌套不要太深**\n\n稍微了解一些浏览器渲染原理的都知道，它在解析CSS规则的时候，是从右向左，一层层的去遍历寻找，如果层级太多，必然增加了渲染时间，影响渲染速度。另外，如果选择器层级过多，也就间接反应了，你的HTML结构可能写得不够简洁。\n\n那么具体多少层合适？一般建议是不超过4层，但话又说回来，超过4层会怎样吗？不会有多明显的影响，除非你写到很恐怖的数量，或者项目极其庞杂，可能能看出来影响，其实从我们日常需求来看，4层以内足可以解决绝大多数问题，故而，是合理的。\n\n**避免使用元素选择器**\n\n出于两点考虑：\n\n**第一点**，和上一段提到的相关，在HTML中，有很多常用的高频元素，比如，div、p、span、a、ul等，如果，你在多层选择器的最内层使用了元素选择器，那么，在开始寻找时，浏览器就会遍历HTML中的所有该元素，显然，这是没有必要的。\n\n**第二点**，我们的需求和代码结构都是存在着潜在变化的，今天写好了一个页面，明天可能就要再加进去一个按钮，再加进去一句话，再加进去一个图标。我们写好的一个结构，也随时可能被复用到别的结构中去，所以，如果，你使用了元素选择器去定死某个东西，不论是新加进来的东西，还是被复用的东西加到别的结构里去，都极有可能产生样式的冲突，这个时候，你又不得不写多余的样式进行覆盖修正，或者重新定义类。\n\n所以，出于以上考虑，在具体的代码模块中，尽量不要使用元素选择器，使用元素选择器的前提是，你完全的确定，不会导致出现问题。注意，我用的限定范围是“具体的代码模块”，那么用于定义通用规则的样式，是可以的，也是推荐使用的，比如，reset。也可以是别的地方，这就需要我们自行考量。\n\n**避免使用群组选择器**\n\n群组选择器会有什么问题？直接上图吧。\n\n![](css_design_method/03)\n\n图中这种情况不多见，此处只是举个例子，这里写了三组选择器，用来定义不同地方的同一种样式，其明显的缺陷是，如果有第四个地方需要使用到，你不得不再往里加一组选择器，如果有10个不同的地方，你就写10个？这对于维护来说，是很痛苦的，聪明的我们，怎能被如此繁复又不必要的劳动所困扰，故而，墙裂不推荐此种做法，完全可以提取出来一个公用类，定义统一样式，然后，哪里需要放哪里，复用和维护都会更加方便。\n\n当然，你可能会说，我在写第一个的时候，不会知道后面还有那么多，有没有必要提取是不知道的，是的，所以，需要你根据经验去判断，也需要在项目推进过程中，适时的对代码进行整理和重构。\n\n**文件引入的数量和顺序**\n\n对于刚接触网页的朋友来说，这两点也是容易忽视的，因为它们看起来没什么大影响，多几次请求，样式是否已经加载，都没那么容易把人逼疯，但是出于对用户体验的极致追求，我们还是希望文件请求次数尽量少，内容的显示有个优先顺序，文件加载有个先后顺序，这样，在实在难以缩减文件大小的时候，让用户先看到更重要的，正常展示的内容。\n\n以上只是几点举例，更多实战结论，大家可以多读相关的博文或者书籍，都会有前辈们的经验之谈。\n\n## 从矛盾出发\n\n**通用和语义**\n\nNaming convention is beneficial for immediately understanding which category a particular style belongs to and its role within the overall scope of the page. On large projects, it is more likely to have styles broken up across multiple files. In these cases, naming convention also makes it easier to find which file a style belongs to.\n\n命名规则有助于立即理解一个特定样式属于哪一类，它在页面的整体范围内的作用。在大型项目中，它更可能有在多个文件中被打破的样式。在这种情况下，命名约定也可以更容易地找到一个样式属于哪个文件的文件。\n\n很多时候，我们需要一个东西被定义为通用的，以便复用，比如：模块标题、按钮、提示文字、图标等，最开始的时候，我们习惯去看视觉稿的内容，是“新闻”，我们就定义“new”，是“关于”，我们就定义“about”，是红色的按钮，我们就定义“red-btn”等，这样会导致一个问题，如果有另外一个跟新闻列表差不多的样式和结构，但不是新闻，怎么办？继续使用“new”显然不合适，这就告诉我们，不能把目光局限于内容，需要内容和结构分离。\n\n不能用“new”了，那用什么呢？abc？123？这样总不会冲突了吧，万事大吉~其实，这是走了另一个极端，这样虽然在很大程度上避免了和别的模块冲突，但其本身的可读性就被大大降低了，别人，甚至你自己过一段时间都会忘记它是什么，对于团队合作是很不利的。至于需要用什么样的命名方式，需要你根据项目的整体来进行规划，适合根据什么特点来区分与之不同的结构，又能让人比较容易的在名称和结构之间建立联系，比如所属类别、功能、页面等。\n\n**团队和个人**\n\n一个团队当中，大家的经历不同，编码水平和习惯也不同，这样就会造成，一个人一个写法，你用中划线，我用下划线；我用英文全拼，你用简写，等等。这些虽然没有什么对错之分，但对于团队成员之间的协作造成了不小的障碍，别人必须花时间去适应和读懂你是怎样组织和定义的，这就无形之中提高了成本。\n\n所以，就有了“团队规范”存在的必要，规范除了一些写法上的规定，让我们的代码更加统一，清晰，可读性更强，辨识度更高。还可以提取一些最佳实践和复用模块等，对于团队里每个人来说，都是有好处的。\n\n当然，对于人来说，最难的，莫过于调整既有的习惯，这就会有进入一个团队之后“转型”的阵痛，其实这种痛也是成长的痛，你会学习到更好的编码方式，更好的实践方法，会从项目或者团队的整体去考量一件事的价值和意义。\n\n**CSS和预处理器**\n\n前面我有文章详细的谈过CSS预处理器，我曾经对它也是排斥的，因为学习成本，因为觉得应用起来没有必要，可是一旦你决定去学习使用它，就会觉得不是那样，预处理器在向你介绍它自己的时候，就有特意强调过，它的语法是和CSS完全兼容的，也就是说，你在LESS或者SASS文件中，直接写CSS代码是没有问题的。除此之外，它能给我们提供很多便利，比如定义统一的变量；使用嵌套而不用一直重复着写一些选择器；可以提取公共的代码块然后很方便的复用等等。\n\n故而，当我们已经把CSS组织和书写得很好了之后，预处理器，就是再次为我们插上一双翅膀，能更灵活和高效的编码。\n\n## 从现有模式出发\n\n再来简单看看一些广为流传的模式。（ps：先后顺序与排名、好坏无关）\n\n**一、OOCSS——Object Oriented CSS**\n接触过计算机的应该都知道，OOP——Object Oriented Programming，如果你是第一次接触OOCSS，你会很困惑，难道是“面向对象的CSS”吗？它不是一本真正的编程语言啊，如何面向对象？\n\nOOCSS，最早被提及，是在2009年，它的两大原则是：\n\nseparating structure from skin and container from content.\n\n直译过来就是，结构和皮肤分离，容器和内容分离。\n\n即不要把结构和皮肤以及内容进行强耦合，而是相互独立，所要达到的目标是更易复用和组合，可以选择使用，选择引用等。\n\n详细了解链接：https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/\n\n**二、SMACSS——Scalable and Modular Architecture for CSS**\n\n从实践上说，OOCSS给出了一种值得借鉴的思想，但在代码的组织方面，它并未给出具体的实施方法，从这一点上来说，SMACSS更进一步。\n\n它的核心是：\n\n1、Base（基础）\n基础的样式，就是一些需要最先定义好，针对于某一类元素的通用固定样式。\n\n2、Layout（布局）\n布局样式，是跟页面整体结构相关，譬如，列表，主内容，侧边栏的位置、宽高、布局方式等。\n\n3、Module（模块）\n模块样式，就是我们在对页面进行拆的过程中，所抽取分类的模块，这类的样式分别写到一起。\n\n4、State（状态）\n页面中的某些元素会需要响应不同的状态，比如，可用、不可用、已用、过期、警告等等。将这类样式可以组织到一起。\n\n5、Theme（主题）\n主题是指版面整个的颜色、风格之类，一般网站不会有频繁的较大的改动，给我们印象比较深的是QQ空间，其他应用的不是很多，所以，这个一般不会用到，但有这样一个意识是好的，需要用到的时候，就知道该怎样规划。\n\n有了以上5点分类策略，我们的代码组织起来，思路就会很清晰，会安排的很有序，另外的好处是，可以解决命名难和混乱，之所以有这个问题，主因便是我们不知道以怎样的标准去定义元素的所属和特点，有了分类之后，我们不会很随意和混乱的去命名，有了依据，就能更轻松，也不易冲突。\n\n详细了解链接：https://smacss.com/\n\n**三、Meta CSS**\n\n原子类，也可以称之为“无语义”类，像这样：\n\n![](css_design_method/04)\n\n它的特点是什么？样式和结构、内容无关，预先定义好这么一组规则，在需要的地方加上即可，我相信每个人第一次看到这种写法的时候，都会想：还能这样写啊？！是的，总有一些人，一些新的思想和方法会涌现出来，它就是其中之一，当然，并不是在称赞其本身有多么好，而是说这种现象和过程是好的，它本身经常被人吐槽，比如：“这样写和直接内联有区别吗？”、“如果要调整样式，就要去改HTML，维护更加麻烦，也有违样式和结构分离的初衷”等等，其实我个人也是不赞成上面这种写法的，如果你要把这些抽离出来，那么还有什么抽不出来的呢？而且这些属性，在项目之间，页面之间，模块之间，并没有太大的通用性，把这些抽出来，只不过是稍微懒省劲儿些，但为了照顾到更多情况，你必须写入冗余代码，是得不偿失的。\n\n虽然它有缺点，我个人赞成另外的一些东西分出来，比如：浮动（float）、文本布局（text-align）、Flexbox布局等，**这些是没有那么多可能性的值，而且使用频繁，复用方便，改动较少，**除此之外，你还可以提取另外一些公共的小颗粒类，比如按钮的种类，文字颜色的种类等，这些**和CSS本身无关，和项目相关，这就是借鉴其思想，而不是直接拿来用**。\n\n**四、BEM**\n\n严格说来，BEM不是一套有骨有肉的模式，也不仅仅局限你在CSS的层面去规划，它是一种怎样去组织、编写代码的思想，而且，看似简单的它，对前端界的影响却是巨大的。\n\n它的核心如下：\n\nBlock（块）、Element（元素）、Modifier（修饰符）\n\n它帮助我们定义页面中每一部分的级别属性，从某种意义上说，也是一种“拆”。命名规则如下：\n\n![](css_design_method/05)\n\n它的出现，曾给不少人带来启发，但是也有另一部分人仍然抱着挑剔的态度，譬如：\n\n1、风格不统一，显得代码不够整洁美观\n2、可能会导致类名过长\n\n还是前面说的，你可以不去直接用它，但要清楚它的优点：**能够使得我们仅通过类名就知道哪些代码是属于一个模块内，以及在模块中所起的作用。**然后借鉴之。\n\n当然，BEM集聚了很多人的心血，也得到了很多的赞誉，其中就包括OOCSS的作者。所以，它肯定不是这么简单。它还会告诉你，怎样配合着js来写，你的文件怎样组织更好，项目该怎么构建等。详细可以到官网去查阅。地址：https://en.bem.info/\n\n## 从实际出发，决定结果的人是你\n\n到底怎样使用设计模式？\n\n虽然已经有成熟的设计模式，但在实际当中，你可能觉得哪个跟自己的项目都不能完全吻合，或者你要去为了使用它们而调整，成本很高。其实，**我们不需要去迎合模式，要让模式为我所用，你需要去了解它们背后的原理，要知道它们用什么方式解决了什么问题，然后借鉴之，用它的方式解决我们的问题**，就好，这样就不需要作难要不要用，也不需要纠结选哪个，不是简单的说哪个好，哪个不好，总有我们能够用得上它的地方。海纳百川，集百家众长。\n\n我个人一直以来所坚持的另一个观点就是，前端开发的三驾马车——html、css、js，不要，也不能孤立的去谈那样好或者这样好，我们极少会有只用一次的代码或者模块，也不会只写一种语言，三驾马车都是在一起协作的，都是会有复用、扩展和团队合作多方面的因素在里面，故而，不能抱着这样的想法：**我现在就在做这个，它就是唯一的，就是固定的，没问题。其实很多问题都是潜在的，要带着发展眼光去看待。**项目的文件之间，项目之间，团队成员之间，不论你的分工是哪块，都要考虑到前后的影响和可能给合作带来的不便。\n\n怎样才是最佳实践？有“实践”，才有“最佳”，脱离实际情况谈最佳，就是空中楼阁。那么，最好的模式，不是哪个经典的模式，而是在项目进行中，不断的磨合调整而出的。故而，不需要再惧怕看起来不明觉厉的设计模式，也不需要因为自己还不懂设计模式而郁闷，它就是人们总结出来的实战方法，你也可以有自己的模式~\n\n\n\n\n","tags":["CSS"],"categories":["CSS"]},{"title":"抛开语法，深度剖析CSS预处理器","url":"/2016/06/27/less_sass/","content":"\n## 背景\n \n现在来说这些，显得晚了些，大家倾向于去关注最新、最酷的技术，所谓技术的潮流，处理器的概念不算新的，每个前端从业者，应该都使用过或者瞄过两眼。有些人，试用过之后觉得不错就一直用并且推广下去；有些在用了一下之后就放下了；而另外一些，可能看过之后就没有再用。\n \n不管你是属于哪一类，其实，我们都应该是保持一种好奇和敬畏之心，去看待它们，毕竟，它们是应需而生，突破思维局限，打破语言局限，能够在一定程度上提高效率，制造便利的好工具。学习之，研究之，是有必要的。\n \n先来看看目前为止CSS的痛点在哪里？\n \nCSS的出现\n \n1、为结构和表现分离提供了便利。\n2、为一个文件多处引入，改一处多处改，提供了便利。\n \n但是，其最大的缺陷在于，完全静态，所有代码都需要一板一眼的敲上去。比如：\n \n1、嵌套\n2、复用代码段\n3、模块化开发的不灵活\n4、不具备逻辑能力和抽象能力\n \n或许，我们可以动用聪明的头脑去规划，去设计，来提高代码的可维护性、可读性和可复用性，但它的硬伤是难以突破的。\n预处理器的共同点\n \n大家都知道，处理器不止一种，比如sass、less、stylus等，很多人都问过这么个问题，我要选哪种好呢？它们有什么不一样吗？首先来看共同点：\n \n**1、变量**\n \n懂得编程的人都知道，变量，就是一个容器，你把一个值存进去，然后各处均可通过引用它去访问那个值。所以，它适合批量定义和修改。\n\n就是这么简单，那么问题来了，什么时候适合创建一个变量？\n\n* 该值至少重复出现了两次；\n* 该值至少可能会被更新一次；\n* 该值所有的表现都与变量有关（非巧合）。\n\n基本上，没有理由声明一个永远不需要更新或者只在单一地方使用的变量。一般来说，变量长这个样子的\n\n![](/img/less_sass/1.png)\n\n不同的处理器前面的符号不同。\n\n**2、嵌套**\n\n来看一张大家都熟悉的代码段\n \n![](/img/less_sass/2.png)\n\n明显可以看出，上面这段代码，在选择器部分，行与行之间都有一些重复，这样对于我们的书写带来很多重复。而处理器所提供的嵌套规则，使得我们免于不断的去写已经有了的父容器，可以直接在后面书写子容器的选择器，比如可以像这样：\n\n![](/img/less_sass/3.png)\n \n当代码量足够多的时候，这样就相当提高效率。\n \n**3、模块化管理、易维护**\n \n当我们在做中、大型项目的时候，往往一个功能或者模块，会在很多页面都用到，如果我们把它们单独的放到所有页面对应的代码中，那么每次修改，我们都要去改所有的代码段，这显然是低效的，如果将它们放到一个大的公共文件中，有很可能造成冗余，或许，你会说，可以放在一个单独的文件中，然后引入到页面中，就行了，这样是可以，但是会多出来一个文件的请求，如果有多个，那么从维护性和性能两方面考虑的话，就得不偿失了。所以，我们可以使用处理器中的@import规则，把复用代码段提取，然后在需要的页面引入，这样，同样能达到“一处变、处处变”的效果，而且，不会有多余的请求发出，一个页面可以只有一个css文件即可。\n \n比如这样：\n\n![](/img/less_sass/4.png)\n\n我们可以把一个固定的组件，封装为一个单独的文件，然后在需要的文件里引入即可，这样方便维护，也不会在不需要的页面里放多余的代码段。\n \n**4、Mixins**\n \n在css中，有些时候，需要写一些不情愿，但又不得不去写的复杂代码段，最典型的例子就是CSS3的效果，为了兼容不同浏览器，加一堆浏览器前缀。如果使用的频次较高，这仍然会成为不小的成本。虽然我们可以用编辑器的插件去快速补全，那么也是需要重复操作的，何不让我们只写一次然后都复用之呢？\n \nMixins给我们提供的就是实现大段样式的重用，我们可以把需要写的东西事先封装起来，然后给其数值部分设置为参数，这样，我们在需要用到类似东西的时候，就可以直接调用已经定义好的mixin，对于尺寸大小的不同，只需要传入不同参数即可。\n\n![](/img/less_sass/5.png)\n \n上面列出了一个参数的例子，我们知道，css属性里面很多时候不止一个值，这里也不局限只是一个属性，所以多个参数也是允许的，这样大家可能还会有个困惑，多个参数我是需要严格按照顺序书写吗？其实不必，sass给我们提供了  $name: value 的格式，比如我们可以这样定义：\n\n![](/img/less_sass/6.png)\n\n\n只要对应的设置value就好。\n \n**5、extend扩展/继承**\n \n这可以说是处理器的一个亮点，你定义了一个类，后面如果有另一个类需要用到和已经定义了的类同样的属性和值，那么你可以通过@extend来直接引用已经定义的类，来再次使用它定义过的规则。\n \n这样不会多出来很多重复代码段吗？可能你跟我有过同样的困惑，其实它生成的，是一个群组选择器，也就是多个类共用一段css样式规则，这样做的好处是，在你想定义有共性又有差异的一组元素时，不需要写多个类，只需要写它单独定义的类即可。\n \n我个人认为，这样的写法，如果是在数量不多的时候，跟提取一个基类，再追加扩展类的成本是差不多的。并显示不出优势在哪里，只不过是多写了几个类在html里还是css里，那么如果是html的重复单元数量很多，差异项又不多的时候，使用这种方法是会更好一些，因为不需要有跟html的每一项进行绑定的基类了。亮点就在于你所定义的这个可以扩展的类，是不需要添加到html里面的，只是在编译之前的sass层面用来定义了一段公共块便于引用。比如：\n \n\n![](/img/less_sass/7.png)\n\n\n![](/img/less_sass/8.png)\n\n\n此处“.error”这个类，就是sass层面所定义的复用类，不必使用在html中。\n\n那么问题来了，我们是否有必要去定义一个从来不需要在html中使用的类？可能你觉得它的影响微乎其微，但从sass3.2之后，追求极致的开发者还是给出了对应的特性，那就是“%placeholder”，选择器占位符，有了它之后，我们就不需要定义一个没有实际作用的类了，当然，你可以选择去定义一个类并使用它，都随你~\n \n**6、运算**\n\n涉及到运算的，肯定就是数字相关，加减乘除，那么能进行怎样的运算呢？如下：\n\n\n![](/img/less_sass/9.png)\n\n上图所示，可以用属性名直接计算，也可以使用数值，数值当中的单位需要统一，也可以缺省，甚至你可以写一个不存在的单位，编译的时候都不会报错，但如果前后不同，就会报错了。\n \n应用场景：\n \n猛一想，没有哪里需要用到，但是，我们仍然是落入了惯性思维的圈子，其实平时的很多计算我们都是心算或者计算器来算，然后写到样式里面了，比如说，当一个容器需要被几等分的时候，每一项需要多少；当一种布局需要一边定宽一边自适应时，自适应的这边应该是多宽。等等，这些都是可以使用运算来搞定的，维护起来也更容易些。\n\n其实现在css3已经加入了\"calc()\"这个具备计算能力的函数，但是，在某些仍不支持它的浏览器中，预处理器的计算能够弥补这一不足。\n \n**7、函数**\n \n我们知道在很多编程语言里都有函数的概念，但早期的css是没有的，那么预处理器就给我们提供了一些函数，比如：\n \n\n![](/img/less_sass/10.png)\n \n这里定义了两个变量和一个函数，函数有一个参数“$n”,通过编译，执行了函数之后，有了右边的css代码。\n当然，这是个自定义的函数，预处理器有自己的一些内置函数，比如：\n\n**颜色函数：**\n\n rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；\n\n rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；\n\n red($color)：从一个颜色中获取其中红色值；\n\n**数字函数：**\n\n percentage($value)：将一个不带单位的数转换成百分比值；\n\n round($value)：将数值四舍五入，转换成一个最接近的整数；\n\n ceil($value)：将大于自己的小数转换成下一位整数；\n\n floor($value)：将一个数去除他的小数部分；\n\n以上列出的是sass中有的，是不是似曾相识？还有其他非常多的函数，多到什么程度呢，多到你怀疑它们是用来干嘛的~有兴趣，可以轻戳这里了解http://sass-lang.com/documentation/Sass/Script/Functions.html\n\n是的，即使我鼓励大家用预处理器，但是不得不说，平时我们的项目中用不到这么多，所以，大家大概知道就好。\n\n**8、条件判断**\n \n提起条件判断，我们就会想到if...else...那么，css中有需要使用它的地方？刚开始我也是觉得没有，因为很多需要判断的地方，我们都交给js去做了，对吧？所以，还是有用武之地的。比如：\n\n当浏览器版本低于IE9的时候，使用哪段样式；当我们某个元素需要切换状态的时候，使用哪段样式。等等。就像下面这样。\n\n![](/img/less_sass/11.png)\n \n**9、循环**\n \n循环的出现意味着存在本不可能出现在Sass中的复杂逻辑。在使用循环之前，务必确定这么做是有道理的，并且确认这么做可以解决问题。\n \n我们会好奇的是，在哪里循环，用来干嘛？\n \n说实话，一时能想到的用处真的不多，当我们需要用到它的时候，其实和js里面的循环用途类似，需要处理一组有着相同性质且有规律的东西，比如，一个列表的li，一个表格的tr、td，或者较有规律的雪碧图，再或者，你在自己能够驾驭的范围内自定义的一个属性或属性值列表。\n比如像这样：\n \n![](/img/less_sass/12.png)\n\n哇偶，酷毙了，是不是有些没想到还可以这样？其实从这里面就可以更明显的看出css和一些传统编程语言的差距在哪里，重复的事情，只做一次。\n \n## 是什么让你还在犹豫？我猜你可能有以下几处困惑\n \n\n**1、变量的特殊化**\n\n这一点，是我本人，也是同事，都存在过的顾虑——我现在定了一个变量，全站都用，那如果我需要修改其中一处，或者产品经理非要改掉其中一处，怎么办？\n\n曾经，我以为这个就是它的一个缺陷，后来才知道是浅尝辄止就否定它。真实情况是这样：\n\n\n![](/img/less_sass/13.png)\n\n从图中可以看出，sass能够轻松搞定这种特殊化，这就是作用域的问题，全局变量和局部变量，和其他编程语言里的没什么不同~就是这么简单。\n\n**2、伪类、伪元素、容器外部嵌套，这些怎么办？**\n \n怎么办呢？，一个“&”就可以解决啦！下面看是如何实现的。\n\n\n![](/img/less_sass/14.png)\n这是伪类和伪元素，那么容器的外部嵌套呢？这个相信你也有想过对么，当我写了一大串的嵌套之后，如果需要在外部加父容器进行限制的话，难道还要在外面套一层吗，显得太low了吧，其实，你可以这样：\n \n\n![](/img/less_sass/15.png) \n只要把你想要套在外面的选择器写在前面，后面跟“&”就可以搞定了。\n \n**3、选择器层级过多**\n \n使用过预处理器的人，应该都有过这方面的担心，因为这个时候嵌套是很随意且轻松的，写一个最外面的父选择器，然后就一层层的往里套了，就有可能导致，生成的css代码出现层级过多的问题。其实就这个问题的话，个人以为，首先要从源头解决，什么是源头，就是你对自己代码结构的规划，html结构的合理精简，一般情况下，不会出现多于4层的容器嵌套，当然，如果你是从页面容器到最里面一层数的话，那超过的可能性就很大了，但觉得没多少人会这么去写吧？所以，按照模块化，组件化的思想去组织代码，就不会出现层级过多的问题。\n \n**4、生成冗余代码**\n \n这一点是我看到sass为我们提供了复用便利之后的直接反应，如果复用起来那么容易，我们会不会太依赖之，反而生成了很多没必要的冗余代码段呢？在这一点上，sass的确是没有提供方案的，从某种程度上来说，也不需要提供吧，这是一个需要我们自己去把控的东西。\n \n**mixin，何时使用mixin？**\n\n先来一段官方描述：如果你发现自己在不停地重复一段样式，那就应该把这段样式构造成优良的混合器，尤其是这段样式本身就是一个逻辑单元。再为其添加一个展示性的描述，能够清晰明了的看出它是用来干嘛的。\n\n显然，你首先会想到的是需要各种浏览器厂商前缀的CSS3代码。一个好的事情是，mixin本身不会被编译到css代码中。\n在实践过程中，我个人并不是完全赞同这种“重复样式就构造混合器”的做法，我们权当这是一种功能描述，在适合使用的时候使用。实际当中，个人更倾向于构建一个常用代码库，当需要使用的时候，为结构添加可用的类，这样既方便使用，也不会造成明显的性能问题，也不会多个地方不断在重复一个代码段。\n\n适合使用mixin的地方在我看来是应该存在变化的，比如，我们不能保证每处的圆角都一样，每处的阴影都一样，每处的渐变都一样，当它们不一样时，很多时候只是数值改变，而性质未变，这就适合使用带参数的mixin来搞定了。\n\n**extend继承的工作细节**     \n  \n跟变量和混合器不同，继承不是仅仅用样式替换@extend处的代码那么简单，继承只会在生成CSS时复制选择器，而不会复制大段的CSS属性，其实这一点上面已经说过了，这里再提及一下。\n\n**5、@import性能问题？**\n \n如果你有这个疑问，那么又先入为主了哈。我们可以先来回顾一下CSS的“@import”会带来什么问题。\n\n很多关于性能的建议，都说尽量避免使用@import，因为这样做会导致CSS无法并行加载，使用@import引用的文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载。\n \n好的，原因知道了，有问题咱们就有对策是吧，我们在自己定义的所有样式规则之前引用不就可以了？而且再退一步说，谁告诉你sass编译完了之后还存在@import这么个东西的？，它只是在编译之前方便我们编写代码的一种方法而已，是不是觉得上当了？~所以，完全不用担心咯。\n \n## 你可能忽略的一些点\n \n**1、属性嵌套**\n \n你很容易就会知道选择器之间的嵌套，但是，不仅是选择器，属性也是可以嵌套的哦，如下：\n\n\n![](/img/less_sass/16.png)\n\n![](/img/less_sass/17.png)\n\n**2、!default、!global**\n \n写css的时候，我们都会面临着一些维护问题，比如，类名的定义，冲突的避免，sass只是变着法的在写css，所以，问题是同样的，特别是在团队合作的时候。所以当你给定义变量的时候，给变量加上了!default，那么其他开发者定义了自己要用的变量之后，再引入了你的库，就不会担心二者有冲突，比如这样：\n \n\n![](/img/less_sass/18.png)\n\n![](/img/less_sass/19.png)\n\n哪里不对劲呢，写在后面的变量权重反而更低？是的，！default的作用在这里就是降级让路，定义一个默认变量值，别的值都可以覆盖它。\n \n而\"!global\"的作用恰恰相反，是用来升级覆盖，回到前面看过的一个例子再来看\n \n\n![](/img/less_sass/20.png)\n\n本来局部变量只是在局部起作用，是不会改变全局的，但是这里加上了“!global”了之后，.sub-wrap-three的值变成了.sub-wrap-two里面定义的300px。\n \n**3、 嵌套导入**\n \n通过前面的内容，我们已经知道了，sass是可以导入我们封装起来的模块样式的，其实不止如此，还可以在定义的样式当中进行导入。比如这样：\n \n\n![](/img/less_sass/21.png)\n\n![](/img/less_sass/22.png) \n**4、list和map**\n \n其实上面那么多东西，就足以令任何一个页面仔头大了，可是sass仍不止这些，还有比较复杂的数据结构，比如：list和map。\n \nlist，就相当于js中的数组。用来定义一组可以访问和使用的值。比如：\n \n\n![](/img/less_sass/23.png)\nmap，是一种映射任何类型的键值对。跟什么差不多呢，你猜对了，json~比如：\n \n\n![](/img/less_sass/24.png) \n**5、警告和错误**\n \n什么鬼，还有完没完？这些又是用来干嘛的？\n \n@debug;  @warn;  @error，就是这三位。\n@debug，主要是用作调试 SassScript，这个不是我们关注的重点。\n@warn，和我们通常的认知差不多，不会把程序给卡住无法执行，而是能够预测风险并提醒开发者。\n@error，将会中断编译器的下一步进程。基本上，它们中断编译并像堆栈跟踪一样在输出流中显示相关信息，这对调试很有帮助。\n \n## 说了这么多，该如何选择？\n\n先来看看简史：\n\nSass 的第一次提交还要追溯到距今八年之久的 2006 年底。由Ruby语言编写。\n\nLess 由 Alexis Sellier 于 2009 年创建。使用js编写。既可以在 客户端 上运行 (支持IE 6+, Webkit, Firefox)，也可以借助Node.js或者Rhino在服务端运行。\n\nstylus的第一次提交是在2010年11月。来自Node.js社区。\n\n从这个时间线可以看出，sass最早，目前三者都有人使用。其中，sass和less都有官网的中文翻译。\n如下：\n\nsass http://www.sass.hk/                  sass设计指南   http://sass-guidelin.es/zh/\nless  http://less.bootcss.com/\n而stylus没有，只有张鑫旭早在2012年翻译的中文文档  http://www.zhangxinxu.com/jq/stylus/\n\n他也写过一篇文章，文中说，他没有选用sass的原因是ruby  http://www.zhangxinxu.com/wordpress/2012/06/stylus-nodejs-expressive-dynamic-robust-css/。\n显然，从实际使用上来说，是不需要用到ruby的，故而，不应成为大家不用它的原因。\n \n所以，其实你选用哪种都可以，就目前来看，sass是最强大，也是被很多人推荐使用的，bootstrap的新版也是抛弃less投奔sass而去，既然差别不大，何不选一个更好用的呢？~\n \n##工具\n预处理器已经是css的工具了，那么它还有工具吗？答案是肯定的，比如，sass的工具[compass](http://compass-style.org/)，less的工具[est](http://ecomfe.github.io/est/)。这些工具，为预处理提供了很多封装好的东西可以直接拿来用，可以说，是帮你懒到家了哈。详情大家自己点击链接看哈，就不多说了。\n \n##如果实在不感冒呢？\n是的，你可能会觉得才华横溢的你用css完全能够胜任现在的工作，那么为什么还要去了解预处理器看起来那么复杂的语法（其实不复杂~），不妨可以使用它的部分特性，比如嵌套、mixin、模块化等等，总之，不需要排斥它，它可以给你带来一些便利，又何乐而不为呢？~","tags":["CSS"],"categories":["CSS"]},{"title":"征服javascript学习笔记（五）——引用类型Object和Array","url":"/2016/04/20/javascript-study-five/","content":"\n\n## 写在前面\n\n引用类型，前面的章节提到过，ES的变量类型，分为“基本类型”和“引用类型”。那么这里就开始介绍“引用类型”。\n\n引用类型的值（对象）是引用类型的一个实例，在ES中，引用类型是一种数据结构，用于将数据和功能组织在一起，\n\n如前所述，对象是某个特定引用类型的实例，新对象是使用new操作符后跟一个**构造函数**来创建。构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的，如下：\n\n\tvar perspon=new Object();\n\n\n## Object类型\n\n我们平时所看到的大多数引用类型值都是Object类型的实例，而且，Object也是ES中使用最多的一个类型。虽然Object的实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择。\n\n创建Object实例的方式有两种：\n\n**第一种**\n\n使用new操作符后跟Object构造函数，如下所示：\n\n\tvar person=new Object();\n\t\tperson.name=\"idea\";\n\t\tperson.age=27;\n\n**第二种**\n\n使用对象字面量，是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象的过程。比如，上例可以写成下面这样：\n\n\tvar person={\n\t\tname:\"idea\",\n\t\tage:27\n\t}\n\n如上所示，对象，属性，属性值，一目了然。但有一点需要提示的是，多个属性之间需要添加逗号，但最后一个属性后面的逗号不是可有可无，如果加了，会在IE7及更早版本和Opera中导致错误。\n\n属性名也可以使用字符串，比如：\n\n\tvar person={\n\t\t“name”:\"idea\",\n\t\t“age”:27\n\t}\n\n另外还会出现留空的情况，比如：\n\n\tvar person={}\n\n则其只包含默认的属性和方法。\n\n可以看出对象字面量的方法可读性更好，还给人有封装数据的感觉，实际上，如果你有一些实践经验，就会知道，字面量也是向函数传递大量可选参数的首选方式。\n\n一般来说，访问对象属性时使用都是点表示法，不过js中也可以使用方括号表示法来访问对象的属性，在使用这种方法时，应该将要访问的属性以字符串的形式放在方括号中，如下所示：\n\n\talert(person[\"name\"]); // \"idea\"\n\n从功能上看，这两种方法没有任何区别，但方括号方法有个优点，可以通过变量访问属性：\n\n\tvar personName=\"name\";\n\t\talert(person[personName]); //\"idea\"\n\n如果属性名中包含会导致语法错误的字符或者使用关键字或保留字，也可以使用方括号表示法，比如：\n\n\tperson[\"first name\"]=\"idea\";\n\n因为属性名中包含空格，所以不能使用点表示法访问，然而属性名中是允许包含非字母非数字的，这时候就可以用方括号法访问。\n\n通常，除非必须，建议使用点表示法。\n\n## Array类型\n\n除了Object类型，Array类型是ES中最常用的类型。而且ES中的Array和其他语言当中有很大不同，它的每一项可以保存任何数据类型的数据，而且数组的大小可以动态调整。\n\n创建数组的基本方式有两种。\n\n**第一种**\n\n\tvar colors=new Array();\n\n若知道数组长度，可以这样：\n\n\tvar colors=new Array(20);\n\n还可以把数组的项直接写进去，像这样：\n\n\tvar colors=new Array(\"green\",\"blue\",\"yellow\");\n\n给构造函数传递值也是可以创建一个数组的，不过分为数值和其他类型之分，比如：\n\n\tvar colors=new Array(3)；   //创建了一个长度为3的数组\n\t\tvar colors=new Array(\"green\"); //创建了一个包含一项值为“green”的数组\n\n另外，可以省略new操作符，比如：\n\n\tvar colors=Array();\n\n**第二种**\n\n数组字面量，直接看例子：\n\n\tvar numbers=[0,1,2,3,4];\n\n会创建一个长度为5的数组。\n\n创建完了，就需要对其进行操作，最基本的就是读取和设置，这时候，需要使用方括号加上数字索引，数组的数字索引从0开始。\n\n比如：\n\n\tvar colors=[\"red\",\"blue\"];\n\t\talert(colors[1]);   //读取\n\t\tcolors[0]=\"green\";  //设置\n\n访问的时候，如果索引值对于数组长度，则会返回undefined，读取的时候不能这样读，但是，设置的时候是可以的，比如，以上数组，可以这样\n\n\tcolors[2]=\"orange\";\n\n这个时候，数组就会创建一项并重新计算长度，当然，不是必须紧邻，还可以\n\n\tcolors[10]=\"orange\";\n\n那么，它就是一个长度为11的数组了，不过，中间的8个值为undefined。\n\n\n**检测数组**\n\n自从ES3做出规定，就出现了确定某个对象是不是数组的经典问题，对于一个全局作用域来书欧，使用instance操作符就能得到满意的结果，如下：\n\n\tif(value instanceof Array){}\n\n但问题在于，它假定只有一个全局执行环境，若有多个，就存在两个以上不同版本的Array构造函数。\n\nES5新增了Array.isArray()方法，这个方法的目的是最终确定一个值到底是不是数组，而不管它是在哪个全局执行环境中创建的.如下：\n\n\tif(Array.isArray(value)){}\n\n但使用此方法时要注意低版本浏览器的兼容性。\n\n**转换方法**\n\ntoLocaleString(),toString(),valueOf()\n\n第二个会返回以数组中的每一项用逗号分隔开的字符串，实际上是调用了每一项的toString()方法，第三个返回的还是数组，如果是直接alert()一个数组，由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此得到和toString()方法相同的结果。\n\n而第一种方法经常会和后两种返回相同的值，但也不总是如此，它会对每一项调用toLocaleString()，而不是toString()。 \n\n当然，除了这几种方法，还有一种更加灵活可控的方法，join(),比如这样：\n\n\tvar colors=[\"red\",\"green\",\"blue\"];\n\t\talert(colors.join(\".\"));\n\n就会返回以点号隔开的字符串。\n\n**栈方法**\n\n栈的概念，学过计算机的应该都不陌生，就算没有学过，也会比较容易懂，因为圣后中太多这样的例子，LIFO(last in first out),通俗说就是后进先出，栈中的项有插入和删除的操作，且只发生在栈的顶部。对此，ES为数组提供了push()和pop()方法，以便实现栈的行为。\n\npush()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度，pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。\n\n**队列方法**\n\n和栈有所不同，队列是FIFO(first in first out),先进先出，在末尾添加项，从列表的前端移除，因为给末尾添加项已经有了方法，所以，现在只需要一个从数组前端取得项的方法——shift()，它能够移除数组中的第一项并返回该项，同时数组长度减1，除此之外，ES还为数组提供了一个unshift()方法，顾名思义，和shift()的用途相反：它能在数组前端添加任意个项并返回新数组的长度。因此，同时使用unshift()和pop()方法，可以从相反方向来模拟队列，即前端添加项，末端移除项。\n\n**重排序方法**\n\n数组中存在两个可以直接来重排序的方法：reverse()和sort()，前者用于反转，默认情况下，sort()方法按升序排列数组项，即最小的值位于最前面，最大的值排在后面，为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序，即使数组中的每一项都是数值，sort()方法比较的也是字符串。\n\n如下：\n\n\tvar values=[0,1,5,10,15];\n\t\tvalues.sort();\n\t\talert(values); //0,1,10,15,5\n\n可见，即使值的顺序没有问题，但sort()方法也根据测试字符串的结果改变原来的顺序。这种排序方法在很多情况下都不是最佳方案，因此sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。\n\n**操作方法**\n\nES为操作自己已经包含在数组中的项提供了很多方法。\n\nconcat()方法可以基于当前数组中的所有项创建一个新数组。具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组，在没有给concat()方法传递参数的情况下，它仅是复制当前数组，如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。如果传递的值不是数组，这些值就会被简单添加到结果数组的末尾。下面例子：\n\n\tvar colors=[\"red\",\"green\",\"blue\"];\n\t\tvar colors2=colors.concat(\"yellow\",[\"black\",\"brown\"]);\n\t\talert(colors2);   //red,green,blue,yellow,black,brown\n\nslice()方法,它能够基于当前数组中的一或多个项创建一个新数组，slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数据末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。注意，slice()方法不会影响原始数组。\n\n\tvar colors=[\"red\",\"green\",\"blue\",“yellow”,\"purple\"];\n\t\tvar colors2=colors.slice(1,4);\n\t\talert(colors2); //green,blue,yellow\n\n其参数可以为负，如果是负值，则用数组长度加上该数来确定相应的位置，如果结束位置小于起始位置，则返回空数组。\n\nsplice()方法，此方法是最强大的数组方法，有很多用法，主要用途是向数组中部插入项，但使用这种方法的方式有如下3种：\n\n1、删除，可删除任意数量的项，只需要指定两个参数，要删的第一项的位置和删除的项数。\n2、插入，向指定位置插入任意数量的项，需提供3个参数：起始位置、要删除的项数和要插入的项，如果要插入多个项，可以再传入第四、第五或更多的项。\n3、替换，向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定三个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。\n\nsplice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项(如果没有删除任何一项，则返回一个空数组)。\n\n**位置方法**\n\nES5为数组实例添加了两个位置方法：indexOf()和lastIndexOf()，两个方法都接收两个参数：要查找的项表示查找起点位置的索引，其中，indexOf()方法从数组的开头开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。如果没有找到，返回-1.\n\n**迭代方法**\n\nES5为数组定义了5个迭代方法，每个方法都接收两个参数：要运行的函数和运行该函数的作用域对象。传入这些方法中的函数会接收三个参数：数组项的值，该项在数组中的位置和数组对象本身。作用分别如下：\n\nevery()\n\n对数组中每一项运行给定函数，如果每一项都返回true，则返回true。\n\nfilter()\n\n如其名，有过滤的作用，对数组每一项执行给定函数，返回结果为true的项组成的数组。\n\nforEach()\n\n对数组每一项运行指定函数，没有返回值。\n\nmap()\n\n对每一项运行指定函数，返回每次函数调用结果组成的数组。\n\nsome()\n\n每一项运行指定函数，如有任一项返回true，则返回true\n\n\n**归并方法**\n\n\nES5新增了两个归并数组的方法：reduce()和reduceRight()。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值，其中，reduce()方法从第一项开始，逐个遍历到最后，reduceRight()是从最后一项开始，向前遍历到第一项。这两个方法都接收两个参数：一个在每项上调用的函数和作为归并基础的初始值（可选的）。传给reduce()和reduceRight()的函数接收4个参数：前一个值、当前值，项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。\n\n## 小结\n\n至此，对Object类型和Array类型有了个简要的介绍和概览，可以有个初步的了解。要掌握和灵活运用它们，还需更多实践。后面会继续讨论其他引用类型。一起加油，一起进步吧~","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"是时候再提web标准","url":"/2016/04/09/web_standard/","content":"\n## 背景\n\nweb标准是个老生常谈的话题。引入国内的时间，粗略算下来，有十年左右了。但是由于国内前端优秀人才的缺失和相关教育跟进的缓慢，造成了很多人都没有对它引起足够的重视并运用到自己的实际项目当中，同时又花了较多精力在眼花缭乱的新技术方案和工具中，这就造成了技术断层，影响不是一个两个人，而是一大部分，如果再缺少相关的正确引导，就会保留很多不正确的编码习惯，对于个人成长和所做的项目都是不利的。\n\n为什么是时候再提呢？可以先来看看下面一张具有一定代表性的图，截自我的企鹅群（152128548）\n\n![](web_standard/example.jpg)\n\n1、标签仍在被滥用\n2、重视觉，轻语义和结构\n3、热衷于跟进热门新技术，不重视基础\n4、当我在跟大家说重视基础的时候，要么有人说原生js，要么有人说css原理和技巧，没人说html\n\n由于以上的几点，加上各种场合和会议似乎很少提及这些方面的东西，新手在被老手“牵”着走，老手的精力又不在这些比较基础的东西上。这篇文呢，就是跟大家一起回到起点，去看看怎样做才算是符合了web标准的编码。\n\n\n## 问题来源\n\n### 1、门槛低、简单\n\n**一周就可以掌握html，常用标签不多，用不到的不用管**\n\n\n比如：h1~6、p、span、div、img、a、input等，我们来随意的看一张截图\n\n![](web_standard/taobao.png)\n\n上面是某宝PC端的登录页，可能是由于种种原因（不详），只用了少量的标签，所以，并不说它是不好的或者是错的，但它是其他很多人的写照。如果我说html标签有100多个，你会是什么反应？\n\n1、不知道，没想到有这么多\n2、知道，但认为很多都用不上\n\n你会是哪种？\n\n如何在合适的时候，合适的地方，使用正确的标签，这是web标准的基本要求。后面细说。\n\n\n**CSS很简单，常用属性也就那么多**\n\n\n宽、高、边框、背景、定位、浮动、边距，如果你掌握了这么多，那么就能够应对很多页面布局的情况了。如果你因此就认为css很简单，那么就等着它来“惩罚”你吧。\n\n不好的方面：各种兼容问题，各种奇葩布局要求，各种不可预知的bug\n\n好的方面：诸多奇妙的技巧和css3新属性，能够帮助我们做出充满美感又神奇的效果\n\n如果你依然觉得CSS太简单，那么请看一下这里https://drafts.csswg.org/indexes/，要坚强~\n\n### 2、只需要做“对”，不需要做好\n\n很多时候，即使写错了浏览器会包容它，当我们的代码是不规范的，甚至有时候是错的，但是浏览器仍然将它“正常”显示出来，这个时候，我们意识不到自己的错误。认为看起来没问题就没问题，这是很危险的。\n\n标签不用在意，交给CSS去处理就好，理论上，我们可以通过一定的CSS规则，任意的改变一个元素的表现，这就造成了对html标签的不重视，因为我们总能让它们看起来没有任何问题。\n\n\n### 3、热衷于“向前看”\n\n学习新技术，丰富自己的技能树——html5、canvas、svg、react、ES6等。\n\n解决“难题”——觉得一般的工作没什么挑战了，所以不屑于去深挖自己已经会了东西。\n\n做出炫酷的效果——纯CSS图标、动画，3D动画，canvas动画等。\n\n跟风式学习——大家都在谈，业界都在捧，看起来很好的东西，就开始躁动不安，跃跃欲试，其实有句话叫做：“基础不牢，地动山摇”，兴致冲冲的去学习新的东西的时候，往往会发现，没有足够的基础，是很难前行的。\n\n上面说的这些是错的么？当然都对，特别是在技术发展更新迭代速度快的互联网领域，想会得更多让自己更强，同时会的更多在实际应用中可选择的方案也更多，兴趣驱动去学习，这是好事，我自己也是这样的，但我们需要注意的是，学习不是一条直线，不能沿着一条线一直往前冲，除了长度，还有深度，需要我们不断的从各个方面去打磨和填充才能日臻完善。\n\n\n\n## 文档结构和意义为先\n\n我们都知道，实现一种效果可以有多种方式，那么哪种才是最优的？来看例子\n\n### 列表\n\n什么特点呢？最明显的就是有很多项，项和项之间相互独立，竖着排列，像这样\n\n我是列表\n我是列表\n我是列表\n\n它可以被怎样写呢？\n\n1、  \n\n      我是列表<br>\n         我是列表<br>\n         我是列表<br>\n\n2、\n\n    <li>我是列表</li>\n        <li>我是列表</li>\n        <li>我是列表</li>\n\n3、\n\n    <ul>\n        <li>我是列表</li>\n        <li>我是列表</li>\n        <li>我是列表</li>\n        </ul>\n\n上面三种是比较直接想到的对的写法，当然也可以用ol，算同一种方法。它们所能实现的效果是类似的，往往我们会从表现的角度考虑说第一种不够灵活，无法控制样式，第二种方法浏览器也不会不搭理你，它会把li解析成块级元素，让它们单独排列，但它失去了告诉浏览器“我是个列表”的标志，也就是外层容器（ul/ol），最好的写法肯定是第三种，它不仅看上去是对的，还告诉浏览器这是个列表，还有列表所应有的特点，比如“缩进”和“着重号”，当然，最大的益处仍然是它是有意义的，也是为什么这里没有提div和p等元素的原因。\n\n### 标题\n\n作为标题，特点也简单，比页面上其他的文本更大、更粗。\n我们可以这样写：\n\n1、\t\n\n    <span class=\"head\">我是标题</span>\n\n2、\t\n\n    <p><b>我是标题</b></p>\n\n3、 \t\n\n    <h1>我是标题</h1>\n\n不看代码的情况下，三者可以一模一样，但看了代码的话，大家应该都会第三种写法是最好的，第三种写法的好处有哪些？\n\n1、本身是块级元素\n2、是独特的，不像p或者span等元素会用到页面当中的很多地方\n3、更加重要的是，在不加任何css规则的情况下，标题元素仍然明显是个标题，页面的无样式视图将显示其预期的文档结构，正确的标题元素传递了“意义”而不只是表现指令\n4、屏幕阅读器、手机和其他浏览器也将知道如何处理标题元素\n5、搜索引擎友好，除了title和meta，标题是最可能存在关键字的地方，利用好它，会更加方便用户找到你的页面\n\n但是它有没有问题困扰着我们呢，答案是有，h1和h2这些标题的默认样式被认为过于粗大，这会让有些人倾向于使用更高级别的标题元素，其实这个大家都知道，不是大问题，可以用css来控制，前提是：先结构，后表现。至于选择使用h几，也不是没有讲究的，它们既然是分了级别，那自然是有一定意义所在，一般来说，h1是个重要的标识，页面当中有一个就好，然后，不要出现类似h2包裹h1的情况。\n\n### 表格\n\n现在如果提到表格（table），很多人会觉得好笑，使用web标准构建网站的一个最荒诞的说法就是你应该永远不使用表格。\n\n是的，使用table来布局确实是有劣势，但并不代表我们不能用表格来做适合它做的事，比如：数据化表格。\n\n最简单的表格可以有下面这个结构：\n\n    <table>\n        <tr><td></td><td></td></tr>\n        <tr><td></td><td></td></tr>\n        <tr><td></td><td></td></tr>\n        </table>\n\n有时候，我们会在表格的上方加一点说明性文字，通常我们会习惯性的使用h*或者p标签来包裹这一段内容，如果你是用div，那么...\n\n其实我们有更好的选择——`<caption>`，这个是表格自己的专有标题哦，有它为什么我们还要用别的呢？\n\n除此之外，如果我们想给表格的第一行算作表头，可以怎么做呢？可以这样：\n\n    <tr><th></th><th></th><th></th></tr>\n\n把这行代码放在第一行，th标签会给它不同于td的样式来区分出和其他行的不同，此外它可以是行的，也可以是列的，怎么区分呢？还有这个——scope属性scope=row/col，把此属性添加到th标签中即可设置它的归属。\n\n但这样就够了吗，如果对于简单的表格来说已经挺好，那么好像它还没有比较清晰的逻辑结构，那么，不卖关子了。较完整的表格，应该是下面这样：\n\n    <table summary=\"这是一个表格的内容简介\" cellspacing=\"0\"> \n        <caption>表格标题</caption> \n            <thead> \n                <tr> <th scope=\"col\" id=\"name\">姓名</th> <th scope=\"col\" id=\"address\">地址</th> <th scope=\"col\" id=\"databirthday\">出生日期</th> \n                </tr> \n            </thead> \n            <tbody> \n                <tr> <td>ewee<td> <td>hubei<td> <td>19870102<td> \n                </tr> \n                <tr> <td>rewe<td> <td>wuhan<td> <td>419880103<td> \n                </tr> \n                <tr> <td>ertww<td> <td>yichang<td> <td>19870205<td> \n                </tr> \n        <tbody> \n        <tfoot><tr><td>one</td><td>two</td><td>three</td></tr></tfoot>\n    </table> \n\n是不是顿觉十分的清晰，慢着，summary=\"这是一个表格的内容简介\"这句是什么鬼？好吧，看内容便知，它是关于表格的一个简介，这个简介用户是看不到的，屏幕阅读器可以利用该属性。\n\n\n### `<strong>`，`<em>`，`<b>`，`<i>`和其他短语元素\n\n 短语元素，在于控制的颗粒更小，无关布局，和表现也没有太大关系（虽然它会有加粗或者倾斜的效果），用来对于页面中的某些特殊内容做出特别的标识，比如“强调”、“引用”等。\n\n那么它们的区别在哪儿？\n\n`<strong>`代替`<b>`,`<em>`代替`<i>`\n\n传达意义和结构，而不是给出表现指令。\n\n`<em>`表示强调，`<strong>`表示更加强调，在语音合成器用户代理场景下，它们还表现为音量、音调及语速的区别。如果一个元素需要既强调又斜体，那么我们可以选择正确的标签，然后通过样式来控制其他方面。\n\n如此之外还有其他短语元素，比如:\n\n`<cite>`     包含对其他来源的引言或引用\n`<code>`   指定一个计算机代码片段\n`<var>`     表示一个变量或者程序参数实例\n等\n\n\n### 最小化标示\n\n通常情况下，较少的代码意味着更快的下载，还意味着更少的服务器空间和带宽消耗。有个问题就是，即使你写出了符合web标准的页面仍然不能说明你写出了足够简洁或者合理的代码。正所谓规则是死的，容易做到，碰到实际场景，不同的做法会导致结果不同。在我们成长过程中，会遇到不同的老师，要么是一篇文章，要么是一本书，要么是具体的某个人，追溯到最后仍然是人，不同的人，观点和习惯可能不同。比如，你可能会养成一个习惯就是希望给所有单独添加样式的元素分配一个类，这样做到了较强的可控性，但是，这样引发什么潜在的问题呢？\n\n1、过多的类\n2、类的命名难\n\n除了上面两点，还有一个可能碰到的就是类名重复，然后样式冲突。\n\n可能上面的问题你都遇到过，或许也想了办法去命名，去避免冲突，但有没有想过前因后果的关系？我们常常会“遇到问题”——“解决问题”，其实我们是在“制造问题”——“解决问题”。从现实情况看，也没有多少人在尝试的去打破它。\n\n我认为，为什么要命名那么多的类，因为我们可以通过给予不同的类名去区别开来元素样式，即使有个类名叫info，我们可以起个a-info、b-info，那么它们俩就是不同的了，我们还可以.a.info、.b.info，同样能够对其进行区分，再向上追溯，我们为什么要使用类名来区分它们？最大的可能就是，我们在同一个父容器里，使用了较多同类型的子元素或者后代元素，这又是为什么呢？是不是回到了我们最初对于html标签的看法上——常用的标签不多？事实上，我们经常不加思索的使用div、p、span，一个用作大的包含块，一个用作包裹整段文字，span用来包裹行内文字，顶多再加上img、a、i等。我说的是不是很简单（然而这样还是会有人用错）。那么实际上有这么简单吗？正是因为“重视觉，轻语义”，至于我们能想起来使用的正确的，有意义的标签很少，觉得没有必要锱铢必较，那么网页中那么多的内容，难免会出现我们所说的那几个元素的重复，重复了怎么办？样式不同啊，加类，类多了怎么办？想办法区分类，于是，就是你所熟悉的那些行业问题了。\n\n或许你会说，在大的、复杂项目里面，这些都是不可避免的，好，我同意你的说法，那如果我们能在结构和意义上做得更好，是不是能把这种情况大大改善？\n\n其实我们的CSS选择器足够而且正在变得更加强大，我们完全没必要把希望都寄托在加类这个看起来很省劲的方法上\n\n譬如：后代选择器、子选择器、各种伪类选择器、兄弟选择器、属性选择器等。\n\n小结：任何做法都不要非白即黑，不偷懒，不含糊，把方法合理巧妙的结合起来才是正道！\n\n\n### 多种场景的样式\n\n在日常项目中，我们很少会碰到特殊的需要，一般只要这样一行代码就够了\n\n    <link href=\"\" rel=\"stylesheet\" type=\"text/css\">\n\n那么如果有特殊需要，该怎么做？可以看下下面这个表格\n\n\n值\t       描述\nscreen\t     计算机屏幕（默认）。\ntty\t         电传打字机以及类似的使用等宽字符网格的媒介。\ntv\t         电视机类型设备（低分辨率、有限的滚屏能力）。\nprojection\t 放映机。\nhandheld\t   手持设备（小屏幕、有限带宽）。\nprint\t      打印预览模式/打印页面。\nbraille\t      盲人点字法反馈设备。\naural\t      语音合成器。\nall\t          适用于所有设备。\n\n找到它并不难，难的是，很多人可能不知从何处着手，没有这个意识或者概念的话，也就不会去查。了解了这些，就能根据不同场景给我们的页面分配不同的样式规则。\n\n\n### html5来了\n\n必须承认一点，当我最初看到html5的时候，内心是激动的，在它出现之前，是没有足够用来表示页面结构的语义化标签供我们使用的，一般我们是用“类”或者“id”来定义它们。不过同时问题又来了，应该怎样正确的使用它们？正如以前我们面对旧版本的html时忽略了很多语义化的标签一样，如果我们不能对这些新增加的标签有正确的认识，那么我们同样会陷入泥淖，虽然看起来会比之前好些。\n较常用的有以下这些，你已经用起来了吗？\n\n`<article>`     \n定义外部的内容（结构元素）\n\n`<aside>`   \n定义页面内容之外的内容。 aside的内容与article的内容相关。（结构元素）\n\n`<figure>`  \n定义一组媒介内容的分组，以及它们的标题。（结构元素）\n\n`<section>`         \n标签定义文档中的节（section，区段）。比如章节，页眉，页脚或文档中的其他部分（结构元素）\n\n`<time>`    \n定义一个日期/时间\t（内联元素）\n\n`<audio>`   \n定义声音内容。(内嵌元素)\n\n`<video>`   \n定义视频。(内嵌元素)\n\n`<canvas>`      \n定义图形,绘制路径，矩形，圆形，字符以及添加图像的方法\n\n`<dialog>`      \n定义对话（会话）dialog元素表示几个人之间的对话。HTML5dt元素可以表示讲话者，HTML5dd元素可以表示讲话内容。（结构元素）\n\n`<embed>`       \n定义外部交互内容或插件 \n\n`<footer>`      \n定义 section 或 page 的页脚\n\n`<figcaption>`      \n定义 figure 元素的标题\n\n`<hgroup>`          \n用于对网页或区段（section）的标题进行组合，对网页或区段的标题进行组合\n\n`<header>`      \n定义 section 或 page 的页眉（介绍信息）\n\n`<mark>`        \n定义带有记号的文本，请在需要突出显示文本时使用 <m> 标签\n\n`<nav>`     \n定义导航链接\n\n`<source>`      \n定义媒体资源\n\n更多标签可以参照这张图 http://www.inmotionhosting.com/img/infographics/html5_cheat_sheet_tags.png\n\n或者到这里查看更多http://www.htmldog.com/guides/html/\n\n\n## 需要注意的几点\n\n### 结构和表现分离了吗？\n\n从我们开始接触分离观，可能就有一种认识，html里面不要有内联或者内嵌的样式，就是分离了，其实不然。\n这带来了一个后果，不重视标签和类依赖。所以，貌似我们已经完全做到了分离，但分离之后，结构并没有做好它的本职工作，然后可能引起我们不得不要用类加以区分，反而因为要照顾到样式，在结构和表现之间建立很多纷繁复杂的联系，这也是带来维护问题的根源之一。不要所有事情都交给CSS解决，让CSS只做它该做的，也不要让自己在标签上使用的失误成为见缝插针的理由。\n\n### div无罪，table无毒\n\n十几年前，当css出现并且普及，人们就开始了对以往页面的重构，很多使用table布局的页面被重新编写，用什么呢？“div+css”，相信大家都见过此类的教程或者书籍，笔者最初看到它的时候，就认为div是一门技术，因为它们是并列的关系，现在大家都知道，明显不是，但它所带来的影响是巨大的，div开始在页面中频繁出现甚至到泛滥的地步，然后，一批比较早觉醒的人以及html5概念的出现，让人们重新开始重视语义化，对div的态度开始了转变，仿佛用了它就是错误。其实不管是滥用还是不用，都是一种极端的做法，我们应该理性看待技术，它们的产生都是有原因的，也都是有自己的应用场景的，除非它们被更好、更合理的东西所替代（比如html5中所废弃的标签）。否则就应该占有一席之地，不该被区别看待。\n\ntable也是同样，实践证明它不宜用来大范围的复杂布局，但是还是有它的应用场景的，上面表格的部分已做了描述，这里就不多说了。\n\n### class还是id？\n\n关于这点，可以参考一下知乎上这个问题的答案。https://www.zhihu.com/question/19550864/answer/23440690\n\n稍微总结下关注点：\n\n1、id唯一性，class重复。根据目标元素的重复性和独特性来定\n2、id权重较高\n3、外围用id，内部结构善用class\n4、前端使用id操作DOM，重构使用class操作DOM，UI和交互相互独立互不影响\n\n\n另外还提出一点对于class的误用，下面是W3C的描述：\n\nclass：There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.\n\n意思是：class应该是描述内容的本质(语义)的而不是内容长什么样。\n\n如果按照这种说法，那么有很多做法都是不妥的，相信大家看过很多“.f12、.fl 、.mr10”之类。\n\n\n### 克服代码洁癖，html标签并不是越少越好！\n\n代码终究还是要交给浏览器或者是屏幕阅读器去读，而不是人，所以，如果我们只是做到了让人看着是清爽的，舒服的，就跑偏了，当然，这里不是为某些不必要的标签和嵌套找正当理由，而是站在结构和语义的角度，去运用应有的，有意义的标签，标识网页中需要点缀的内容，告诉浏览器它们是什么。而不仅是站在视觉角度考虑需不需要。\n\n\n## 全面了解，权衡利弊，方可取舍\n\n作为前端，实现一种结构或者一种功能，往往有很多方案可以用，比如上面所列的html结构，还有我们常用到的布局方案，CSS效果实现，js的方法，逻辑实现，我们常提到的框架或者库的选择等\n\n合理性——语义化、结构、逻辑、交互等\n成本——学习、合作、迭代、维护等\n兼容——多版本浏览器，多终端等\n性能——传输、解析、查询等\n\n举个栗子，如果你想做动画，怎么做？\n\nflash、css3、js、svg、canvas、Gif等\n\n只有当我们对每一种实现方法或方案都熟悉了，知道了它的优缺点和应用场景，才能取舍自如，否则就是捆绑住了自己的手脚。\n\n\n## 学习资源的选择、标准的衡量\n\n学习资源很重要，是否全面？是否正确？这决定了你对一项技术或者一个知识点的最初印象，一旦跑偏不知要多久才纠正得回来，更何况这种代价很多时候是没必要的。\n\n这是我在知乎上看到的两个问题可以作为参考\n“若想学 HTML，应从哪里入手？”https://www.zhihu.com/question/19753196\n前端开发基础扎实的标准是什么？ https://www.zhihu.com/question/38922374\n\n大家可以看看哪些是和自己的情况相吻合，它们就真的是很权威很可靠的选择吗？比如：http://w3school.com.cn/， 很多初学者的最爱，而且冲着这域名，也会认为它是跟w3c组织相关的权威的官方网站，实则它和w3c组织半点关系都没有，当然也并不是说它有多差，很多人因之受益，但是这是一种性质上的认知错误，实际上它里面的有些内容也是错误的。\n\n再者说标准，不同人眼里的标准也是不同的，能写出页面是标准吗？能正确运用所有标签是标准吗？能熟练运用各种布局是标准吗？都不是，我们一直在进行一个“点——线——面——体”的过程，不论是单项技术，还是经验，综合能力，我们都在不断的积累和填充，单个点和单个方向做得比较好，不代表你就处在一个高的水平面上，或许在另一个地方你还缺了一大块，所以，不断摸索、探索，不断努力就好。\n\n## 被遗忘的角落——无障碍设计\n\n开发人员使用HTML、CSS和JavaScript创建富互联网应用程序时，往往把残疾人士抛在脑后，因为我们自己大多数是身体健全的人，所以，往往忽略了另一部分困难人士对产品的使用和需要。其实我们可以扭转这种局面。WAI-ARIA能够提供足够的语义，以确保富互联网应用是可以理解的，并且现在已经得到相对较好的支持。\n\nWAI-ARIA是一个为残疾人士等提供无障碍访问动态、可交互Web内容的技术规范。主要是为了提升网页的可用性，网页对残疾人士的无障碍化，是对 HTML 语义化的补充。它具备比现有的 HTML 元素和属性更完善的表达能力，并让你页面中元素的关系和含义更明确。\n\n如何使用WAI-ARIA？\n\n应用于HTML的ARIA有两部分组成：**role**（角色）和带**aria-**前缀的属性，其作用：\n\nrole(角色)标识了一个元素的作用\naria-属性描述了与之有关的事物（特征）及其是什么样的（状态）\n\nARIA在HTML中使用有其自己的规范，并不是说在HTML中使用了ARIA，Web页面就无障碍化了，就提高了可访问性了。言外之意，ARIA没有用好，反而会把你带到另一个坑中，使用你的页面可访问性更差。\n\n更多关于ARIA的使用，是一个大话题，不是一两句能够说得清楚，有兴趣多了解的，可以参考一下这篇文http://www.w3cplus.com/wai-aria/wai-aria.html\n\n\n## web标准之外\n\n**当量变引起质变**\n\n1、维护性\n\n举个栗子，如果我们去办事，两三个人时可以随便站，10个人可能就要排队了，如果有更多的人就需要有人维持秩序，再上升一个量级，可能还要分批放人，不然场面会失控。\n\n页面是同样道理，一两个页面，几十上百行代码，那就不用太在意怎么写，不同方法带来的差异是可以忽略不计的。几十个页面呢？上千行代码呢？\n\n2、性能\n\n性能至少关乎两个方面，代码的执行效率和文件大小。一个决定了代码的解析和执行速度，一个决定了传输速度。这里不细说。\n\n3、兼容\n\n从当初的浏览器大战，后来比较坑的IE低版本，到现在的各种分辨率移动设备和各种安卓、ios版本浏览器的兼容，微信内核浏览器的兼容，等等。我们过去在做这样的事，将来也会。\n\n\n上面说了，做出了符合标准的web页面，不代表我们就万事大吉，还有其他很多的实际问题会在量变到一定程度的情况下给我们制造麻烦，形成质变。那我们将如何应对这些质变？本文不做详述，只作为一个引子，后续会再写一篇文章来和大家探讨“web应变之道”。\n\n下次见！~\n\n\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"动态中寻找答案","url":"/2016/04/06/动态中寻找答案/","content":"\n*绳命在于运动，答案始于行动*\n\n感想从何而来呢？以前常觉得自己忙，没时间看书，没时间出去玩儿，没时间做这做那，最近逼自己去做一些事了，发现也没有占用别的事情的时间，倒是多了一些收获和输出，更充实了，如果我不去做这些事，那么时间可能就被打发了。\n\n动态是指什么？\n\n当我们想做一件事的时候，我们总会考虑一下，各方面因素，能不能做到，值得不值得，适不适合，有没有时间，有没有条件…我们不知道开始做了会怎样，做到中间会怎样，最后会怎样，一切都是我们的预设，而事情本身没有开始，是静态的。有时候我们的预设是可靠的，因为有了很多经验，但很多时候我们的预设是没有充分依据的，是在帮我们找借口。\n\n我们需要的是平衡，不能不花钱，也不能乱花钱；不能太忙，也不能太闲；要有严肃认真的一面，也要有可爱活泼的一面。现实是，我们常常把自己定位在一边，然后可能会感慨或者抱怨，自己为什么总要这样，而不能那样。\n\n正所谓，一张一弛，张弛有道，这个“道”是什么，就是我们从中所找到的平衡点。什么都不吃，你不会知道自己喜欢吃什么，也不会知道吃多少是饱，多少是撑。\n\n动态中寻找平衡点，旨在:不要停留在想象，也不是非黑即白。鱼和熊掌有时候是可以兼得的，在于方式。一件事觉得难，两件事觉得烦，其实如果你真的给自己勇气去做选择了，会发现再加两件事也不是忙不过来，为什么出现这个情况？因为你会动脑筋想办法，都在于你的安排。几千辆车同时通过一个十字路口肯定不现实，但是有了交通规则，有了交警指挥，要不了多久可能它们就都各奔东西去往自己的目的地了，靠的是什么？秩序，动静结合，运行中的平衡。\n\n故而，如果你有了想法，就开始做吧，或许它跟你想象得很不一样~而答案，就在你探索的过程中被发现。","tags":["思考"],"categories":["思考"]},{"title":"读《白说》：遇见自己","url":"/2016/04/04/读《白说》：遇见自己/","content":"\n\n当你看到这篇文的时候，是我读完了2016年的第三本书，最初是为了读而读，因为爱书、爱文字的我，已经好久没有读过书了，很说不过去，另外，我们也的确是需要读书的，有句话说得好：“身体和灵魂，至少要有一个在路上”。我的灵魂停滞了太久，虽然这几年在生活中也经历了很多事情，做过很多思考，但仍然常常被自己困住，很多问题需要解决，但苦于找不到答案，其实，因为我们每个人的经历都是有限的，接触到的思想和方法也很有限，这个时候就需要我们走出去，走出去的途径有很多种，读书，便是其中一种。\n\n当然，我读书还有另外一个目的，让自己静下来，当我们脑子里装的都是“穷，赚钱”，有空的时候，追追剧，在QQ或者微信群里吹水，刷刷微博，逛逛街，看看电影等等，我们在“生活压力”和“释放自己”之间徘徊。但有一个事实是，我们不会短时间内暴富，却会因为自己所挥霍的那些时间感到空虚，常被提起的一个词叫“幸福指数”，它其实并不是只和钱挂钩，还有我们的收获，过得是否充实，是否愉悦，这些并不能简单的通过工作的忙碌来解决，需要在工作之外的生活有所得到，或物质，或身体，或精神。读书，就是给我们的精神充电的一种很好的方式。\n\n好了，下面来说一下：《白说》\n\n我们经常会在新闻的栏目里看到“白岩松：xxxxx”的文章，领域跨度之大，文化界、体育界、音乐界、传媒等，再或者不属于任何领域，就是我们每个人都知道的事件，他总能发表一些颇有见地的评论，当然，出于对其电视栏目主持人的身份，也有不少网友评论说：“一个主持人怎么哪儿都有你，够了”。其实我想说，要么是你太年轻，要么是你不够了解老白其人，就像是书里说得那样，“有所感触的下一步，是追寻，而不是马上表达”，就我之前有限的了解，他自己年轻时代擅长田径和足球，几十年的爱好和自己的亲身经历，发表一些评论和看法绰绰有余了，这也只是举个例子，看了他两本书之后，你就会发现，你对他的了解太少太少，甚至觉得“这是我之前知道的那个人吗？”，更难能可贵的是，从他的书里，不仅能读到他，更能读到你自己，你经历过的，思考过没明白的，甚至还没经历的，它都能给你一些解答，神奇吗？那就走进它。\n\n\n## 活着不是非赢即输\n\n**幸福可以无限靠近，无法彻底到达**\n\n有人能说自己懂什么是幸福吗？这或许是世界上最难回答的问题之一，有人说，饿的时候有东西吃，就是幸福，是的，有时候幸福来得就是这么简单。但是肚子不饿了，欲望更多了，于是我们开始去追寻别的幸福，高薪？好看的衣服？房？车？走着走着，向前走得太远了，仿佛忘了当初为什么出发....焦虑、烦躁、难过、憔悴，我们在努力赚钱，可是一直想做的事都做了吗？\n\n钱可以买来房子，但买不来家，钱可以买来男人、女人，但买不来真爱。我们能买来东西，却买不来精神和情感。\n\n幸福和别人有关吗？当然，如果你一大早出门就和别人吵了一架；如果你想出去玩儿的时候发现一个伴都找不到；如果你有一肚子的委屈，却没有发泄的对象等等，你会觉得幸福？\n\n我们的幸福和周围的事物都有着千丝万缕的关系，很多事情由不得我们左右，该怎么办？\n\n幸福像鞋，舒不舒服只有自己知道，它可以无限靠近，却无法彻底到达。或许这给了我们去追寻的理由，也使我们的生活更加饱满和充实。\n\n**做点无用的事**\n\n手机阻止了无聊，也阻止了无聊所能够带来的好处，就算中国人有那闲工夫，像牛顿一样躺在苹果树下并被苹果砸中，第一反应也肯定是：把它吃了。\n\n我们常常在忙碌着做一些“有用”的事，对“无用”的事敬而远之，什么是有用？能给我们带来看得见的、立竿见影好处的事情，所以，如果一旦当我们没有事做了，就会感到慌张，束手无策，更别提有一些空闲，去一个能保证安静的地方，给自己发呆的时间，回到自己的内心。生命不止是使用，还需要奖励。当我们一直在做事，而没有时间去静想和思考，就会错过很多美好的东西，会失去很多和灵感相遇的机会，也逐渐丧失了创造的能力。\n\n或许，我们所缺少的，就是无人处的好风景和无聊时的创造力。\n\n\n**漂亮的失败是另一种成功**\n\n当下是一个成功学泛滥的时代，中国的很多扭曲和乱象，都与追求面上的成功有关。追求现实，不追求真理；看重结果，不看重过程。\n\n伦敦奥运会的口号是：“影响一代人”。有人问，体育如何影响一代人？有位官员答道：体育教会孩子们如何去赢，同时，教会孩子们如何体面并且有尊严的输。\n\n想想生活中，我们谁能躲得过失败？可我们没有接受过相关的失败教育，不能够体面的面对失败，成功又有什么意义？我们中国有句老话“人生不如意事十有八九”，为什么我们十分的看重这其中一二的成功，同时将八九的挫折放到很大？\n\n也有人并没有成功，但无法阻止他们的伟大，比如岳飞、项羽、莫扎特、苏轼。以史为鉴，回归到个人去看，失败有时是需要的，而且是伟大创作的重要动因。\n\n失败是一门必修课，出过车祸的司机，比什么事都没出过的开车更安全。年轻的时候，可能觉得智商更重要，但渐渐的你就会发现，比智商更重要的是情商，智商决定你有资格和谁竞争，情商决定最终谁能赢。\n\n败局催生变局。任何失败都有可能是对你的一次提醒，让你静下来重新思考，改变原来的路径和方法。要知道，人在胜利的时候是不用做决定的，但失败的时候要做决定。失败是另一个好的开始。\n\n**做一个和自己赛跑的人**\n\n不挣扎不绝望不算青春，学会接受“平淡”这一生活现实，然后把平淡往幸福那儿靠。如果你顺顺当当，没有痛苦和眼泪，没有经历过理想的幻灭，那还叫青春吗？回忆没有跌宕起伏的色彩，还有什么意义？\n\n史铁生说过这样一段话：四肢健全的时候，抱怨周围的环境有多糟糕，突然瘫痪了，坐在轮椅上，怀念当初可以行走，可以奔跑的日子，才知道那时候多么阳光灿烂。又过几年，坐也坐不踏实了，出现褥疮和其他问题，怀念前两年可以踏实坐着的时光，风清日朗。又过了几年，得了尿毒症，这时觉得褥疮也还算好的。开始不断的透析了，一天当中没有痛苦的时间越来越少，才知道尿毒症初期也不是那么糟糕。\n\n所以他说，生命中永远有一个“更”，为什么不去珍惜现在呢？\n\n**感触和表达之间，还有追寻**\n\n有了感触不能立即表达，而是要去追寻，经历了足够漫长的“追寻”，才会有完美的表达。\n\n**寻找第二个答案**\n\n一个人的工资和他的不可替代性成正比，要从年轻的时候就确立一个概念：什么事情都不可能只有一个答案。当别人说起白岩松的思维方式好像不太一样，总在已有答案之外，去寻找另一个答案，就是这么个道理。\n\n## 得失不是非有即无\n\n书读久了，总会信点儿什么，名著之所以伟大，从来不在于所谓的“中心思想”，在于太多人人心中有而个个笔下无的动人细节。生活不只在当下，还有诗和远方。\n\n阅读还有几层意味：\n一、筛选出高于你的作品，你要仰视它，然后去攀登\n二、包容，接受和自己不同的观点和见解，品味其优点，没有包容就没有拓展\n三、通过与别人的对话，读别人的故事，也跟自己对话，丰富自己的人生\n\n**以为读过了，其实错过了**\n\n我们有时候会在错的时间遇到一本好书，或许我们根本还读不懂它，或许读了一半扔下了，以后不会再拿它再来读，这样就是错过了。\n\n**每一本书中都蕴藏着你所期待的自己**\n\n阅读像一段旅程，也要讲究随缘，别功利，别强加，随着年龄增长，它慢慢成为你的一种不可或缺的生活方式。你会发现焦躁的心平息下来了，你会发现你百思不得其解的困惑，千百年来被无数人思考过，并且提供了各种各样的答案，真正使阅读成为一种深刻而愉悦体验的，是你从中找到了自己，塑造了自己。\n\n## 世界不是非黑即白\n\n帕拉图说：谁会讲故事，谁就拥有世界。\n\n传播，归根到底，就是给别人讲一个好故事。\n\n讲故事有什么要点呢？\n\n1、人和人性的故事\n\n2、逻辑，站在受众的角度思考\n\n3、细节，直指人心的力量\n\n4、节奏，讲故事的技术核心\n\n**微信时代的心跳也是一样的**\n\n进入互联网时代，人人都在聊转型，聊新媒体取代旧媒体。但是我说，内容为王就是一个不变的规律。无论你是用微信写情书，还是用鹅毛写情书，你的心跳是一样的。唯一不同的是，微信时代的你，可能被回绝的更快。\n\n**资讯爆炸时，别被忽悠了**\n\n传媒应该具备五种功能：解闷、解惑、解气、解密、解决。\n\n解闷需要娱乐，解惑需要知识，解气需要分寸，解密需要勤奋和时代进步，解决需要影响力和耐心。\n\n二十多年前，当我还年轻，在海拉尔只能读到三天前的报纸，因为偏远。\n\n进入新世纪以来，传媒的发展出现了几个方向性的转变，互联网新媒体越来越多的占据了人们的时间和关注度，更是对传播方式的彻底改变。单向传播变成了更多的交流互动，人们可以发表自己的意见，成为这条新闻的附加信息。这是一种推进媒体改革的力量。\n\n但另一个方向多少让人担忧，就是以市场和商业为导向的媒体行为日益增长，这是不可避免的，也是一种进步，但钱的力量太大了，市场的力量也太大了，越来越多的媒体人远离了原本应该恪守的严肃、负责、认真、敬业精神。虚假新闻和有偿新闻层出不穷。一味的迎合、媚俗、八卦。\n\n在这样一个资讯爆炸的时代里，“看护好你自己”已经变得非常重要的命题。每一个时代里，优秀的人都是独立的人，而不是传媒的俘虏，不要人云亦云，经过大脑的过滤，才得出结论，是或不是。\n\n## 进退不是非取即舍\n\n**中国人不缺德，可是缺啥**\n\n教育不是让人性变“好”，而是约束人性的“不好”，没有纯粹的“好”，也没有纯粹的“坏”，它们在你心中是并存着的，最终取决于周围的环境、制度和人，激活了你的哪一面。\n\n\n三十年前，我们还停留在“英雄主义”时代，那时我们只需要关注少数几个人，只要把该弘扬的弘扬好，该批评的批评得很糟，就算完成任务。现在不同，要求新闻人用一种平民的心态去传播，不能再去仰视或者俯视谁。\n\n**独家表达，是最终赢家**\n\n美国有位导演说过：“世界上80%的故事都已经拍过了。所以，我们要用新方法去拍老故事”。\n\n在资讯爆炸的时代，新闻源人人共享，独家新闻已经由过去的独家占有，变成了独家角度、快速完成的独家深度和独家表达。所以也是个极易做无用功的时代，找到了独家表达的，就被记住了，如果你毫无新意，就被淹没了。\n\n\n**希望的药方**\n\n“偶尔去治愈，常常去帮助，总是在抚慰”。\n\n生命需要4s店，我们都知道汽车有4s店，代表“销售”、“零配件”、“售后服务”、“信息反馈”。为什么生命也需要？是什么呢？\n\n应该是“季节”、“服务”、“运动”、“阳光”\n\n“季节”的春夏秋冬对应生老病死；医院不是一个卖药挣钱的单位，应该是一个为陷入困境的人提供“服务”的地方；“运动”，医生的职责，不是从病人前来就医的时候才开始，这时他的身体状况可能已经糟糕至极了。能不能把我们的“治疗”提前，成为健康生活方式的倡导者？“阳光”，每位患者都处于生命中的黑暗时刻，他到医生这里寻求的不仅是诊断和治疗，还有内心的阳光。\n\n**谁是真正的受害者？**\n\n只有两个职业的后面加了“德”字，师德、医德。近两年发生了不少医闹事件，我们去批评，去谴责，可很少有人反思背后的原因，如果你不能选择站在一个正确的位置上，不也就成了帮凶吗？如果全社会和医院形成了对立面，让医生感到强烈的恐惧和不被理解，因此要逃避甚至破罐破摔的时候，最终的受害者其实不是医生，而是我们自己。\n\n医学是科学，不是神学，因此从来不存在百分百的正确，如果你想让医生对你全力以赴，哪怕只有50%的希望也帮你努力做到100%，那么就要给医生足够的信任和支持。\n\n所以，我们不仅仅要去谴责“恶”，要去反思催生“恶”的土壤。\n\n## 痛并快乐着是我们的宿命\n\n总有人愿意说起上世纪五十年代的中国，“民风淳朴，路不拾遗，夜不闭户”，对不起，也许路不拾遗和夜不闭户，是因为实在没什么可偷的。低层次的公平注定会被打破。\n\n尽管说起那时，依然温馨，相似的场景在今天消失殆尽，但我不认为那就是美好社会的终极画面。\n\n改革剧变的进程中，如果我们在讨论一些问题时，不能将自己的视角建立在前进的立场上，可能会得到很多错误的结论：过去好，现在不好；过去公平，现在不公平。\n\n**走，就有希望**\n\n理想和现实的距离，它不是直行车，而是区间车，甚至是过山车。\n\n第一种：走了几步发现不对，立即回头，有一些回避意味\n第二种，苦苦行进，勉为其难，后来发现实在太远了，于是坚持不住，索性中途放弃吧\n第三种，一开始很失望，很艰难，觉得梦想很远，既然远，那就先不去想它了，只管低头深一脚浅一脚的走好眼前的每一步，慢慢的走出了挣扎的乐趣，走出自我价值的承认和肯定。再走着走着，猛然发现，原来梦想已经近在咫尺。\n\n多数人应该是第三种，暂时忘记梦想，脚踏实地，做好眼前每一件小事，生活迟早会回馈你一份大礼！\n\n\n**将志愿的行动，变成志愿的心**\n\n\n**志愿和自我**\n\n\n当我们抱怨的时候，我们的世界在变小，最后只剩我们自己。\n\n通过帮助天下，让自己走进天下。\n\n\n\n**志愿与身边**\n\n大的活动，志愿者云集，一呼百应，小的活动志愿者却寥寥无几；远方的志愿服务我们立即出发，身边的志愿服务却往往被忽略不计。即使是去非洲，志愿者们也争先恐后的报名，但是身边呢？开个玩笑，老人跌倒了可能都没人扶。\n\n**志愿与需求**\n\n《新闻周刊》节目专门拍过一个公益组织的志愿服务项目：向边远山区的孩子赠送有声书，让他们在上学路上边走边听，过去，我们捐了很多书，还有电脑，可是他们没有时间，也没有条件去用，拿布盖上一次也没用过，而捐赠者还以为自己干了多伟大的事。实际上，他们放学回家后要做作业，干活，上学途中却需要两三个小时。\n\n不考虑实际需求，我们的善心就被浪费了，如何建立需求系统，没有调查就没有发言权，更没有决策权。\n\n**志愿和技能**\n\n如何推轮椅？如何为盲人朋友引路？当然，专业技能不仅指技术，还有精神，过度的关爱是一种歧视，平等才是志愿服务的心灵基础，像一个正常朋友一样聊天，在他需要帮助的时候的，及时的提供帮助，这会让他们感觉很舒服。想象一下，如果你走进一家商店，迎面走来6个服务员嘘寒问暖，你是什么感受？\n\n**志愿与公民**\n\n在中国，事找人很难，人找人很容易，因为只要是熟人就好办。\n\n我们的使命不是对抗恶，而是扩大善。但如果善扩得足够大，恶不就很难立足吗？\n\n## 真相不是非此即彼\n\n**中国：在动态平衡中解决问题**\n\n作为一个公民，在这个社会上很难独善其身，你的幸福，你的快乐，你所有的事情都跟周围有千丝万缕的联系。\n\n人口老龄化，我们这一代人，包括比我们小的一代人，几乎没想过会让孩子养老，想得都是在福利院打麻将。由打麻将变成斗地主，然后下象棋，最后一个人弄弄十字绣，如果剩下的那个是你的话。\n\n不只关注“效率”，还关注“公平”。人权、民主、平等、自由等，公权利和私权利产生了对峙，人们的维权意识也在觉醒，使得过去一直存在但长期不被重视的问题，终于浮出水面。\n\n\n**自己：超越物质的期待**\n\n今天的中国人离世界很近，离自己却很远，大家有一个共同的特质——“我要”，但是要什么，还真不知道。\n“我在北京的三环路上开车，经常遇到一些车像疯狂老鼠似得，在几个车道间来回钻，一会儿一个急刹车，让周围的车很不安全，开出十几公里了，发现它也没超出多远，还在我旁边”。\n\n这种事多了，我们就要思考：中国人怎么了？穷怕了，人太多得抢，先占到手里再说，这是一种苦难的遗传。\n有时候看到身边的人玩命赚钱，可是从来没有花钱的时间。\n\n一位美国的医学专家说：我们追求的是活得健康，别忘了“活”在“健康”前面，然而现在很多拼命减肥的人，是不需要减肥的，苗条，作为体型的一种，已经被时尚化，继而减肥成了一种需求，哪里有需求，哪里就可能有陷阱，哪里有热潮，哪里可能就有危险，在这个问题上我们是不是也走偏了？\n\n“捍卫常识、建设理性、寻找信仰”\n\n\n常识为什么被捍卫？因为我们常常被一些人的言论所忽悠，有一种“原来我之前做的都是错的”的感慨。事实呢？它们不一定是对的，但是，这些“伪常识”会包装，会宣传，常常战胜了常识。\n\n每个人都有理性的一面，但我们并不是对待每一件事都能够理性，所以，需要进一步建设。\n\n寻找信仰？我们没有吗？我想至少对于一部分人来说，是的。中国的信仰，来源于千百年来的传承，但是一切从“五四运动”到“文化大革命”全毁掉了，只留一片空白，接下来的改革开放，欲望扑面而来，底线被层层突破，最后我们幸福了吗，你的答案可能是否定的。我们出发的时候是为了人民币吗，为了权力吗？不是，我们是为了幸福而出发，为了让人生有价值而出发。为什么走着走着就走偏了呢？\n\n但我们不应该因此而悲观，我们能看到还有很多人在追求美，追求乐趣，追求理想，它们不会给你直接利益，也不会让你占到什么便宜，但你愿意去做，这些都是好事。这些内心深处超越物质的期待，就是我们每个人的未来。·\n\n\n## 时间轴上的中国\n\n百年：从家国梦想到个体梦想\n\n按照百年前的强国梦，现在的我们已经实现了，我们开始在追求个人的梦想。\n\n六十年：从“物化”到“非物化”目标的转变\n\n解决了温饱、小康、万元户，我们开始有更高的追求，也开始有了从只追求快，到追求“好而快”的转变。另一个层面是公平、公正、民主，网络的存在给我们的言论自由提供了无限空间，我们常常被各种对的和错的信息淹没，不过也不必太过在意，真理的价值不是独立存在，而是与荒谬同在。真正需要的是如何传播真理的声音。\n\n**继续努力，并多些释怀**\n\n“谈判时双方妥协的艺术”，人生就是场谈判，与梦想谈判，与时代谈判，与身体谈判，要懂得有所妥协。这个世界上从来没有百分百的纯金，又有谁可以圆满的实现理想呢？进一步，再退半步吧。任何一个时代，所谓的终极目标永远无法达成。\n\n**贼没文化，损失巨大**\n\n如果一个贼走进一个敞着门的家，家里有很多名贵字画和文物，他视而不见，只是去搬电视机和录像机，不得不说它损失巨大。贼没文化损失会很大，那么一个民族呢？\n\n文化就是民族的故事。那么因何而著名，因何而流传，因何而有用？\n\n因伟人而著名，因珍惜而流传，因无用而有用。\n\n很多时候，人们看待一样事情，态度是否积极，是否坚定，都来源于自己内心的一股力量，一种相信，好东西需要有人能懂它的好，有人珍惜，而一开始看似无用的东西，或许会在多年之后，当初那些“有用”的都消失了，它成了最宝贵的东西。\n\n不好好重视文化，我们将来拿什么来回忆，拿什么找到从前的我们。\n\n\n## 小结\n\n\n最后，终于写完了这篇算不上读后感，也不算读书笔记的文，虽然很长，也只是概括展示了书的一小部分，话说，让一个两年多都只看技术书籍的人，开始看工作无关的书，是一件多难得的事，起源仍然是好奇，满足多年来的一些愿望，先看的是《狼图腾》，但没能看完就先捧起了这本，这可能也代表着另一方面需求的滋生和一种成长。另外，文章中的内容并不都是书的原话，有些经过调整，有些是我自己写的，你分得出来吗？~好了，最重要的一句话：它真的是一本好书，我们需要多读好书。\n\n先到这里，下次见吧~\n\n\n\n\n\n\n\n\n\n","tags":["思考"],"categories":["读后感"]},{"title":"前端资源收集小思","url":"/2016/03/29/前端资源收集小思/","content":"\n发现一个现象，前端资源收集类的东西仍在不断的出现，即使之前已经有了，出于什么目的呢？抛开我自己也在做这类东西不说。认为自己做得更好，比谁更多更全吗？显然这不是它能解决的唯一痛点，甚至不是最重要的；为了让自己有成就感吗？这也不是坚持把它做下去的动力所在，而且它本身没有多高技术含量，只需要多花点心思就好。那什么是关键呢？能够提供真正优质的资源，产生长期益处，体验越来越好才是。\n\n其实这也是轮子，它为前端的同行提供了什么？提高技术能力？不能。过多的内容可能会让人乍一看的时候觉得：哇，这么多，好全啊，好厉害啊！可然后呢？多到分不清它们是什么，也不知道自己想找的东西在哪里，反而容易让人麻木，让人纷乱，最终厌倦了。当人们不再想去理会它，你认为自己把全世界最好的东西都拿来了，又有何用？\n\n就像我之前在前端早读课 专访 那篇文里所说的那样，它也是一款产品，一个平台，一个桥梁，帮助使用者缩短从问题到答案的距离，前提是你不给使用者造成新的困扰，让人更轻松的找到想要的东西，乐于使用它，遇到问题时快速想到它。如果你只是从汪洋大海里把他们捞了上来，又放到了一个湖里，帮助并不大，而且资源的收集也是要用心思索的，个人认为标准不仅是：“有用，好用”，那就太局限，就成了个工具箱，而是要分类别和层次，方便实用是最直接的体现，但不能成为它的全部，既然要做这么个资源的聚集地了，就有义务筛选好的东西出来，帮助大家开拓视野，推广一些好的思想，甚至经验教训，不仅授之以鱼，还要授之以渔。\n\n前一段时间，我在团队内部专门为我的导航做了个简短的分享，起因是，我早已经把我做的导航推荐给了它们，仍然时不时有人在问某个工具是否有，某个问题哪里找答案，我那里有啊，他们怎么不去那里找？这引起了我一次次的思考，当然，给他们做分享只是出于便利，我不可能给每个人都讲一次，问题依然还是存在，也有人给我提过建议，我会努力找到好的方案把它解决掉。\n\n做个小结：\n\n既然要做一个给大家用，而不是自娱自乐的东西，就不能靠想象，多站在用户角度考虑，将用户引导到它们想要和应该到达的目的地，而不是自high，才能不断完善，更受欢迎，也更有意义，共勉！","tags":["思考"],"categories":["思考"]},{"title":"征服javascript学习笔记（四）——变量、作用域和内存","url":"/2016/03/27/javascript-study-four/","content":"\njs里的变量和其他语言不同，它是松散型的，这决定了它只是在特定时间保存特定值的一个名字而已，由于不存在数据类型和值之间的绑定，所以，变量的值和类型都可以在脚本的生命周期内改变。\n\n## 基本类型和引用类型的值\n\nES变量可能包含两种类型的值：基本类型和引用类型。\n\n**基本类型值**指的是简单的数据段\n\n**引用类型值**指的可能是多个值构成的对象\n\n在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值，前面我们讨论过的基本类型值，引用类型的值是保存在内存中的对象，与其他语言不同，js不允许直接访问内存中的位置，也就是不能直接操作对象的内存空间，在操作对象时，实际上是在操作对象的引用而不是实际的对象，为此引用类型的值是按引用访问的。\n\n1、动态属性\n\n两种类型的变量定义方式是类似的，但值存到变量中后，可执行的操作则大相径庭。对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法。如下\n\n\tvar person=new Object();\n    \tperson.name=\"idea\";\n    \talert(person.name); //\"idea\"\n\n\n以上代码创建了一个对象，并把它保存在了变量person中，，然后我们为其添加了name属性，并进行了赋值，紧接着通过alert（）函数访问了这个属性，如果对象不被销毁或者这个属性不被删除，则这个属性将一直存在。\n\n但是我们不能给基本类型的值添加属性，尽管这样做不会导致任何错误。\n\n2、复制变量值\n\n除了保存的方式不同，在从一个变量向另一个变量复制值时，两种类型也不同。\n如果是基本类型，则会创建一个新值，然后把新值复制到为新变量分配的位置上。\n如果是引用类型，同样也会将其存储的值复制一份到新分配的空间，不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象，因此，改变其中一个量，就会影响另一个变量。\n如下例：\n\n\tvar obj1=new Object();\n    \tvar obj2=obj1;\n    \tobj1.name=\"idea\";\n    \talert(obj2.name); //\"idea\"\n   \t\n3、传递参数\n\nES中的所有函数的参数都是按值传递的，即把函数外部的值复制到函数内部的参数，就像把值从一个变量复制到另一个变量一样，所以，复制变量上面已经讲过，有不少人可能会困惑，访问变量有按值和按引用两种，而参数只能按值传递。下面解惑：\n在传递基本类型的值时，被传递的值会被复制给一个局部变量，即命名参数。\n在传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。\n\n看下面的例子：\n\n\tfunction addTen(num){\n\t\tnum+=10;\n\t\treturn num;\n    \t}\n    \tvar count=20;\n    \tvar result=addTen(count);\n    \talert(count);\n    \talert(result);\n\n这里的函数addTen()有一个参数num，参数实际上是函数的局部变量，在调用函数时，变量count被作为参数传递给函数，于是20被复制给参数num以便在addTen()中使用，函数内部，参数num的值被加上了10；但这一变化不会影响到外部的count变量，num和count仅仅是具有相同的值，假如num是按照引用传递的话，变量count的值也会变成30，从而反映函数内部的修改，但如果使用对象，问题就不怎么好理解了，看下面例子：\n\n\tfunction setName(obj){\n\t\tobj.name=\"idea\";\n    \t}\n    \tvar person=new Object();\n    \tsetName(person);\n    \talert(person.name);\n   \t\n以上代码创建了一个对象，将其保存在了person中，然后这个变量传递到setName()之后复制给了Obj。在函数内部，obj和person引用的是同一个对象，换句话说，**即使这个变量是按值传递的，obj也会按引用来访问同一个对象，于是，函数内部为obj添加属性后，函数外部的person也会有所反应。但有不少开发人员认为：在局部作用域中修改的对象会在全局作用域中反映出来，就说明参数是按引用传递的，为了证明其是按值传递的，看下面的例子：\n\n\tfunction setName(obj){\n\t\tobj.name=\"idea\";\n\t\tobj=new Object();\n\t\tobj.name=\"alien\";\n    \t}\n    \tvar person=new Object();\n    \tsetName(person);\n    \talert(person.name);//\"idea\"\n   \t\n这个例子和前面那个例子唯一的区别，是在函数内添加了两行代码。\n产生了什么作用呢，新建了一个对象，改变了对象的属性name的值，如果是按照引用来传递的，那么person的name属性就是alien，而不是idea。实际上，当在函数内部重写obj时，这个变量引用的就是一个局部对象了，这个局部对象会在函数执行完毕后立即销毁。\n\n注：可以把ES中函数的参数想象为局部变量。\n\n4、检测类型\n\n要检测一个变量是不是基本类型，前面提到过的typeof操作符是最佳的工具，说具体点，typeof是确定一个变量是字符串、数值、布尔值，还是undefined的最佳工具，如果变量的值是对象或null，则typeof会返回“object”。\n\n虽然typeof是个有力的工具，但是在检测引用类型时，它的用处不大，因为通常我们并不想知道某个值是对象，而是想知道它具体是什么对象，对此，ES提供了instanceof操作符。\n\n例子如下：\n\n\talert(person instanceof Object);\t\n\n如果变量是给定引用类型的实例，那么就会返回true，当然，如果用instanceof检测基本类型，则始终会返回false，因为基本类型不是对象。\n\n## 执行环境和作用域\n\n执行环境是js中最为重要的一个概念，定义了变量或函数有权访问的其他数据，决定了它们各自的行为，每个执行环境都有与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中，我们编写代码时无法访问这个对象，但解析器在处理数据时会在后台使用它。\n全局执行环境是最外围的一个执行环境，根据ES实现所在的宿主环境不同，表示执行环境的对象也不一样，在web浏览器中，全局执行环境被认为是window对象，因为所有全局变量和函数都是作为window的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的变量和函数定义也随之销毁（全局执行环境直到应用程序退出时才被销毁）。\n每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，函数执行后，栈将其函数弹出，把控制权返回给之前的执行环境。\n当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。\n\n活动对象最开始只包含一个变量，即arguments对象（这个对象在全局环境中是不存在的），。作用域链中的下一个变量对象来自包含（外部）环境，再下一个变量对象则来自下一个包含环境，这样，一直延续到全局执行环境，全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n标识符解析是沿着作用域链一级一级的搜索过程，搜索过程始终从链的前端开始逐级向后回溯，直至找到标识符为止，如果找不到，通常会导致错误发生。\n\n\tvar color=\"blue\";\n        function changeColor(){\n            if (color===\"blue\") {\n                color=\"red\";\n            } else {\n                color=\"blue\";\n            }\n        }\n        changeColor();\n        alert(\"Color is now*+color\");\n\nchangeColor()的作用域包含两个对象，它自己的变量对象和全局环境的变量对象，可以在函数内部访问color，就是因为可以在这个作用域链中找到它。\n\n此外，在局部作用域中定义的变量可以在局部环境中和全局变量互换使用。内部环境可以通过作用域链访问所有外部环境，外部环境不能访问内部环境中的任何变量和函数，这些环境之间的联系是线性、有次序的。每个环境都可以向上搜索作用域链，以查询变量和函数名；但任何环境都不能通过向下搜索作用域链而进入执行环境。\n\n1、延长作用域链\n\n虽然执行环境的类型只有两种——全局和局部，但还有其他办法来延长作用域链，因为有些语句可以在作用域链的前端临时增加一个变量对象。该变量对象会在代码执行后被移除，有两种情况下会发生这种现象，具体来说，就是当执行流进入下列任何一个语句时，作用域链就会加长：\n\n- try-catch语句的catch块\n- with语句\n\n这两个语句都会在作用域链的前端添加一个变量对象。\n\n对with语句来说，会将指定的对象添加到作用域链中\n\n对catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明\n\n2、没有块级作用域\n\njs没有块级作用域经常会导致理解上的困惑，\n\n在其他类C语言中，用花括号包含起来的代码块都有自己的作用域，因而支持根据条件来定义变量。即在语句执行完毕后它不会被销毁，而是将变量添加到当前的执行环境中。\n\n2.1 声明变量\n\n使用var声明的变量会自动被添加到最接近的环境中，在函数内部，最接近的环境就是函数的局部环境；在with语句中，最接近的就是函数环境。如果初始化变量没有使用var，该变量会自动添加到全局环境。\n\n在编写js代码的过程中，不声明而直接初始化变量是一个常见的错误做法，可能导致意外，建议一定先声明。\n\n2.2 查询标识符\n\n当在某个环境为了读取或者写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什么，搜索过程从作用域的前端开始，向上逐级查询，如未找到，一直搜索到全局环境，若还未找到，意味着该变量未声明。如果局部环境中存在着同名标识符，就不会使用位于父环境中的标识符。\n\nps：变量查询也不是没有代价的，明显，访问局部变量要比访问局部变量更快，因为不用向上搜索作用域链。但随着js引擎的逐步优化，将来这个差别可能可以忽略不计。\n\n3、垃圾收集\n\njs中具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存，所需内存的分配和无用内存的回收完全实现了自动管理。这种机制其实也简单，找出那些不再继续使用的变量，释放其内存。为此垃圾收集器会按照固定的时间间隔周期性的执行这一操作。\n\n先来分析一下函数中局部变量的生命周期。局部变量只在函数执行过程中存在，而在这个过程中，会为局部变量在栈或堆内存上分配相应空间，以便存储它们的值，然后在函数中使用这些值，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放内存供将来使用。但并非所有情况下都这么容易得出结论，垃圾收集器必须对其进行跟踪，对不再有用的变量打上标记以备将来收回它占用的内存，标识策略可能会因实现而异，但具体到浏览器实现通常有两个策略。\n\n3.1 标记清除\n\n是js中最常用的垃圾收集方式，当变量进入环境，就将这个变量标记为“进入环境”。逻辑上永远不能释放进入环境的变量占用的内存，因为只要执行流进入相应环境，就可能用到它们，而当变量离开环境时，将其标记“离开环境”。\n\n可以使用任何方式来标记变量，说到底，如何标记变量不重要，关键在于采取什么策略。\n\n垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，会去掉环境中的变量以及被环境中变量引用的变量的标记，而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了，最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。\n\n3.2 引用计数\n\n含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型值赋给该变量时，这个值的引用次数是1，如果同一个值又被赋给另一个变量，引用次数加1，相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1，引用次数变成0，说明没有办法再访问这个值，因而就可以进行回收。\n\n3.3 性能问题\n\n垃圾收集是周期性运行的，如果为变量分配的内存数量很可观，那么回收工作量也是很大的，这个时候，确定收集的时间间隔就很重要了。\n\n3.4 管理内存\n\n在使用具备垃圾收集机制的语言编写程序时，开发人员一般不必操心内存管理的问题，但是js有所不同，其中最主要的问题是，分配给web浏览器的可用内存数量通常比分配给桌面应用程序的少，目的是出于安全考虑，防止运行js的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。\n\n因此，确保使用最少的内存可以让页面获得更好的性能，而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据，一旦数据不再有用，最好通过将其值设置为null来释放其引用，这个做法叫解除引用。\n\n不过解除一个值的引用并不意味着自动回收该值所占用的内存，它的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。\n\n好了，关于“变量、作用域和内存”就先简单说到这儿了，其实也蛮多的，但是耐心的品味一下就能有不少收获。下次就该是js中的大块头之一——“引用类型”了，敬请期待~\n\n\n\n\n\n","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"征服javascript学习笔记（三）——基本概念（下）","url":"/2016/03/20/javascript-study-three/","content":"\n## 操作符\n\n操作符有多种，包括算术操作符（加、减号）、位操作符、关系操作符和相等操作符，能够适用于很多值，例如：字符串、数字值、布尔值，甚至对象，在应用于对象时，相应的操作符通常会调用对象的ValueOf()或toString()方法，以便取得可以操作的值。\n\n**一元操作符**\n\nES中最简单的操作符，只能操作一个值。\n\n1、递增和递减\n\n借鉴自C，各有两个版本：前置和后置。\n\n顾名思义，使用的时候，就是放到前面或者后面，能起到什么作用\n\nvar age=29;\n++age;\n\t\n得到的结果为30.“--”符号亦然，会得到28\n\n至于后置，那就是先输出结果后进行计算了，不再赘述。\n\n2、一元加、减\n\n一元加减应用到数值上面，和我们平时的认知没有不同，代表着正负数。\n\n在对非数值应用时，就像Number()转型函数一样对值进行转换，布尔值true和false会被转换为1和0，字符串值会按照一定的规则进行解析，对象是先调用它们的valueOf()和toString()方法，再转换得到的值。\n\n一元减操作符可以用于负数，一元加、减均可用于基本运算。\n\n**位操作符**\n\n位操作符用于最基本的层次上，按内存中表示数值的位来操作数值，ES中的所有数值都是以64位格式存储，但位操作符不直接操作64位的数，是将64位的值转换成32位的整数，然后执行操作，最后将结果转换回64位，对于开发人员来说，64位存储格式是透明的，因此整个过程就像只有32位的整数一样。\n\n对于有符号的整数，32位中的前31位用于表示整数的值，第32位用于表示数值的符号：0表示正数，1表示负数。叫做符号位。\n\n符号位的值决定了其他位数值的格式，其中，正数以纯二进制格式存储，31位中的每一位都表示2的幂，负数同样以二进制码存储，但使用的格式是二进制补码，计算一个数值的二进制补码，需要进行3个步骤：\n（1）求这个数值绝对值的二进制码\n（2）求二进制反码\n（3）得到的二进制反码加1\n\n1、按位非（NOT）\n\n由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码，是ES操作符中少数几个与二进制计算相关的操作符之一。\n\n2、按位与（AND）\n\n由一个和号字符（&）表示，有两个操作数，从本质上讲，就是将两个数值的每一位对齐，然后根据有0为0，两个都是1为1的规则，对相同位置上的两个数进行计算\n\n3、按位或（OR）\n\n由一个竖线符号（|）表示，也有两个操作数，遵循有1为1，同为0则为0的规则对相同位置的数进行计算。\n\n4、按位异或（XOR）\n\n由一个插入符号（^）表示，两个操作数，遵循：两位不同为1，相同为0的规则。\n\n5、左移\n\n由（<<）表示，会将数值的所有位向左移动指定的位数。\n\n6、有符号的右移\n\n由（>>）表示，会将数值向右移动，但保留符号位。有符号的右移操作和左移操作恰好相反。\n\n7、无符号右移\n\n由（>>>）表示，会将所有32位都向右移动。对正数来说，无符号右移的结果和符号右移相同，但对负数来说，情况就不同了，首先，无符号右移是以0来填充空位，而不是像有符号右移那样以符号位的值来填充空位，所以，对正数的无符号右移与有符号右移结果相同，但负数的结果就不一样了，其次，无符号右移操作符会把负数的二进制码当成正数的二进制码，而且，由于负数以其绝对值的二进制补码形式表示，因此会导致无符号右移后的结果非常大。\n\n**布尔操作符**\n\n3个：非（NOT）、与（AND）、或（OR）\n\n逻辑非，一个！号表示，无论操作的值是什么类型，它都会返回一个布尔值，首先把操作对象转换成布尔值，再对其求反。当然，它也可以用作把一个值转换成其对应的布尔值，同时使用两个逻辑非操作符，实际上会模拟Boolean()转型函数的行为，就得到了这个值真正对应的布尔值。\n\n逻辑与，由两个和号（&&）表示，两个操作数。遵循“同为真则真，有一个假则为假”的规则，可以应用于任何类型的操作数，在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。\n\n逻辑或，由（||）表示，两个操作数，遵循“同假为假，其他为真”的规则。\n\n**乘性操作符**\n\n乘法 *\n除法 /\n求模 %\n\n**加性操作符**\n\n加法 +\n减法 -\n\n**关系操作符**\n\n小于（<）、大于（>）、小于等于（<=）或大于等于（>=）\n\n**相等操作符**\n\n相等和不相等 “==”和“!=”\n全等和不全等 “===”和“!==”\n\n**条件操作符**\n\na>b?1:2;\n\n若a大于b则为1，不大于则为2\n\n**赋值操作符**\n\n用“=”表示，如：a=3；将右侧的值赋给左侧\n\n每个主要的算术操作符都有对应的复合赋值操作符，如：*=、/=、%=、+=、-=、<<=、>>=.\n\n**逗号操作符**\n\n使用逗号操作符可以在一条语句中执行多个操作，如下例：\nvar num1=1,num2=2,num3=3;\n逗号操作符多用于声明多个变量，除此之外，逗号操作符还可以用于赋值，在用于赋值时，逗号操作符会返回表达式的最后一项，如下例：\nvar num=(1,2,3,4,5); \n最终num的值为5.\n\n## 语句\n\n首先，我们要知道语句是用来做什么，比如，条件判断，我们常常需要做比较，某个条件成立的情况下执行某个动作，又或者循环，网页中每种类型的信息都可能是多个，那么对多个进行判断或者操作，就可能会用到循环，当然，也跟数组有关，后面会有，这里不探讨。\n\n1、if\n\n\tif(a){\n\t\tdo this\n\t\t} else {\n\t\tdo this\n\t\t}\n\n虽然在比较简单的情况下，比如一个简单的判断之后执行一个动作，那么它们可以被写在一行上，但是，业界普遍推崇的最佳实践是始终使用代码块，不管是简单还是复杂\n\n2、do-while\n\n是一种后测试循环语句，只有在循环体中的代码执行之后，才会测试出口条件，即循环体内的代码至少会被执行一次：\n\n\tvar i=1;\n\n\t\tdo{\n\t\ti+=2;\n\t\t} while (i<10)\n\t\n\t\talert(i);\n\n只要变量i的值小于10，语句就会一直执行下去。\n\n3、while\n\n跟do-while相对，它是前测试语句，先判断，后执行。\n\n\tvar i=0;\n\t\twhile(i<10){\n\t\ti+=2;\n\t\t}\n\n4、for \n\n一种前循环测试语句，具有在执行循环前初始化变量和定义循环后要执行的代码的能力。\n\n包括初始化变量定义，条件表达式，和循环的方式三个参数设置，例如：\n\n\t var count=10;\n\t \tfor(var i=0;i<count;i++){\n\t \talert(i);\n\t \t}\n\t \n其实你可以发现，它跟下面的语句功能相同\n\n\tvar count=10;\n\t\tvar i=0;\n\t\twhile(i<count){\n\t\talert(i);\n\t\t}\n\t\nfor循环只是把循环有关的代码集中到了一个位置，故而，while做不到的，for也做不到。需要指出的是，在for循环的变量初始化表达式中，可以不用var，也可以在外部进行初始化。\n\nfor语句有极大灵活性，是ES中最常用的一个语句。\n\n5、for-in\n\n是一种精准的迭代语句，可以用来枚举对象的属性，譬如示例：\n\n\tfor(var propName in window){\n\t\tdocument.write(propName);\n\t}\n\t\n上述例子，使用for-in循环来显示了BOM中windows对象的所有属性，注：ES对象的属性没有顺序，因此，通过for-in循环输出的属性名顺序是不可预测的。\n\n6、label\n\n使用label语句可以在代码中添加标签，以便将来使用。\n\n\tlabel:statement\n\n示例：\n\n\tstart:for(var i=0;i<count;i++){\n\t\talert(i);\n\t}\n\n此例中定义的start标签可以在将来由break或continue语句引用，加标签的语句一般都要与for语句等循环语句配合使用。\n\n7、break 和 continue\n\n此二者用于在循环中精确的控制代码的执行，其中，break会立即退出循环，强制执行循环后的语句，而continue语句虽然也会立即跳出循环，但退出循环后会从循环的顶部继续执行。\n\n8、with\n\nwith语句是将代码的作用域设置到一个特定的对象中，定义with语句的目的主要是为了简化多次编写同一个对象的工作，如下\n\n\t\tvar qs=location.search.substring(1);\n\t\t\tvar hostName=location,hostname;\n\t\t\tvar url=location.href;\n\n上面几行代码都包含location对象，如果使用with语句，可以写成如下：\n\n\twith(location){\n\t\tvar qs=location.search.substring(1);\n\t\tvar hostName=location,hostname;\n\t\tvar url=location.href;\n\t}\n\t\n但是，大量使用with会导致性能下降，同时也给调试代码带来困难，大型应用程序中不建议使用with语句。\n\n9、switch\n\nswitch语句和if语句关系密切，同样可用于多种条件的判断，代码示例如下：\n\n\tswitch(i){\n\t\tcase:25:\n\t\talert(\"25\");\n\t\tbreak;\n\t\tcase:35:\n\t\talert(\"35\");\n\t\tbreak;\n\t\tcase:45:\n\t\talert(\"45\");\n\t\tbreak;\n\t\tdefault;\n\t\talert(\"Other\");\n\t}\n通过为每个case后面添加一个break语句，可以避免同时执行多个case代码的情况，若确实需要合并几种情况，要在代码中写清楚注释。\n\n可以在switch中使用任何数据类型，而且每个case的值不一定是常量，可以是变量甚至表达式。\n\nswitch语句在比较值时使用的是全等操作符，因此不会发生类型转换。\n\n## 函数\n\n提到函数，不得不说的一个词是**封装**，它可以封装任意多条语句，可以在任何地方，任何时候调用执行，使用function关键字来声明，后跟一组参数及函数体。譬如：\n\n\tfunction sayHi(name,message){\n\t\talert(\"hello\"+name+\",\"+message);\n\t}\n\t\n可以通过其函数名进行调用，后面加上一对圆括号和参数，多个参数逗号分开。\n\n\tsayHi(\"idea\"，“you are good”)；\n\t\nES中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回的值来实现返回值，如：\n\n\tfunction sum(num1,num2){\n\t\treturn num1+num2;\n\t}\n\n这个sum()函数的作用是两个值的和，除了return语句，没有任何声明表示该函数会返回一个值，调用示例如下：\n\n\tvar result=sum(5,10);\n\n**函数会在return语句之后立即退出，若return后面还有代码，将不会被执行。**\n\n当然，一个函数可以在函数体的不同代码块中包含多个return语句。另外，return语句可以不带任何返回值，这时，函数在停止执行后将返回undefined值，用于需要函数提前终止又不需要返回值的情况。\n\n推荐做法是，要么让函数始终返回一个值，要么永远不要返回值，否则会给代码调试带来不便。\n\n\n\n**理解参数**\n\nES函数的参数和其他语言的函数参数不同，它不在乎传进来多少参数，也不在乎参数的数据类型，定义的函数参数个数和调用是传递的参数之间没有必然联系，之所以会这样，是因为ES中的参数内部是用一个数组来表示的，函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，如果这个数组中不包含任何元素，也无所谓，包含多个元素，也没问题，实际上，在函数体内，通过arguments对象来访问这个参数组，从而获取传递给函数的每一个参数。\n\n其实argument对象只是与数组类似，前面例子可以这样写\n\n\tfunction sayHi(){\n\t\talert(\"hello\"+arguments[0]+\",\"+arguments[1]);\t\t\n\t}\n它不包含命名参数，但函数功能依旧，这个事实说明了ES函数的一个重要特点，命名的函数只是提供了便利，但不是必需的。当然，另外一点是，arguments对象可以和参数一起使用，它的值永远和对应命名参数的值保持同步。\n\n需要记住的最后一点：没有传递值的命名参数将自动被赋予undefined值，这就跟定义了变量却并未初始化一样。\n\n**没有重载**\n\nES函数不能像传统意义那样实现重载，而在其他语言中，可以为一个函数编写两个定义，只要两个定义接受的参数的类型和数量不同即可。如前面所述，ES中的函数没有这些，其参数是由包含零活多个值的数组来表示的，所以，重载是不可能做到的。\n\n如：\n\n\tfunction addSomeNumber(num){\n\t\treturn num+100;\n\t}\n\t\n\tfunction addSomeNumber(num){\n\t\treturn num+200;\n\t}\n\t\n\tvar result=addSomeNumber(100);  //300\n\t\n此处，函数被定义了两次，但后定义的函数覆盖了先定义的函数，所以最后的值为300.\n\n\n好了，关于基本概念，到此就告一段落了，还是有不少内容的，接下来依然路途遥远，但请相信只要我们坚持下去，它就不再那么遥远，定会越来越精彩，一起继续加油吧！~\n\t\n\n\n\t\n\n\n\n","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"设计，不止于美","url":"/2016/03/06/design-principle/","content":"\n\n\n最近拜读了**《写给大家看的设计书》**(精装版)~\n\n这是一本大家都说好的书，能通过活动集赞得来，首先要感谢各位好友的给力，然后也不能浪费了。就品读了一番。\n\n\n## 你也能懂“设计”\n\n\n**脱掉高大上的外衣，它就在你我身边**\n\n我是做网页相关工作的，但首先要跟没读过的读者说，这不是一本教你网页设计的书，所以，书名里的“大家”，不是对广大网页设计人员，而是对所有人。里面所提供的设计原则和技巧可以应用到生活中的很多方面。\n\n文档，信件，名片，新闻简报，传单，宣传册，报刊，广告，简历，ppt等等，总有一款适合你。当你掌握了一些编排和设计技巧，就能使自己的作品看起来更专业，从而达到理想效果。\n\n当我们提到“设计”这个词的时候，会有什么感觉，美观，整齐或者具有某种鲜明的风格和目的，甚至，你说不出它哪里好，就是觉得挺好。那么下面就跟着我概览一下吧。\n\n## 四大基本原则\n\n想要给人以设计感，达到更好的效果，必然要有相应的设计思想和方法论，也就是这里所说的原则，既然是设计原则，轻内容，重形式。\n\n\n**亲密性**——让信息传达更清晰\n\n在很多设计新手的眼中，更加热衷于对“画布”的填充，加一段话，加一幅图等等，对于页面中的留白有种本能的回避，似乎只有内容才能体现出水平。其实不然，如果页面当中充斥着太多内容，则可能造成杂乱无章。\n\n亲密性原则，即**将相关的项组织在一起**，使它们的物理位置相互靠近，这样，相关项将被视为一个组，而不是毫无关联的两个东西。\n\n当我们展示信息时，比如，一张传单，会有大标题，段落和段落标题，图片和图片信息描述，在下方可能会有地址、联系人、联系方式。诸如此类，如果它们被一窝蜂的堆积到一张纸上，如下图：\n\n![](design-principle/01.jpg)\n\n显然会很难区分和辨识，更别提让受众有深入阅读下去的兴趣，那么传单的制作就是失败的。\n\n根据亲密性原则，我们向外界传达信息时，如果把关系相近的放在一起，不仅能使内容可读性更强，好的结构编排能帮助人理解，也能降低人眼的阅读负担，更愿意读下去。拿上例来说，把大标题单独一行放在顶部，段落和段落标题以列表形式由上到下的排列，每个段落的标题和段落紧靠，同时和其他段落保持一点距离，底部集中放置联系人的信息，则会显得结构很清晰和合理。如下：\n\n![](design-principle/02.jpg)\n\n\n\n**对齐**——文字也能有态度\n\n如果你对页面中各元素的关系和相对位置不敏感，也不在意，它们就会显得没有任何规律，内容虽仍然可读，体验就大打折扣了。我们的眼睛喜欢看到有序的事物，会给人一种平静、安全的感觉，也有助于传达信息。对齐原则，即**每一项都应当与页面上的某个内容存在某种视觉联系**。\n\n对齐，就要有对齐的基准线，通常我们用来布局和排版的载体是矩形，所以，在方向上就有了“水平、竖直”，水平方向上，有“居左、居中、居右”，竖直方向上有“置顶、居中、置底”。\n\n那么它们体现了什么态度呢，凌乱和整齐划一的区别大家应该都知道，首先是视觉感官，其次，以同一基准线对齐的元素，会不自觉的把它们归为同类或同组。\n\n要怎样对齐？\n\n“居中”是很多初学者的最爱，也是网页设计和制作者最熟悉的一种对齐方式，比较常见的是文本/图片相对于父容器居中和网页整个视区的居中。这种对齐看起来安全，感觉上也很舒服，居中对齐会创建一种更正式、更稳重的外观，显得更中规中矩，但通常也会有些乏味，所以，如果你的第一反应是居中，那么就需要改变一下自己的思维惯性，本书作者建议不要轻易尝试居中，真正适合使用居中对齐的场景还是比较少的，在生活当中应用的更多的是相对某一条“隐形”的基准线对齐。\n\n对齐的目的，是使页面统一而且有条理，另外要控制自己的发挥欲望，避免页面上混合使用多种文本对齐。\n\n**重复**——统一的艺术\n\n\n*设计的某些方面需要在整个作品中重复*。重复的内容是什么没有严格限制，我们在日常生活中也经常看到这种重复，比如，路牌，马路中的线，一栋楼的每间房，是的，跳出平面设计，重复也是无处不在的，回到平面，我们使用的文章或者段落标题，列表图标，段落间距，这些都是重复。如下：\n\n![](design-principle/03.jpg)\n\n\n可以认为重复是一致性，但它不是自然的一致性，而是有意识的设计行为。你会不自觉的把看起来重复的一致的作为同一组，描述的是同一类信息。\n\n**对比**——抓住眼睛，让重点脱颖而出\n\n对比是为页面增加视觉效果的最有效途径，也是在不同元素之间建立一种有组织的层次结构最有效的方法，但要记住实现有效的对比，就必须强烈。\n\n**要不同，就截然不同**\n\n比如，如果站在你面前的是两个双胞胎，它们肯定是不一样的，但一眼看上去，你无法很快找出不同在哪里，再比如大家应该都玩过找茬游戏，两幅几乎完全相同的图，找出细微的不同点也是很难的。\n\n上面是举了两个生活中的例子说明，用在平面设计上的话，对比不仅可以吸引眼球，还可以用来组织信息、清晰层级，指引读者并制造焦点。\n\n怎样正确使用呢？\n\n想知道怎样正确使用，就要知道怎样是不恰当的，比如，就网页设计来说，13px和14px的字，1px粗的线和2px粗的线，黑色和稍浅一点的黑色等等，这些对比都很不明显，非但没有达到对比的效果，而且会让人觉得你**出现了失误！**\n\n比如这样：\n\n![](design-principle/compare01.jpg)\n\n![](design-principle/compare02.jpg)\n\n\n你能看出来两幅图中重点和非重点有明显区别吗？最多是仔细看会觉得哪里不对，但这起不到对比的效果。\n\n\n\n## 色彩的秘密\n\n我们生活在一个五彩缤纷的世界，色原理论可以很深入、很复杂，当然，这里不会说得那么复杂，只会对色轮做一个简要的介绍。在实际的场景中，我们经常会问到的一个问题是，如何配色？这个时候色轮就会很有用。\n\n色轮的基础是“黄、红、蓝”，称为三原色，因为它们是无法被创建的颜色。通过将三原色进行不断的混合、搭配，可以得到任何我们想要的颜色。如下：\n\n![](design-principle/color_wheel01.jpg)\n\n![](design-principle/color_wheel.jpg)\n\n在构造出了这么一个色轮之后，我们可以从下面几个方面去搭配：\n\n* 单色，不同色调，比如，暗、中、明\n\n![](design-principle/color_wheel02.jpg)\n\n* 类比色，相邻颜色称为类比色，可以制造一种低对比度的和谐美感\n\n![](design-principle/color_wheel03.jpg)\n\n\n* 补色，色轮上直线相对的两种颜色称为补色，能形成强烈对比，传达出活力、能量、兴奋等意义\n![](design-principle/color_wheel04.jpg)\n\n\n* 分裂补色，同时用补色及类比色的方法来确定颜色关系，兼具低对比度的美感和补色的力量感，既和谐又有重点\n![](design-principle/color_wheel05.jpg)\n\n当然，还有其他种类的搭配方法，相关内容这里不做赘述，如感兴趣，大家可以查阅相关资料进一步学习。\n\n\n## 多样的文本\n\n这本书像其他的翻译过来的书籍一样，里面所举示例都是英文，故而，这里讨论的字体也是英文，虽然不是中文，但对英文字体的了解也是有一点帮助的，介绍了几种不同类型的字体，比如：衬线体、无衬线体、粗衬线体、手写体.如下图，你可以正确的将它们连线吗？\n\n![](design-principle/word-kind.jpg)\n\n\n除了类别，字体的设计还有很多其他的表达方式，比如：引号、撇号、连接号、大写字母、下划线、字距等。字体本身可以有多种对比，大小、粗细、结构、形状、方向、颜色。作为网页方面来说，可以多了解一下text-X和font相关属性。\n\n## 并肩战斗\n\n上面介绍了诸多的原则、技巧和注意事项，它们各个身怀绝技，但如果只应用了其中的一种，仍然无法达到理想效果，要合理的将它们结合起来，才能让我们的设计看起来既美观，又清晰，主次分明。\n\n## 总有特权\n\n什么是特权？这个世界上，如果每种事物都遵循同一规则，中规中矩，就没有惊喜可言了。比如，要对齐都对齐，要一样大都一样大，横平竖直，就显得缺少创造性。特权，就是允许页面当中的少量元素脱离正常文档流，摆个特殊的pose，给整体制造一种别样的感觉。\n\n但是，要明确的一点是，你在打破规则之前，首先是你要十分的清楚规则是什么，在规则处破规则，这样不会让人觉得你的不同很莫名其妙。\n\n## 小结\n\n关于写给大家的设计，就先讨论到这里吧，希望能对你有一点启发，能应用到实际当中给自己的作品增色，也对想要读这本书的朋友有一定的参考。以后会继续讨论关于设计的其他方面。下次见。\n\n\n","tags":["设计、读后感"],"categories":["设计"]},{"title":"征服javascript学习笔记（二）——基本概念（上）","url":"/2016/03/05/javascript-study-two/","content":"\n## 区分大小写\n\n在js中，一切（包括“变量”、“函数名”、“操作符”）都区分大小写\n\n## 标识符\n\n指变量、函数、属性的名字，或者函数的参数。它的规则如下：\n- 第一个字符必须是字母、下划线或者$\n- 其他字符可以是字母、下划线、$或数字\n\n按惯例，一般采用驼峰大小写格式\n注：不要把关键字、保留字、true、false和null作为标识符\n\n## 注释\n\n单行：//\n\n多行：/**/\n\n## 变量\n\njs的变量是松散型，即一般人们所说的弱类型,可以保存任何类型的数据。比如：\n\nvar a=10；\nvar a=\"idea\";\n\n需要注意的一点是，用var操作符定义的变量将成为定义该变量的作用域中的局部变量，也就是说\n\nfunction test（）{\n    var a=10；\n    }\ntest（）；\nalert（a）  //错误\n\n变量在函数退出后被销毁\n\n如果像下面这样\n\nfunction test（）{\n    a=10;\n}\ntest（）；\nalert（a）；//10\n\n这里省略了var操作符，定义了一个全局变量。\n\n注：这种做法并不推荐，因为在局部作用域中定义全局变量很难维护。\n\n## 数据类型\n\n共有5种简单/基本数据类型：\n\nUndefined、Null、Boolean、Number和String\n\n还有一种复杂数据类型——Object，它本质上是由一组无序的名值对组成。\n\n**typeof操作符**\n\n因为js是松散型，所以要有一种方法监测数据类型，typeof便是这么一种方法，它检测出来的结果可能以下几种：undefined、number、string、function（值是函数）、boolean、object（值是对象或null）\ntypeof的操作数可以是变量，也可以是数值字面量，比如：\n\nalert（typeof（a））；\nalert（typeof a）;\nalert（typeof 10）;\n\n注意：typeof是一个操作符，而不是函数，所以，操作数的圆括号可选,上面的前两种写法都是可以的。\n\n下面就每种类型稍加介绍：\n\n**Undefined**\n\n在使用var定义了一个变量而未对其初始化的时候，这个变量的值就是undefined\n\n比如：\n    \nvar a；\nalert（a==undefined）；//true\n\n这里需要区分一下的是，未初始化的变量，值是undefined，这跟未定义的变量还是不同的，比如：\n\nvar a;\nalert（a）；//undefined\nalert（b）；//产生错误\n\n对于未声明的变量，只能进行一项操作，就是typeof，但有意思的是：\n\nvar a；\nalert（typeof a）；//undefined\nalert（typeof b）；//undefined\n\n如你看到的那样，未声明和未初始化的变量，从类型上来看都是undefined，这并不是说二者完全等同，它们有着本质的区别，但是从可操作性上来说是一样的，都不能进行操作。\n\n当然，也正是因为这一点，我们最好在声明一个变量的时候进行初始化，这样当我们检测一个变量的类型时返回undefined就能准备判断它是未声明的变量。\n\n**Null**\n\n逻辑角度来看，null值表示一个空对象指针，这也正是使用typeof操作符检测null值时会返回“object”的原因。如下：\n\nvar car=null；\nalert（typeof（car））；//\"object\"\n\n**Boolean**\n\n此种类型时js中使用最多的一种，有两个字面值：true、false。\n注意，这两种值和数字不是一回事，true不一定等于1，false也不一定等于0.\n\n虽然Boolean类型的字面值只有两个，但js中所有类型的值都有与这两个值等价的值，要将一个值转换为对应的Boolean值，可以调用转型函数Boolean(),如下：\n\nvar message=“hello world”；\nvar messageAsBoolean=Boolean(message)；\n\n**Number**\n\njs最受关注的数据类型，有如下字面量格式：\n    \nvar a=10；  //十进制\nvar a=070; //八进制，0开头\nvar a=0xA; //十六进制，0x开头\n\n其中，八进制字面量在严格模式下无效。\n\n在进行算术计算时，所有八进制和十六进制表示的数值最终将被转换成十进制数值。\n\n数值型有几点需要清楚：\n\n1、浮点数\n\nvar a=1.1;\nvar a=.1; //有效，但不推荐\n\n由于保存浮点数值需要的内存空间是保存整数值的两倍，因此js会不失时机的将浮点数值转换为整数值，显然，如果小数点后面没有跟任何数字，就可以作为整数保存，另外，如果浮点数本身表示的就是一个整数，如1.0，则该值也会被转换为整数。\n\n对于那些极大或极小的数值，可以用e表示法（科学计数法）表示的浮点数值表示，用e表示的数值等于e前面的数值乘以10的指数次幂。下面是个例子：\n\nvar floatNum=3.125e7;  //等于31250000\n\n同理，也可以用它表示极小的值。\n\n浮点数的最高精度是17位小数，但在算术计算时，其准度远不如整数，例如：0.1+0.2结果不是0.3，而是0.30000...4，这个小小的舍入误差会导致无法测试特定的浮点数值。\n例如：\n\nif（a+b==0.3）{\n    alert（“you got 0.3.”）；\n    }   //不要做这样的测试\n\n如果a和b是0.05和0.25，或0.15和0.15，都不会有问题，如果是0.1和0.2，那么测试无法通过。所以，不要测试某个特定的浮点数值。\n\n2、数值范围\n\n由于内存的限制，js并不能保存世界上所有的数值，js能够表示的最小数值保存在Number.MIN_VALUE中，最大数值保存在Number.MAX_VALUE中。如果某次计算的值超出了这个范围，那么它将自动转换成特殊的Infinity值（正、负无穷）。想判断一个数值是否超出范围，可以使用isFinite()函数，这个函数的参数位于最大和最小数值之间时会返回true。\n尽管计算时很少出现超出范围的情况，但在执行极小和极大计算时，检测监控这些值是可能的，也是必需的。\n\n3、NaN\n\n这个数值用于表示一个本来要返回数值的操作数未返回数值的情况，这样也不会抛出错误了。\nNaN本身有两个特点：\n\n- 任何涉NaN的操作都会返回NaN\n- NaN不等于任何值，包括其自身\n\n针对这两个特点，js定义了isNaN()函数，这个函数接受一个参数，该参数可以是任何类型，函数会帮我们确定这个参数是否“不是数值”，它在接收到一个值之后，会尝试将这个值转换为数值，某些不是数值的值会直接转换为数值，例如“10”或布尔值，任何不能转换为数值的值都会导致这个函数返回true。\n\n4、数值转换\n\n3个函数可以把非数值转换为数值，Number()、parseInt()、parseFloat().\n其中Number()适用任何数据类型，另两个函数专用于把字符串转换成数值。\n3个函数对于同样的输入会有返回不同的结果。\n\n**Number()**函数的转换规则如下\n\n* Boolean值，true和false被转换为1和0\n\n* 数字值，简单的传入和返回\n* null，返回0\n* undefined，返回NaN\n\n如果是字符串，遵循下列规则：\n\n- 若只包含数字（包括前面有正负号），则将其转化为十进制数字，放在前面的0会被忽略\n- 若包含浮点形式，如1.2，转换成对应的浮点数值，同忽略前导0\n- 若包含十六进制，将其转化为相同大小的十进制整数值\n- 若为空，转换为0\n- 若包含上述格式之外的字符，转换为NaN\n如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值，若结果是NaN，则调用toString()方法，然后再次依照前面规则转换返回的字符串值。\n\n可以归结为一句话：“内容是数值格式的，依然转换为数值，忽略前导0，非十进制转换为等值十进制，若包含非数值格式内容，则为NaN”。若是对象，则处理其返回值，处理方式按照数值型或字符串型。\n\n由于Number()函数转换字符串时比较复杂且不够合理，因此在处理整数的时候更常用的是parseInt()函数，parseInt()更多的是看其是否符合数值模式，会忽略字符串前面的空格，直到找到一个非空字符，如果第一个字符不是数字字符或负号，它就会返回NaN，也就是说，用parseInt()转换空字符串会返回NaN（Number()会返回0），如果第一个字符是数字字符，parseInt()会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符，例如：**“1234blue”会被转换为1234，因为“blue”会被完全忽略，类似的，“22.5”会被转换为22，小数点也不是有效字符。**如果字符串中第一个字符是数字字符，parseInt()也能识别出各种整数格式，即十进制、八进制、十六进制等.\n\n注：由于不同版本会出现不同情况处理，可以为parseInt()提供第二个参数：转换时使用的基数（进制），如：\n\nvar num=parseInt(\"0xAF\",16);\n\n实际上,如果制定了16作为第二个参数，字符串可以不带前面的\"0x\",比如：\n    \nvar num=parseInt(\"AF\",16);\n\n与上等效。\n\n另外要指出的是，不只是格式符合的才能指定相应的基数，例如：\n\nvar num1=parseInt(\"10\",2);   //2\nvar num1=parseInt(\"10\",8);   //8\nvar num1=parseInt(\"10\",10);  //10\nvar num1=parseInt(\"10\",16);  //16\n\n不指定基数意味着让parseInt()决定如何解析输入的字符串，因此为了避免错误的解析，建议使用时都指定基数。大多数情况下，我们要解析的都是十进制数。\n\n与parseInt()函数类似，parseFloat()也是从第一个字符（位置0）开始解析每个字符，也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止，也就是说，第一个小数点有效，第二个无效。比如：“22.34.5”被转换为22.34.除了第一个小数点有效之外，parseInt()与parseFloat()的第二个区别在于后者始终都会忽略前导的0，parseFloat()可以识别前面讨论过的所有浮点数值格式，包括十进制整数格式，但十六进制始终被转换成0，由于parseFloat()只解析十进制，因此它没有第二个参数指定基数的用法，最后还要注意，如果字符串包含的是一个可解析为整数的数（没有小数点，或者小数点后都是0），parseFloat()会返回整数。这一切看起来都很合理，是的~\n\n**String类型**\n\nString类型用于表示由零或16位Unicode字符组成的字符序列，即字符串。\n以下两种写法都有效：\n\nvar a=\"idea\";\nvar a='idea';\n\n1、字符字面量\n\nString数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符或者其他用途的字符,如：\\n（换行）、\\t（制表）、\\b（空格）等。\n\n2、字符串的特点\n\nES中的字符串是不可变的，，一旦创建，值就不能改变，要改某个变量保存的字符串，首先销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量。\n\n3、转换为字符串\n\n要把一个值转换为字符串有两种方式。\n\n第一种是几乎每个值都有的toString()方法\n\nvar age=11;\nvar ageAsString=age.toString();   //字符串“11”\n\n多数情况下，调用toString()不需要传递参数，，但是在调用数值的toString()方法时，可以传递一个参数：输出数值的基数，默认情况下，是以十进制格式，可以通过传递基数，toString()可以输出以二进制、八进制、十六进制，乃至其他任意有效进制格式表示的字符串值。\n\nvar num=10;\nalert(num.toString());//\"10\"\nalert(num.toString(2)); //\"1010\"\n\t\n在不知道要转换的值是不是null和undefined的情况下，还可以使用转型函数String)(),这个函数能够将任何类型的值转换为字符串，遵循下列转换规则。\n\n* 如果值有toString()方法，则调用该方法并返回相应的结果；\n* 如果值是null，返回“null”；\n* 如果值是undefined，则返回“undefined”。\n\n**Object类型**\n\nES中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型的名称来创建，而创建Object类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下：\n\nvar o=new Object();\n\t\n语法与java中创建对象的语法相似，但在ES中，如果不给构造函数传递参数，则可以省略后面的那一对圆括号。但一般不建议这么做。\n\n仅仅创建Object的实例并没有什么用处，但关键是要理解一个重要的思想，即在ES中，Object类型是所有它的实例的基础。换句话说，Object类型所具有的任何属性和方法也同样存在于更具体的对象中。\n\nObject的每个实例都具有下列属性和方法：\n\n* constructor:保存着用于创建当前对象和函数。\n* hasOwnProperty:用于检查给定的属性当前对象实例中是否存在，其中，作为参数的属性名必须以字符串形式指定\n* isPrototypeOf:用于检查传入的对象是否是传入对象的原型\n* propertyIsEnumberable:用于检查给定的属性是否能够使用for-in语句来枚举，与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。\n* toLocaleString():返回对象的字符串表示\n* valueOf():返回对象的字符串、数值或布尔值表示，通常与toString()方法的返回值相同\n\n由于ES中的Object是所有对象的基础，因此所有对象都具有这些基本的属性和方法。\n\n\njs的基本概念众多，如果都放在一篇文里来罗列，显得太过冗长，也不易对内容做适当的展开，这里就先记录一部分，剩下的还有语句和函数等大牌，下篇文再把它们请出来~\n\n一起加油，下次见~\n\n\n\n\n\n\n","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"我的文字情结","url":"/2016/02/28/my-love-with-words/","content":"\n## 写在前面\n\n我常在个人介绍里这样写，爱好：读书、写作。\n\n每次路过书店或者图书馆，都会有种莫名的兴奋，就像女人看到漂亮的衣服或包一样。\n\n我偶尔会被人说，话真多，其实认识我的人都知道我是个特老实的人。那为什么有时候会话多？因为我不说话的时候都是在思考啊，你看人家爱因斯坦，话比我还少，于是...好我知道这个比喻不恰当，stop~\n\n如果放在心里不说出来，那么还有一种方式，就是写出来，所以，就和文字有了联系。\n\n\n从小我不是语文特出众的那类人，但可能是遗传了老爸的某些特质，对事物的体会比较细致。再加上我一贯的认真，就会对字比较讲究，进而发展到句，到文，也喜欢看语言类节目，访谈、综艺、相声等。印象中考试没得过满分，甚至经常在考试的时候面对着那些“命题”作文无从下笔，但这不影响我喜欢它，我只需要在我想写、想表达的时候，能用我自己喜欢的方式表达出来，足矣。\n\n## 趣闻轶事\n\n说到写文，有不少让我印象深刻的趣事，咱来说几件：\n\n很小的时候，我还不认识那么多字，有一次在书上看到“鲁迅”先生，不认识，就直接读了出来，结果读成了“白五”先生，至于为什么，不要问我，我也不知道，他们从小笑到大，可是我怎么都想不起来自己干过这事儿...\n\n小学的时候，有一次，我和姐姐在围着一个桌子写语文作业，然后爸开始对我们的语文水平做评价，做比较。说着说着，老爸就表扬我，我姐当然不高兴，恰巧正在织毛衣的妈妈一不小心把线球从手中滑落，滚到了旁边的衣柜底下，我反应稍快，也是男孩子，就马上趴到地上把手伸进去拿了出来。就这都被爸给逮到机会，说：你们俩就刚才这个举动，写个小作文出来给我看看，就知道谁写得好了。这一说我俩都有些意外，也有些犯难，但谁会服气呢，就抡起笔开写了。写完之后，结果那当然是，嘿嘿，我写得又多又好，美滋滋。不过后来情况有了变化，我有几年状态不好，学习也不是很专心，就没我姐写得好了，哈哈。\n\n初中的时候，写作文是常事，每次作文被批改出来，优秀作文都会被语文老师挑出来在全班同学面前读，我，几乎从来没有获得过这样的机会，不管自认为写得多好，我都怀疑老师的审美了~但是有几个班里的学霸却是每次都有，我就纳了闷，后来，我做了小聪明，从《时文选粹》上面找了一篇觉得挺合适的，摘抄，然后跟自己写的相搭配，组合成了一篇文，结果，还真是被评为优秀作文，被语文老师拿出来读了，更具讽刺意味的是，他恰巧读到我摘抄结束的那句话，下面内容给的评价是“写得就不怎么样了”，然后就不读了，我只有“呵呵”。\n另外，当年优秀作文都有个共同点，每一篇都会跑到古罗马或埃及金字塔或者其他什么遥远的地方，不管作文题目是啥，你都会“不明觉厉”~\n\n高一的时候，刚去大家都不熟，班里开班会，要请每个宿舍出个节目，到了某宿舍的时候，有个长相清秀的男生被起哄推到了台上，手里拿着一张纸，我们在猜他会表演什么节目，结果他说，我给大家朗诵首诗，顿觉挺没劲的，他紧接着说，是我自己写的。我当时就：神马？！这我可就坐不住了，我怎能忍有人在我面前如此出风头，还是诗。但我也是真的拿他没办法，不过呢，以诗会友也是可以的，于是，我正儿八经写了第一首诗，找到他帮我看看，他看完之后说，写得不错，呵呵。从那以后，就掀开我写作之旅的篇章，后面再谈。\n\n高二的时候，有一次作文题目下来，没有头绪，但又想把它写好，怎么办呢，我把自己关在昏暗的出租屋内，说难听点叫“胡思乱想”，好听点叫“天马行空”。想着想着，自己平时喜欢听的歌曲，里面的歌词是不是可以拿来用？我想到了tank的《三国恋》，还有胡彦斌的《皇帝》，可是要怎么结合呢，最后我构思出了一个古代军营的场景，站在小士兵的角度去表达他们心里的情感吧。一边写一边想，一篇文最终出来了，还挺满意，作文批改下来，令我没想到的是居然拿了56分的高分（满分60），我可从来没有得过接近50分的分数，从那以后，我知道了，只要你老老实实，平平淡淡的写，高分就不用想了，你记住了吗~\n\n大学的时候，有各种协会和社团，我喜欢音乐和运动，分别报了，当然，投入最多的是偶然得知的“读书会”，“读书会”每学期会举办一次主题写作比赛，刚去第一年，作为会内人员，我参加了，重要的是，我也参加了文章初选的评审...评审过程中，在众多的文章中看到了我自己的文章，我当然不会评自己的，就放了回去，后来有人拿到了我的文章在那里看，刚去都不熟，他们还不认识我，就评论了起来，我当时就在旁边听着，听得脸都发烫，后来被淘汰了...其实在那种环境下，那么快的审稿速度，也不指望能评上，写得比较细，匆匆忙忙看完的话我自己都不会看出什么。\n不过第一次虽然被淘汰了，还有第二次，这一次，我已然成为了读书会的副会长，写的时候，是诗文相搭配，评审的时候同样在现场参与，虽然他们认识我了，不过，还是给予了客观的评价，最后，得了一等奖，嗯哼~哈哈\n\n好了，几段小故事先到这里，下面聊点别的。\n\n## 喜欢的作家\n\n说喜欢写，那当然得先喜欢读，不然成了“无源之水、无本之木”，要说喜欢哪个作家，读过多少名著，还真没有，能说出来的屈指可数，三毛、贾平凹、余秋雨、韩寒、郭敬明、路遥、琼瑶、张小娴，好吧先说这么多，饶了我吧，一时真说不出太多，《韩寒文集》读过一本，路遥的《人生》读过，中学时代的武侠小说咱就不说了。所以，完整读过得真极少，所以，还是很愧对于“爱读书”的说辞。不过像《读者》、《青年文摘》、《萌芽》什么的倒是读了不少，算吗~\n\n## 喜欢的媒体人\n\n这里说媒体人，范围稍微有点大，不如说是电视主持人，个人最为欣赏的是白岩松，正气，才气，睿智，视角独特，思维敏捷，有同行对其评价，一件事情你可能从三个方面去看待和解读，他能从七八个角度去剖析。一直很钦佩，当然，除了他，还有比较优秀的，譬如，杨澜、鲁豫等。那这些跟文字有什么关系呢？其实是有，人看待事物，有感性和理性，那么文字，可以归为感性一类，不论是电视节目的剧本，旁白，广告词，歌词，无不对文字有着高要求，必须是反复斟酌而出的精华，不多不少刚刚好，并且充满美感和感染力。\n\n他们也都出过书，读过白岩松的《痛并快乐着》、《幸福了吗》，朱军的《我的零点时刻》，近两天刚买了他的新书《白说》和杨澜的《一问一世界》，准备再接受一些熏陶。\n\n## 曾经的冲动\n\n既然喜欢读，喜欢写，除了参加校园里的比赛，我真的认真考虑过要投稿，给《读者》、给《流行歌曲》，给某忘了名字的小书，除了是对自身写作水平的肯定，还能赚点稿费，但是，有的是投了之后石沉大海，有的是准备好了稿子兴匆匆的跑去寄，打电话被告知栏目已经停了，淡淡的忧伤。直到现在，还是没有实现过这么个愿望，不知以后有没有机会了~\n\n## 我的作品集\n\n我有作品集吗？有，哪儿呢？我也不知道放哪儿了。或许QQ空间里还有残留，前面提到是高中时候掀开的写作篇章，也想投过稿，都出自我的作品集，几个很普通的笔记本，写了些什么呢？我的个人经历，初中的时候开始离开家，辗转过几处求学，接触过很多人，发生过很多事，再加上假期的时候在老家的经历，够写了，除了这些，我喜欢音乐嘛，被同学刺激了之后，开始写诗，也写歌词，其实二者的区分也没那么明显，正所谓诗歌。\n\n写得虽然多，自认为写得好的不多，好文章，不需要你有多博学，多有墨水，但有一点必要的，就是人们常说的“灵感”，灵感其实是什么？看似突然冒出来的想法，却是一个量变到质变的过程，不论是思维还是情感，足够饱满的内容，丰沛的感情，达到了某个点，然后再加上一点点文字上的斟酌组织，就ok。虽然说得简单，这几个条件同时具备很难。所以现在我很少动笔了，没有足够的积累和刺激，写不出让自己满意的作品，不如不写。\n\n## 写在最后\n\n絮叨了这么多，是为什么呢？有感于现在自己挺难静下心去读一本书，想写点什么，也写不出来，脑子里没料，就想问题出在哪，顺便回顾一下自己和文字之间微妙的情感和曾经的经历。希望自己能把心沉下来，踏实些，读点书，做回安静的美男子，哈哈。下次作品见~\n\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"征服javascript学习笔记（一）——认识js","url":"/2016/02/25/javascript-study-one/","content":"\n作为一名专注并且热爱前端(也好意思说)的“伪前端”，js一直是我心中的痛，说完全不懂吧，也知道点，能写简单的东西，也用过jquery写交互和逻辑以及一些简单动画，说懂吧，不算，随便一个问题都能难倒我，但我不甘如此啊，于是乎，既然新的一年要做出一些实实在在的事情，那么没有什么比把它搞定更实在的了。故而，我会在学习的过程中，把一些笔记、心得，在这里记录下来，起名“征服javascript”，以便自己查看，或者也会对某些看到的朋友有帮助。既然是学习的过程，完整性和准确性就不敢打包票了，所以，如果您发现了什么问题也是正常的。欢迎交流。好了，不废话了，正题：\n\n要学一样东西，首先得有一个大概的认识。\n\n对于js，最直观的认识，莫过于，当我们用html搭好了网站的骨架、用css美化了它，然后呢？似乎还缺少什么，对的，js最初的产生，就是用来控制浏览器和给网页添加活力和交互性的。至于java和长得很像的javascript这哥俩的关系，相信大伙都听过雷峰塔的段子，就不啰嗦了。\n\n## javascript可以做什么？\n\n我们可以想象一下，如果没有它，做不了什么，那么就知道它可以做什么了。\n\n交互性，比如对于鼠标的悬停和点击给予一定的响应和反馈，操作页面中的元素；表单验证；控制浏览器窗口；利用自身的日期和时间特性，生成时钟、日历等；设置cookie；即时构建页面或者创建基于web的应用程序等。\n\n## 说到javascript时，我们经常谈什么\n\n一个完整的js实现，包括：\n\n**核心(ECMAScript)、DOM、BOM**\n\n### ECMAScript\n\n我们常见的web浏览器是ECMAScript实现的宿主环境之一，为什么说之一呢，因为这个，曾让很多人觉得，它只能在浏览器里工作，还有其他的宿主环境比如node（一种服务端js平台）和Adobe Flash。\n\n它规定了这门语言的下列组成部分：\n\n**语法、类型、语句、关键字、保留字、操作符、对象**\n\n### DOM\n\n不得不说的DOM，提供访问和操作网页内容的方法和接口。\n\n当然不只是因为js，很多人印象比较深的可能就是操作DOM，增删查之类的。其实不是，DOM是文档对象模型的英文缩写，跟js没关系，每个网页都有它的DOM结构，也有说法叫DOM树，树上的每个对象可以称为“节点”（node），可以使用js对其进行修改。如果节点包含html标签，称为“元素节点”，否则是文本节点。当然可以推出，元素节点可能包含文本节点。\n\n### BOM\n\n浏览器对象模型，它是处理浏览器窗口和框架，人们也习惯把所有针对浏览器的javascript扩展算作BOM的一部分，比如：\n\n* 弹出新浏览器窗口\n* 移动、缩放、关闭浏览器窗口\n* 提供浏览器详细信息的navigator对象\n* 提供浏览器所加载页面详细信息的location对象\n* 提供用户显示器分辨率信息的screen对象\n* cookie等\n\n### 语句\n\n即我们通常见到的条件判断语句、循环语句，label语句，with语句等，用来执行一些符合某种逻辑的操作\n\n### 对象\n\n有人说它是面向对象，有人说那样不严格，应该是基于对象。不管哪种说法，我觉得，对于初学者都没什么影响的，因为，都不知道在说什么...\n\n在说对象的时候，都喜欢拿猫、狗什么的打比方，来解释什么是属性，什么是方法。比如它们有耳朵、鼻子、眼睛等等，这些是属性，会跑、会叫，这些是方法，能够控制这些，就能指挥它做很多事，那，这些跟写程序有什么关联呢？\n\n貌似不知所云，其实不是，我们会获取一个东西，会对它进行操作，会对数据进行处理，这些都可以看做是对象。\n\n**属性**\n\n比如，如果一个对象是文档，那么它会有标题；一个对象是表单，它可能有文本输入框、单选框等。改变对象的属性就修改了对象本身，相同的属性名可以用于不同的对象，比如，猫有耳朵，狗也有耳朵，人也有耳朵。另外，有些属性本身也可以是对象，对象可以有子对象。\n\n**方法**\n\n对象可以做的事情，称之为“方法”。\n\n比如，猫会叫，链接、按钮可以点击click()、窗口可以打开open()等。\n\n简单来说，可以把“对象”、“属性”看做名词，方法是“动词”。\n\n对象、属性、方法组合，组合可以更好的描述对象或过程，比如\n\n对象和属性   car.wheel\n\n对象和方法   car.run()\n\n以上写法称为“点号语法”\n\n\n### 事件\n\n之前就说过，js是用来处理“行为”和“数据”的，既然有行为，肯定要发生什么，称为“事件”。\njs里面有很多的事件处理程序，当用户在网页上进行相应的操作，就会触发它。比如，很常见的“onclick、onload”等，那么是不是所有用户的行为都需要去响应呢，也不是，你需要关心的是哪些事件是你的需求，能有比较好的体验或者应该响应。\n\n\n### 值和变量\n\n值：在js中，一段信息就是一个值，比如我们熟悉的“数字、字符串”等。当然还有别的，后续详细记录。\n变量：是用来存储值的，学过编程的都知道，都喜欢用一个盒子或一个房子来做比喻，道理都一样。可存，可取，可操作\n\n提示：变量名区分大小写，不能包含空格和其他标点，不能以数字开头，不能是js的保留字。\n\n### 操作符\n\n简单说来，就是“+、—、*、/”等，当然，还有++、--此类。\n需要注意的是，数字和字符串相加，结果是字符串，这个也是有规律可循，后面遇到再详述。\n\n### 赋值和比较\n\n赋值：将一个值放入到一个变量，就是赋值，使用赋值操作符完成，例如：myName=\"idea\";\n\n除了=，还有“+=、-=、*=、/=、%=”等。\n\n比较：两个值或者变量可以进行比较，操作符有“==、===、！=、>=”等这些。\n\n\n上面基本列出了我们说起js时会说到的东西。仅对js进行了一下概览，以后的文章里会对其进行逐个详述。\n\n\n## 小结\n\njs是一种专为与网页交互而设计的脚本语言，它为网页开发人员提供了操控网页元素和响应用户行为的方法。最近两年，由于各种框架和node、react等的流行，它似乎变得更加强大，有更大的想象空间和应用场景。\n\n然而，或许因为它的强大，让很多人觉得，掌握了它就很厉害或者它很难学，其实大可不必，戒除浮躁，踏踏实实，一步一个脚印，相信要不了多久就能有不错的进步。\n\n这是我们的第一步，后续会深入学习。一起加油吧！~\n\n\n\n\n\n\n","tags":["javascript"],"categories":["javascript学习笔记"]},{"title":"新年伊始，我都做了些什么","url":"/2016/02/24/new-year-first-do/","content":"\n## 新气象\n\n**新年新气象，博客搬新家**\n\n早就想把博客放在github上，里面的东西都是自己的，可以自定义，没有多余的内容，那才叫自己的博客嘛~但一直没能如愿......首先是懒，然后是力不从心，最近想趁着新年的开端重新搞一下，不向困难妥协，在同事的帮助和自己的摸索之下，最终完成了。\n\n那么接下来，这么漂亮的博客不能浪费了，这就开始节后的第一篇博文。\n\n## 新起点\n\n关键词：**勇气**、**初心**、**行动**\n\n**有所追求是好事，苦乐酸甜是生活。**\n\n从去年年底就在想，我明年的目标是什么，需要怎么做才能达到目标？因为浑浑噩噩的过，时间是很容易过去，又一事无成，但说实话一直没想明白，后来就把它们具体化、量化，画了一张宏伟的脑图，具体到每个月，用多少天时间，完成什么任务，画着画着发现，怎么都是跟工作相关的，都是学技术，这可不行，然后列了几个生活、情感方面的计划，就这样规划完成了。然后，看着脑图，16年过完之后我会好牛逼啊！~\n\n但是大家都知道，计划赶不上变化，年底工作异常繁忙，一月份计划搁浅，二月份春节，一年到头难得空闲，想多陪陪家人，就这样，2016的一个半月的规划要往后延迟。\n\n随之而来有两个问题需要搞清楚：\n\n1、列出来新的规划，就可以有新的开始了吗？\n\n2、列出来的就能完成吗？\n\n显然一切都不会重新归零，以前做的事情还是要接着做，以前挖的坑还是要接着填。\n\n列出来的规划，不去具体的执行，它永远在那里躺着。\n\n所以，就有了文章开头的那三个关键字。\n\n咱一个个的说：\n\n### 勇气\n\n“**心理坎往往比事情本身更难跨越，世界上最遥远的距离，是‘意识’到‘行为’**”。\n\n这是我2月17号发的一条朋友圈，这个感想从何而来？我们可以想想平时有哪些事情，自己说了想去做，打算做，准备做，等两天会做，却一直放那里没做？事情本身可能并不难，而是你没有开始去做它，没有“逼”自己去做。\n\n\n### 初心\n\n转眼间来深近三年了，曾经的遥遥无期，随着年龄的增长仿佛都变得飞快。三年前，这座城市的一切都是陌生的，也是新鲜的，对于未来，没有去多想，因为没有想象的基石，一无所有，只为生存。三年后，不管中间经历了多少事，都已经逐渐的熟悉了这座曾无比向往的城市，工作和生活慢慢稳定了下来。从两方面来考量。\n\n**工作**\n\n我虽自诩“工作狂”，但比起一般的程序员来说真的不算，不论从技术广度和深度还是投入时间占比，打个比方，有人出去游玩还带着电脑工作，有人春节还每天在微博上更新着自己玩技术的成果，所以，差远了哈。那为什么我每次都把工作挂在嘴边，放在生活前面呢，因为我来到这里的目的就是工作，在工作稳定，足够我支撑生活且有节余之前，无暇顾及其他，现在好了很多，所以开始着手做些其他的事。\n\n2015，进入新的公司，适应了环境和工作任务，技术方面在缓慢的增长，岗位内快到了瓶颈期，岗位外预备挖掘中。\n\n2016，我要如何在工作方面保持初心？\n\n1、是否能做得比以前更高效、更优质\n2、还有哪些技术需要夯实基础、需要做一下重新的审视和归纳总结\n3、处于具体的部门和岗位，需要理解和明白的东西是什么，存在哪些不足\n\n整体稳中求进，向外拓展寻求新的突破和乐趣。\n\n**生活**\n\n到现在为止，来深搬过四次家，住过5个不同的地方，第一个是啥都没有；第二个入住公司宿舍；第三个自己出去租了个单间，买了个电脑桌；第四个是换工作的时候搬的，房子很小，装修也很简陋；第五个就是现在的了，原因是性价比高，离公司近，一室一厅，有一个房间是空着的，压抑久了就是这么任性~其他方面，买了个“好床”，新买了电脑桌，添置了个书柜，嗯，别的没了，热水器和洗衣机一直没买。（看吧，我说的做事需要勇气吧，哈哈）\n\n那么生活的初心又是什么？\n\n工作只是生活的一部分，显然，处在生活压力如此大的一线城市，很多人已经过反了，但我们还是要尽量不偏离正常的轨道。\n\n感情：依然单身..（此处省略一万字），今年会脱单，会脱单，会脱单..\n\n游玩：深圳好玩儿的地方已经去的差不多了，不过，今年应该会让父母再来玩儿一次\n\n正事：有时间尽量坚持健身；该添置两样新的家用电器了（上面提过）；学做几样自己爱吃的菜；开始学车了\n\n初心并不是你依然还停留在最初的位置和心态，这显然是不合理也不应该的，而是你需要不受外界无谓的干扰，来思考自己的从前和现在，明确自身目前的位置和接下来的重点，需要达成的目标。初心，更多的应该是保持最初的那种向前的势头。\n\n### 行动\n\n上面提到了勇气，那么需要勇气来干嘛呢？当然是付诸行动。\n\n“**我知道你没时间，上班时间忙成狗，下班时间懒成猪，所以，时间都去哪儿了？**”\n\n这是我2月20号发的一条朋友圈，感慨于平时我们总是说自己做什么事情没时间，然而想想我们的业余时间都用来干嘛了？睡觉？聊天吹水？发呆？看剧？打游戏？如果是这些，那就是在kill time，然后等到说某件事还没做的时候，我们就会说，哪有时间啊。\n\n我想说：**别懒，行动起来，就有时间了。**\n\n我鼓起勇气去做了哪些事情呢？下面列出清单\n\n1、自己的房间做了一次大扫荡，重新的整理，清洗\n2、网购了两本书\n3、年前尝试用的一款插件，总是失败，原因未搞明。 搞定\n4、之前一直知道PS CC版本可以快速的生成图片，可大大的提高切图效率，简单的尝试之后，没弄成，放弃了。 搞定+安装CSS3PS  搞定\n5、进一步提高编码效率，给自己的编辑器安装了“CodeFormatter”，\"Cssrem\"及一些代码模板插件，提升使用体验，安装了“Seti_UI”主题\n6、预约公司看牙\n7、使用hexo+github pages重建博客，之前拖了很久。 搞定\n8、报驾校学车\n\n暂列这么多，或许你会说，这都什么鸡毛蒜皮的事，还要写出来，还需要勇气？图样图森破\n\n那么，上面列出来的，有必须干的吗？有急事吗？答案是没有。我们对于可做可不做的事情，一般都会拖很久，其实，应该做的，有好处的，你做一件就会让自己更舒服，做一件就少一件，为什么不做？~\n\n接下来，还会鼓起勇气去做更多的事。\n\n做这些事情的过程中，有诸多的感悟，其中两个就是：\n\n一、不是因为你变得强大了，才能去做什么事，而是你在不断的努力尝试中，完成了一件又一件的事情，然后才会有很多新的收获，变得比以前更强大\n\n二、不要觉得自己没时间，你的时间很多都是被自己打发了，别懒，行动起来，就有时间了，做的事多了，烦恼就少了\n\n好了，新年第一篇就先这么告一段落吧，多说无益，实践是真理。\n\n下次见~","tags":["经历"],"categories":["经历"]},{"title":"梦幻般的2015，更丰盈的2016","url":"/2016/01/01/2015-summary/","content":"\n很多人都写了年终总结，我不是爱凑热闹的人，后来又想想：这是自己的事，跟凑热闹有什么关系。所以，为了记录一下自己的过去，让以后回看的时候，知道2015年的自己是这样过来的，就一边听着《my love》，一边小结一下。\n\n## 工作\n\n这两年是在外闯荡的两年，以至于有时候突然想起一件事的时候，快忘了是哪年干的，细想一下才知道，我想是缘于“变化”吧,从进入第一家公司的时候，就有着一个梦，说得俗一点：希望有一天能成为技术大牛，领导者，公司发展壮大，干大事，赚大钱。虽然，后来这个梦在那里搁浅，可这不影响我对它的感恩，接纳我，给我一个起点，事业和生活都是，以前写得文章里也曾多次提到，就不多说了哈。第一家公司待到11个月的时候，我按耐不住心中的躁动，在犹豫了几个星期，辗转反侧了几个晚上之后，我提出了离职，因为深思熟虑，也表明了态度，所以，老板没有做太多挽留。这是发生在14年6月份的事，然后我想找一份跟之前不一样内容的工作，能让自己做不同的事，得到更多提升，第一家公司给的薪水很低，在找第二份工作的时候，我的要求仍然不高，4、5K就好，我的目的不是赚钱，虽然我到现在都可能是朋友圈里最poor的人~我渴望成长，这是最重要的理由。到了第二家公司，情况比我想的稍微差一点，是个刚组成没多久的创业团队，14年搬到深圳，新的办公室在F518创意园，还在装修，所以，我和同事们在小区里的一个三室一厅办公一个月，那家公司的产品官网和我这辈子的第一个移动端站点，都是在那里完成的，想想也是够可以的，就我一个前端，也没人教我，什么叫逼上梁山~后来搬到新办公室，新的需求也在不断的来，公司官网，电影平台，这些对我来说都是不小的挑战，jquery就是在这个阶段取得了实质性的进步。遗憾的是，慢慢的，公司融资出现困难，资金链断掉了，员工陆续离职，我也是其中一个，这里，就到了14年11月，第二家公司只待了5个月。\n\n有不少朋友问我，怎么用一个词形容自己的2015，我觉得最合适的词就是“如梦如幻”，如题~为什么这么说，14年的年底，11月17号，是我开始一份新工作的日子，这是一份让我无比期待的工作，到腾讯CDC（用户体验与设计部），虽然只是外包，但那时我认为没什么区别，曾无数次想象过这个场景，公交上，地铁上，跟朋友聊天吹牛，在家里的电脑前，甚至，可能在大学宿舍里都想过，只是我预想是四到五年，没想到这么快就实现，去面试的时候都挺激动的，第一次跟心所向往的公司离得这么近。其实，进大公司是每个做技术的人都想的，我也不止想过到腾讯，百度、华为、京东，都有想过，现在看来，当然是不够理性的。来到CDC面试我的人是tommy和阿义，第一次周会的时候，见到了basecss和彪叔，这些以前只听过名字，看过博客的人，成了跟自己一个团队的人，而且这个团队号称“宇宙第一设计研发团队”，不由心生许多想法，虽然后来证明，只是一个涉世未深骚年的一点点躁动罢了，激不起半点涟漪~\n\n在CDC做了几个项目，大都是内部的...网站改版，和一些小的需求，很多到现在还没上线，比如行政门户，腾讯学院等。\n\n我真的也没想过在CDC只待了8个月，我曾经认为它就是我在深圳的终点，到了今年7月份的时候，之前认识的一个同在腾讯的朋友给我介绍一个机会，在理财通，也不是第一次有人给我介绍了，有财付通、互娱、sng，我大部分是婉拒的，因为觉得自己尚待成长，但这次我没有拒绝，我觉得总是这样自己闷着头做事，学习，不知道自己到了什么程度，也不知道还有哪些不足，还差多远，于是我决定试试，检验一下自己，就准备了一份简历给过去，接下来就是做面试题，又是从没做过的东西...虽然从没做过，但平时自己还是有了解和学习一点，花了不少的功夫，自我挑战了一把，事实证明，他们还是挺满意的，然后约我面试，因为面试题是合格的，所以一面很顺利，聊没一会儿就结束了，二面是鬼哥，这也是我第一次近距离接触鬼哥，之前是webrebuild和一次小的分享会，远远的注视，当然，没有太多其他想法，我是来面试的，每个问题都认真的回答。总共经历了5面，历时差不多一个月，阴差阳错的，又在17号这天入职了，是8月17号。\n\n来了之后，接受培训，适应了几天新环境和项目，就开工了。或许会有朋友还想问，你是怎么进去的？进去肯定很难吧？我会说：不断努力提升自己，勇敢尝试，尽人事，机会会给有准备的人，你准备好了，水到渠成，还怕什么？~（真没你想的那么难）\n\n2016的憧憬就是，自己的工作能更高质，更有效率的完成，在项目管理和时间管理方面更进一步。\n\n## 分享\n\n** 团队内分享 **：css那些事儿、css的乐趣\n\n** 文章 **：[前端家园](http://www.html-js.com/article/column/716)、[不听话的浏览器](http://www.html-js.com/article/column/896)\n\n** 醉牛前端 ** ：工作之余我一直在做一些事情，写文章，社区交流，QQ群交流，但总感觉哪里不够，于是就有了做一个让大家受益的事情的想法，就有了“醉牛前端”，更多细节，可以看我写的[醉牛前端诞生记](http://ideazhao.com/post/1d377a05_8228388),目的是为大家，不管是新人还是老手，提供一些便利，解决一些共有的痛点，2016，它会带给你更多惊喜。\n\n** 前端周末 **：除了“醉牛”，我还开了自己的微信公众号，叫“前端周末”，每周为大家发送好文干货，到现在已经发了40多篇，几百位订阅者，我会持续坚持的做下去，做得更好，希望能给大家带来更多实际的帮助。\n\n2016，会有更多好的分享带给大家，也是送给我自己，希望自己对技术的认识，更系统，更深入，层次也更高。\n\n## 会议\n\n深js、前端圈走进名企、OneApm、AC大会、webrebuild等\n\n![](2015-summary/1.jpg)\n\n以前是个爱参会的人，只要是讲前端话题，都想去，每次会议都有一大堆听不懂的东西，缘于自己js太菜，如果说作为一个人，不懂英语等于半个瞎子，那么作为前端，不懂js也等于半个瞎子了，当然，最严重的一次是深js，那么多老外，你懂的..顺便见到了hax、朴灵、尤雨溪、郭达峰、徐飞、鬼懿、情封、Toobug等以前没见过的大咖，据说sofish也去了，不过没看到，当然，还有很多去的没有提到，不过貌似跟我没啥关系，多么痛的领悟~\n\n说到痛，最痛的还是上海cssconf的爽约，很早就在期待和关注，提前两个月订好车票，出发当天告诉我车次因天气原因停运，我...就这样，放了大地鸽子，也错过了一次和CSS魔法、小志、U2等众高手见面的机会，当然，会议当天还是在全程关注的，很多精彩内容后来有通过别的途径补上。PS：下次一定去，一定去，一定去~\n\n基于以上描述，16年我会大幅缩减参会次数，同时恶补js，不做伪前端，耶~\n\n## 专访\n\n** 专访鬼哥 **\n\n进入鹅厂，每个小鲜肉都有一次达人专访的机会，也是要完成的任务，我稍加思索，就想到了鬼哥，这么好的机会干嘛要放过？~于是就联系了他，约了时间，准备了一堆问题，在一个明媚的上午，一间明亮的会议室，和一个靓丽的妹纸一起，采访了鬼哥，提了若干比较好奇的问题，都一一得到解答,最后合了个影~\n\n![](2015-summary/2.jpg)\n\n** 早读课专访 **\n\n是个偶然的机会，主要也是因为“醉牛前端”导航得到了一定的传播，然后，早读君——情封就跟我聊，说可以来一篇，写写“醉牛”的情怀，也写写你是怎么走上前端这条路，碰到问题和瓶颈是怎么处理和解决的，一开始我是拒绝的，哈哈，后来，好吧，既然看得起我，我就好好写，就有了那篇专访和专访下面一群好基友的捧场吆喝。\n\n至于2016年，应该不会有了吧，哈。\n\n## 读书\n\n说到读书，先说几本“免费”得到的书吧，《图解css3》，《web前端最佳实践》，这两本是写书评和参会感受得的，《微信力量》是活动抽奖得的，《写给大家看的设计书》是早读课评论集赞得的。它们有个共同点——都还没看完，哈哈。除了这几本，当然还有其他很多啦，买不到的就不说了，能买到的好书都有，今年没看多少，貌似只有《web全栈工程师的自我修养》看完了，为什么呢？作为一个同龄却比我厉害那么多的人，我一定要知道他的秘密~这也是我在15年做得不够的地方。16年，我会让自己更踏实，把心沉下来，回归初态，读一读它们，书放在那里多久都只是一叠纸，只有读了，哪怕只能吸收到一点，那也成为了自己的东西。\n\n## 生活和家人\n\n我姐去年春节的时候结婚了，我的小外甥女于12月2日降临，今年，也是她茁壮成长的一年，虽然相隔很远，也是时常看到她的靓照，关注着她的成长，十一的时候，回去还单独带了她两天，现在她已经是一岁多的小妮子啦~\n\n爸妈五一的时候来了深圳，去年就说来，我还以为说着玩儿，一方面是我还比较窘迫，来了住都挤得慌，还好后来慢慢改善了点，今年就真的来了，我请了几天假，陪他们“玩儿遍”了深圳的名景。看着他们高兴，我是更加的高兴。\n\n从上面一堆各种经历就可以看出，2015对我来说是梦幻般的一年，实现了一些看起来不实际的东西，这给了我信心，同时，也为我揭开了一些事物的神秘感，这种神秘感会让我们失去一些理性的东西，让我们判断和选择出现偏差。我时常反思和回归，以让自己的心一直在地上，一直在沿着最初的方向往前走，不要走偏，不要停止。\n\n\n最后，2016，愿大家都开开心心，健健康康，工作顺利，心想事成。\n\n\n\n\n\n\n\n\n\n\n","tags":["总结"],"categories":["总结"]},{"title":"自学者需要具备的基本技能和素质","url":"/2015/12/14/自学者需要具备的基本技能和素质/","content":"\n标题定为自学者，因为它是导火索，但文章不是一天建成的，写着写着它就“胖”了，老少皆宜了~哈。下面正文\n\n## 如饥似渴\n\n这听起来是一种行为表现，但这种行为恰恰表现出了强烈的学习欲望，有了这个作为基础，还有什么是积累不了，什么是接触不到的呢？都只是时间问题。简单用两个字形容就是：热爱。\n\n当然，不是每个人都很肯定的说，现在做的或者现在学的就是喜欢的，我问过很多朋友，要么是想不出来自己喜欢什么，要么是喜欢的太多了，不知道该干什么，索性就尚未做出选择，一直在徘徊、犹豫，然后显得做哪个都没有很强的激情和干劲儿。所以，这里就多啰嗦几句来说说我是怎么做的选择。\n\n我是个爱好挺多的人，稍微列出来几个：文字、音乐、运动。曾想成为作家，曾想学吉他、钢琴，还定下了30岁成为亚洲顶级歌手的目标，还曾想成为运动员（体操、乒乓球、短跑等）。可是，我并不能兼顾这所有，不是每个人都能像爱因斯坦、达芬奇、牛顿那样有着开挂的人生。然后怎么办呢？说直接一点，哪些东西作为谋生的职业，哪些作为平时的爱好偶尔为之或者关注，作为生活的调味剂。这个要分清，不是喜欢什么就全都要做出什么成就。\n\n我的选择标准是，结合喜欢的事情和自身具备的一些素质和天分，来进行判断。\n\n文字，我只是喜欢某些时候蹦出来些许灵感，然后很享受的挥洒出来，散文、杂文、诗歌、随笔等。用来表达情感，抒发感受，小小的感动一下自己，或者装一下文艺青年~\n\n音乐，我喜欢听好听的音乐，也喜欢哼唱，也表演过多次，但是，我不是一个很擅长唱歌的人，嗓子条件不算好，乐器都不会，对那些音准和五线谱什么的，也不感冒，然后，颜值也是硬伤（这个不谈~）\n\n运动员，我喜欢运动，很多，各种球，田径、体操、游泳等，有些是自己做，有些只是关注，所以，不如直接说我是喜欢运动之美，体操没条件练，俯卧撑、单双杠都玩儿过，运动能让自己保持健康，健美，饱满精神劲儿。and so what？同样没有什么好的天赋，跑、跳、身高、柔韧性…一个出类拔萃的都没有，那些有点天赋的都会练几年因为某种原因就放弃了，我就更不用说，所以…\n\n上面这几个，很显然，它们不具备被我选作职业的条件，我不会被迫去做一件不能有持续高质产出的事情，也不会做明知不擅长、不会有什么成绩的事。每个人这么多年了，这些基本的都能判断出来，所以，你找到自己所爱并适合作为职业的东西，应该也不难。主要的作为职业，其他的作为业余爱好，不仅能让人觉得你某方面比较强，很专业，而且还是个多才多艺能一起相互交流、开开玩笑吹吹牛皮的人，何乐而不为？~\n\n## 顺藤摸瓜\n\n何为藤，何为瓜？在这个互联网的时代，打开网页，到处是藤——link（链接），群里，社区站点里，通常由一个链接可以到一个资源集中营，你可能遇到别的文章，也可能找到更多的站点，或者把那篇文章所在的站点收藏起来，这些就是瓜。通过顺藤摸瓜，你能找到很多意向不到的好东西。不要小看这个能力，很多东西都是微妙的，说不定哪个瓜能给你带来启发，能让你重新认识一样事物，甚至让你结识到新朋友，这都是有可能的。\n\n## 农夫拾粪\n\n这个词，最开始是看有些书上面学霸介绍的学习积累的方法，特别是一些零碎的知识点、词汇，因为，它们就像是散落人间的精灵一样，需要我们悉心收集才能逐渐的丰富起来。走出校园，进入职场了也是一样，或许没人能给你讲课，也没人能专门抽出时间给你指导，但总会不经意间给你一些指点。我们在读文章或者看书的时候也一样，一篇文和一本书，能够让你觉得受用的东西可能是有限的，但那有限的一点，收起来，放到自己的储备库里，就是一笔小财富。农夫拾粪，意指，不带有太多挑剔的眼光，也不去无视小的不起眼的，但有用的东西，这样慢慢积累，就能汇集很多好东西到自己的仓库里。\n\n## 归纳整理\n\n说实话这个道理我读高中的时候就有了比较痛的领悟，为了复习，为了备考，我们必须买一些教材之外的，辅助复习和练习的资料，这种资料又是玲琅满目的，随便走进一家学校附近的书店，大的小的，薄的厚的，红的绿的，那个全面，这个系统，还有模拟、押题，我们不会个个都买回去看，精力和财力都不允许，那有没有一样东西或者一本书，能把所有想要的都整理到一起呢？有，那得自己写~开个玩笑。不存在，所以，怎么办呢？需要我们自己去“随时随地”的细心组织整理，管理，这样才有可能。\n\n或许有人要说了，这是你在上学的时候，学科知识，门类什么的太多了，大多也没有条件和时间上网，现在有什么不懂的，找度娘或者谷歌不就行了？ 是的，我觉得这个世界上，最伟大的“发明”之一就是搜索引擎，可是，如果我们每个人都给自己收集的东西做个搜索不太现实，但最起码我们可以做的是什么呢？——把它们归类整理，分类的过程，同时也是我们梳理自己知识结构，对它们重新认识和理解的机会，而且分类之后，我们就可以缩小每次找的范围，或者借助某些工具，也是可以搜索，这样利于收集也利于查找，方便又提高效率，同时我们主动整理的，结构更清晰的东西也便于自己的记忆，好处多多。\n\n**勤、勤、勤**\n\n**勤于实践**\n\n动手实践，是让自己印象最深刻，最快看到实际效果，也是最能直接发现问题的方式。大家一直说理论结合实践，看花容易，绣花难。没有实践，就没有最佳实践；没有碰到过问题的人，就没有解决问题的能力。实践的同时，我们会发现自己的诸多不足，然后去学习新的理论。最适合你的学习路线，其实就是这么来的，而不是在什么网站、文章里直接拿来给自己定规划。同时，实践不止是我们学习掌握一门技能的捷径，也是我们解决其他问题的上乘之法，行不行，对不对，好不好，在没有太多经验之前，just do it！~\n\n**勤于思考**\n\n实践是我们把理论转化成实际的第一步，我们能看到自己动手做一个东西是什么样了，但做得肯定不够好，勤于思考，犯过的错不再犯，所谓吃一堑长一智。不仅是技术，我们在成长过程中有很多一时的不妥的想法和做法，我们会做错事，会受挫，会被指责，会面临失败，然后我们会困惑，会否定自己的一些想法，进而对自己的做法加以改进，这些都是有益的。当然，思考不是答案，我们可能因为思考更加困惑，更加郁闷，思考是过程，在探寻的路上不断思考，总能慢慢的拨开迷雾。\n\n**勤于总结**\n\n有了实践，有了思考，做到这两点就已经能够让我们积累到很多经验。但是还不够，还缺少一个我们能够把它们集中在一起的地方，不仅外界的事物是零散的，我们存储在大脑或者代码里面的那些tips也是零散的，总结出来是我们对以前做过的项目，写过的代码，记住的知识，进行一次重新的认识和理解，在这个过程中，我们甚至能发现一些以前没有在意过的点，当它们逐渐清晰的时候，我们也能更清楚的看到相互之间的联系和区别，或许有新的顿悟和创造，就更上一层楼了。\n\n**记录分享**\n\n上面所说的，是从自身去看学习，那么分享是什么呢？从某种程度上来说，分享是相互的，我们向别人展示了自己的学习成果，让一部分人（可能比我们理解的深，掌握的更好）给我们指出不足，也能让另一部分人（刚接触或者还没接触）概览一下它是什么，能做什么，有什么诱人之处。助人为乐，同时，可能他有别的好东西也会告诉我们呢？正所谓，互相帮助，互为肩膀！\n\n**虚心、初心**\n\n我们常说不忘初心，你的初心是什么呢？我在把自己做的页面给非同行朋友看的时候，它们都会发出阵阵的惊叹：好神奇，好厉害！~\n\n对，他们的描述，就是我的初心，当然，不是说被夸厉害是初心~本身也不厉害。而是能做出美的、略显神奇的、好用的东西。这不仅仅是上司或者产品经理给我们的要求，也不只是给用户一个交代，更应该是我们对自己的要求。做技术的人不追求更好看，更好用，代码写得更科学，那不如不做咯~至于很多人是因为这行薪水比较可观，那怕是会少很多乐趣吧。这些年，科技进步速度非常快，设计的风格和潮流也在不断变化，技术迭代也快，大家在疲于追赶中，也有给自己打镇静剂，在不少场合都会提到“勿忘初心”，“我们真正追求的是什么”，“问题的本质是什么”，“我们需要做好的关键是什么”…有这些，说明大家在思考，去过滤一些东西，不去宽泛而盲目的追求，这是好事。\n\n虚心，则是需要一直保持一个对于所做的事情，所从事行业的敬畏之心，你要知道，它的存在或者发展的时间肯定比你从事它的时间要长很多，有无数的前辈们已经和正在为之铺路，也还有很多跟你一样或更优秀、更踏实的人在做出自己实实在在的贡献。然而你可能还没做什么，所以，不论是自己会了什么，在什么公司工作，被人冠以什么称号，拿多高薪水，这都不重要，都不要翘尾巴，对一些东西不以为然，比你厉害，比你低调，比你务实的人一直都存在，他们才是我们应该学习的榜样。\n\n## 总结\n\n好了，写了这么多，有两个原因：\n\n一个是我自己本身是这么来的，在跟很多朋友交流的时候，他们要么没想法，要么想法太多，不知道怎么选择，我自己来说找到方向的时间就挺晚的（当时已是一名高龄大四生~），但也算及时，所以想写这么一篇有点方法论性质的东西，提供一些参考。\n\n另外，有很多刚入行，刚接触前端的朋友，跟我当年一样，想学吗？想！怎么学呢，不知道，乱撞。我要怎么做呢？我要看什么书呢？我看这个网站学习可以吗？谁有**的视频可以给我推荐一下？等等。是的，历史总在不断重演，如果你也有这些问题，我这里就已经告诉你应该怎么做了，虽然看似有些虚，但它们是“渔”，而非“鱼”，相信我这么形容你就应该知道价值在哪儿了。\n\n扯到这儿吧，需要交流感情的迷茫骚年（nv）可以单独找我，编程的问题就算了，哈哈。下次见","tags":["思考"],"categories":["思考"]},{"title":"说说基本的布局观","url":"/2015/12/01/basic-layout/","content":"\n这个话题由我来说可能不是最合适的，论资历和认识，我不如那些征战多年的行业前辈们，但是我想做的事情，请别人花时间和精力来做，觉得不大合适，我也愿意写这么一篇文来分享一些关于网页布局最基本的东西。这篇文会有两个特点：\n\n一、不会有“深刻认识”、“揭秘”之类的出现，因为本来就没有；不会有很厉害或者通用的布局方案告诉大家，不是本文重点；也不会时不时把标准搬出来，只会直观的简要描述。\n\n二、会带有一定的故事情节，我相信前端们都有着相似的经历，沿着故事的发展路线，或许你会产生更多的共鸣。\n\n换句简单的话说就是：更适合初学者看~\n\n好了，言归正传。\n\n## 话题的来由\n\n我个人有个QQ群，为了保持一个比较好的交流环境，不让更多不相关的人进来，设置了一个问题：“回答至少两种布局方法”。这个问题虽不算十分具体，但也不笼统，靠边或者正确的答案大概有这几种：“div、table、css、流式布局、浮动、定位”。 那么问题来了，哪些是靠边，这得看对“方法”二字的理解。\n\n先来看几段故事吧。\n\n故事一：**大学课堂**\n\n老师对我们说：“表格，是一种很常见，很流行的布局方式，它的特点是能够很容易的把网页排版的整齐好看，另外，给你们推荐一款容易上手又好用的代码编辑器，dreamweaver8.”\n\n故事二：**小试牛刀**\n\n要毕业设计了，对网页制作很感兴趣，于是就选了一个看起来像是做网站的课题，拿到之后，凭着已经了解的一丁点的知识，开始构思，动手，一切貌似顺风顺水，当做到导航栏的时候，采用了ul（无序列表）的方式，但是遇到了第一个算得上“难题”的东西，列表是竖着排列的，我要的是横着的，这可怎么办，我就去群里问，没人回答，于是乎，想到了度娘，强大的网友一下就给出了答案——float，觉得自己知道了个秘密，这时候我一个经常请教的前辈告诉我，谁跟你说排成一行就要用float，span也行啊！我有点不忿，更不解，span是什么？\n\n故事三：**div+css**\n\n你可以到任意一家电商网站，搜索“div”，肯定能搜到“div+css网页布局**”之类的书，div是什么，有什么用？这是我早期曾在一些技术群里问过的问题，得到的答案已经记不清了，应该是没能解答我的疑惑，为什么没有呢？下面详述。\n\n故事四：**初入职场**\n\n初入社会，好不容易有个面试的机会，是在线的形式，面试官问了我几个问题，其中一个是，怎样让元素居中？我犹豫了一会儿，回他：align=“center；”然后他说，算有点基础，不过需要培训一下。\n\n故事五：**一次专访**\n\n有一次面试，面试官问我，怎样看待网页重构。我的答案就不说了，后来有一次自主联系访谈本公司职员的机会，我怎会轻易放过~于是我约了他，准备了一堆的问题，也把这个问题问了回去。他的答案提取出一部分就是：html之于网页，就像是身体躯干之于人，起到一个整体结构和骨架的作用，css之于网页，像是人的衣着打扮。\n\n以上几段，都是真实经历的浓缩。下面会有对应诠释。\n\n故事告诉我们\n\n对应以上几个故事，有这几方面\n\n**第一个故事**\n\n很直观的有两点表现，网页结构主要用table，编程工具使用dreamweaver。这种现象可能你并不陌生，这表明什么呢？\n\n前端技术（书籍）的引进和推广有所延迟\n\n前端，甚至是网站建设的学校教育重视程度不够\n\n从事相关教育的从业者有部分不在一线，专业度较低、知识更新速度较慢\n\n很多人最开始写网页代码用的是dreamweaver **，采用table为网页结构的主力军，预览效果和调试是用360浏览器（直接在DW里看的就不说了），这些都是存在的对吧？也不能说它不对或者不好，有一定的历史原因在里面，css诞生，web标准的诞生和引进以及chrome、firefox这些浏览器的出现和推广使用，都是影响因素。不能去评判它的对与错，但他们给初学者对于书写代码的习惯、方法，工具的选择等造成的不利影响是客观事实。\n\n不过庆幸的是，前端职位在近几年移动互联网浪潮之下的持续火爆，更多的人进入了前端行列，更多的教育组织、机构的出现，更多学习资源，更多f2er的努力，一切都在变得更好。\n\n**第二个故事**\n\n我们学习一项技术，总会有马上就动手试试的冲动，一个简单的东西，都会产生一种成就感，特别是像网页这种，可视化很强，于此同时就会有个问题，我们最初了解到的知识都是片面的，就很容易遇到各种大大小小的问题，然后会急于找到解决方案，寻求这个方案的过程呢，既不会考虑全面性，也不会深挖，也没有能力衡量优劣，甚至会把遇到的一个看起来可行的方案当做唯一正确的方案。我当时的疑问点恰在于此，纯粹是因为基础薄弱，最基本的“块元素”和“行内元素”都没了解清楚，所以，很多基础的，简单的东西，都是可以通过自己踏实、系统的学习去解开。\n\n**第三个故事**\n\ndiv+css，广为诟病的一种说法，很多书籍以它命名，很多招聘信息也是这么写的，我们知道可能是偷懒或者其他原因，至少作为当时的我对它的印象是：div也是一门技术，具有很多的知识点，或者具备某些功能，因为它俩是并列关系呀。读这篇文时你应该知道了，这种认识有点可笑。 这是在推广使用css技术，推广“结构和表现分离”思想之后一段时间内所兴起的浪潮，影响至今，虽然很多人不会再有像我当时那样的误解，但在鼓励使用语义化标签和推广HTML5新标准的今天，仍然有不少人在滥用着div标签。\n\n**第四个故事**\n\n当时的我，是已经完成了毕业设计，自认为至少具备了基本的网页制作能力。可是对居中的认知还停留在align=“center”这种写法，不知道分离，更是对现在一些丰富的居中方法一无所知。真的是纯正的菜鸟，这应该是多数前端人会走的过程吧。\n\n**第五个故事**\n\n算是对“结构表现分离”思想的一种解释。其实这里不是在弱化结构强调表现，真正写得好的结构，是不需要写什么样式也不会让读者觉得别扭的，就像是一种说法：看一个人html写得好还是不好，直接把样式去掉看就知道了~当然，也涉及到语义化的运用，格式和注释等，这里不详说。\n\n以上的故事，以及它们所表达的东西，就是一个对网页制作认知的进化过程，也为了不那么突兀的就直接进入下面的内容。\n\n## 那什么是布局\n\n不管是初学者还是老手，都知道网页是由大大小小的容器组成，或者称之为元素，这里有个点，初学者还可能会弄混的两个概念是“元素”和“标签”，拿段落来举例，段落是一种元素类型，用来表示或者包裹这个元素内容的是什么呢？是<p></p>当然，我们提及它的时候不会这么写，会直接说P标签。所以，你可能会说P元素或者P标签，在提及二者的时候，知道它们不等同就好。\n\n网页本身是个二维的平面空间，有了各种元素的堆砌之后，怎么在网页里摆放它们的位置？ 首先每种元素都有其“自带”的表现特性，这个“自带”，来自于浏览器（由于不同浏览器对其的标准不一，就有了后来的reset，这里不细说，想了解更多可以到关于reset那些事儿系列了解)，是否占满一行，是否有边距，是否有特定格式和大小等。如果只是把元素赤裸裸的丢到网页当中去，它也会有一个样子，只不过没那么美观（可以去看看CSS魔法的博客，已裸奔多年~），这也能算是一种简陋的布局，所以，我对“div、table”这类的答案视之为沾边，但不准确，因为它们主要充当了包裹网页内容的容器这么个角色，是css得以施展的载体，参与了网页制作的一环，本身并没有很强的布局能力。\n\n**广义的“盒”**\n\n很多教程会把“盒模型”给单独列出来，当年我在学那些教程的时候一直好奇\"盒模型\"是个什么？这跟网页制作怎么扯上关系的，后来知道了之后曾奇怪为什么起那么个名字~虽然形象，但觉得并不是很助于第一印象的理解。 先来看普遍意义上的盒： \n\n![](basic-layout/1.jpg)\n\n我给定义一个广义的“盒”，是因为，随着技术的发展进步，和网页设计的创意无限，元素的排列不再那么规矩，形状也不会那么规则，视觉效果更丰富，我们已经越来越多的需要用到一些技巧和新的属性。 罗列下来大致有width、height、padding、margin、border、outline、box-shadow、background、:after/:before、transform、box-sizing等，至于利用canvas、svg等做出的更加匪夷所思效果的，另当别论。\n\n## 布局家族\n\n说了半天，终于要扯到正题上来，网页就是由各种容器按照一定的秩序进行摆放，那么不管是作用于它本身，还是外部兄弟元素、父子元素之间位置的，都算，哪些呢？ 先看元素本身，我们知道大致分为“块级”和“行内”，这是两种基本形态——“占据整行”和“可在同一行并排放”，差不多够了，那么为什么需要float，它不是用来实现“块级元素横着放”的吗？很多人喜欢的用法，这就要说最初的设计意图——“图文混排的文字环绕”了。 除去元素本身，css的哪些是跟布局有关，你可以拿来对它进行control的？\n\nwidth/height 宽/高\n\npadding/margin 内外边距\n\nposition 定位\n\nfloat 浮动\n\ndisplay 元素类型\n\nz-index 层级\n\noverflow 溢出处理\n\n文本相关：text-align、text-transform、text-indent、word-wrap、white-space、line-height、vertical-align等等\n\n书写模式：direction、writing-mode等\n\nMulti-column、calc()、Grid、regions、shapes、Object-fit/Object-position等等。\n\n当然，除了上面所说的这些，你可能会说，流式、自适应、响应式、弹性盒，还有什么双飞翼、圣杯之类的，这些不是吗？这就像是我问你食物有哪几种，你跟我说，有“麻婆豆腐、小葱拌豆腐、红烧豆腐、家常炒豆腐”一样，这些是菜式，它能吃，但应该归到食物种类里吗？显然不。所以，上面所列出来的这些具体的属性，也就是真正作用到元素的东西，才是最理想的答案。\n\n把他们列出来之前，我自己也没想到有如此之多，而且还没列完。它们当中，有一些是最初的版本就支持，有一些是因为css3的出现且现在已经很好的支持，还有一些，有待继续的发展和支持。 想了解的更多，可以看css参考手册和w3cplus、css reference、webkitcss里面的相关内容。\n\n好了，经过这么多的唠叨，就是一个从“未知”到“已知”到“熟知”，再探索“未知”的轨迹，正所谓学无止境，只是布局就说了这么多，而且远未说完。前端充满着乐趣，需要我们共同去玩耍~下次见","tags":["CSS"],"categories":["CSS"]},{"title":"前端早读课专访","url":"/2015/10/23/zaoduke-visit/","content":"\n## 前言\n说到前端导航站，早读君在11年的时候就做了一个ux265.net的，但后面由于维护的力度原因，没在继续做下去了。\n\n今天我们要聊的这个人，是前一段时间在微博上被各大微博号推荐的一个前端导航站的负责人灵感_idea，所以我们今天就来让他来分享这个导航站是如何出来的。\n\n先来认识下这个人：\n昵称：灵感_idea，现任职于腾讯理财通产品部前端开发组\n职位：UI开发工程师\n主要工作：负责理财通日常活动页的UI开发和理财通官网的维护\n开源项目：醉牛前端网址导航http://f2er.club/\n \n## 由来\n\n现在是互联网的时代，我相信不管是从业者还是普通的用户，都已经或者正在被它的威力所震撼并且受益。从当年初中的时候老师开玩笑说不用出门就可以购物，到现在成了家常便饭。每个人都曾有过一个“神奇”的想法——“如果能有一个东西能干嘛，就好了”。现在都在一步步的成为现实。为什么要扯这些呢，貌似跟话题无关，其实不然，那个理想中的“东西”，说专业点就是产品。我也曾做过做一款完美的产品然后暴富的美梦，显然目前还力不从心。那么作为前端从业者，我比那些入行时间更短，和平时不太关注行业动态的同行们可能接触的、了解的东西更多，我有什么可以为他们做的吗？于是就开始慢慢的思考。\n\n## 思考用加法，做事用减法\n\n学习前端一路走来，我跟很多人一样，逛了很多网站，找了很多资料，我想把它们分享出去，于是最简单的方法就是建立了一个QQ群，然后，自己写了个稍微有点煽动力的文案，到群里或者贴吧里发了几次，慢慢的人多了起来，我不是很追求人数，所以后来就没怎么推过。现在为止我已经在群里分享过很多好的资料和文章，很多会议和活动的资料也都是第一时间献上。慢慢的我发现，这样还不够，回答过很多次的问题总还有人在问，总会有人不知道某个东西的存在或者找不到某个资料，如果每次都重新说一遍，或者重新帮他找一遍，这成本就大了，而且觉得没必要，于是，我就开始想别的更好的方案，我最初想做的是一个学习网站，里面有文章，有教程，有很清晰的栏目分类，并且如果有问题可以直接跟相关的人进行实时沟通。总而言之，就是提供齐全的学习资料供大家查找，提供很便捷的渠道为大家解惑。使得一些被问了无数遍的问题，被找了无数遍的资料不需要再反复的去耗费大家的时间。我觉得它是一件很有意义的事情，当然，不会收费，我对一款产品的追求就是零门槛，体验好，内容充实。\n\n可是问题来了，这是个五脏俱全完整的网站啊，我不是全能战士，自己可搞不定，于是我就到自己加的一些群里去发广告了…也是找来了一部分人，甚至分成了设计、前端、后台组，但是呢，终究还是遇到了两个拦路虎，沟通和执行，慢慢的，也就夭折了。可是我不甘心，就想做出个什么东西出来。于是开始新一轮的思考。\n\n## 从雏形到成形，简单的事情做好，就不简单\n\n复杂的网站做不了，不可以做简单的吗？想过做像html、css、js在线手册之类的东西，但已经有类似的东西了，似乎再造个轮子没有太大意义，也想过写电子书，但这是需要耗费大量时间的，周期长，形式受限，内容也受限。然后我就回想了一下平时自己或者同行所会遇到的问题，所需要的东西，从需求出发，而非最终要的东西。对的，一些常用的工具、组件、库等等，还有一些社区平台，业界知名牛人的博客，虽然大家多多少少都会知道一些，也会自己有收藏，但我考虑的还是，够不够全，要用的时候找起来够不够方便，这两点就是核心价值所在，怎样做到全？不断积累加集思广益，怎样最方便？做成分类清晰的网址导航放到收藏栏。再加上自己已经有利用百度的首页去进行分类存放导航的习惯，就开始构思和行动起来。\n\n在最初做的时候肯定不是现在这个样子，内容分类也没这么多，都是一点点的思考，寻找，再加进去的，UI参考了一点别的成熟UI，其他部分从文案到图标，到结构都是一针一线编织而成。有人问过我：就只是link？我说是的，虽然看起来简单，要想做好一点都不简单。其实我觉得链接还有一点天然优势，可以很容易的把新的好资源加进来，也就只是加一个链接搞定，聚合成本低，所以，最简单也是最强大。然后我还很多遍的问过自己：要不要再丰富点？只做链接吗？只做前端吗？然后又一次次说服自己：是的。为什么呢？因为我觉得，把看似简单的事情做好，就不简单，专注一个领域越做越好，就够了，而且我自己就是做前端的，这样才能把它做得“最专业、最懂你”。\n\n## 分类和体验\n\n**分类方面**\n\n从最初上线到现在，有一些分类被新加入了进来，有些是因为最初没有想到要做，有些是因为资源很少，还不适合拿来做一个单独的分类。其实上线之前就在进行着这样一个过程，出于哪些方面考虑呢？\n\n一、需要用到的、实用的东西和常见问题、解决方案\n二、可以获取相关专业干货的渠道\n三、可以参与其中的业界活动\n四、可以学习的好教程\n五、可以学习和借鉴的团队/个人博客、博文、demo等\n\n以上分类基本涵盖了可以聚集的大部分网络资源入口\n\n**体验方面**\n\n一、色彩不要太扎眼\n二、哪些最常用到，放在前面或者打开就是，哪些是空闲时间可以慢慢翻翻看\n三、怎样让用户也能够比较方便的参与进来\n四、点缀效果适当就好，过犹不及\n\n上线之前有过调整，上线之后根据大家的反馈又有一些改进，以后还会不断的改善\n\n## 人生在于折腾\n\n在导航发出来之后，有朋友说我，你还挺喜欢捣腾网页的啊，我说那当然，就是干这个的嘛。其实不只是网页，我觉得做技术本身就应该出于爱好，玩出乐趣，当然，人人都有惰性，都会有倦怠期，或者称之为瓶颈。怎么看待瓶颈呢？我觉得是人性的弱点在作怪，跟技术本身关系不大，你不敢去尝试新的陌生的东西，总在熟悉的范围内活动，永远不会迷路，永远发现不了新的东西，找不到新的乐趣。当然，也并不是鼓励一味的追求新的东西，其实我们人对每一个事物的认知基本都是片面的,知识就像是一张拼图，经常是没有确定的方向，我们找到一块就往上拼一块，都是逐渐的去完善，从广度、深度、细度、灵活度、技巧、量级、形式等，总有我们未曾触及的地方，只要我们想要去寻找和探索，就没有无法前进一说，敢于突破自己，敢于折腾~\n\n## 理想主义者方能成事\n\n这句话是我最近刚感悟出来的一句话，具体什么意思呢？理想主义者给人的印象，简单说可以归为三个字“想得美”，呵呵。想得美=不现实吗？其实不然。想得美会带来什么呢？首先是思考，思考一件事情的意义，思考怎样能够把它做得更好，既然想了这么多，不去动手把它做出来又憋得难受，然后就会整理思路，着手规划，将想象中的东西联系实际，怎样能在现有条件下真正的把它实现出来，然后从头开始一点点的做，边做边补充，边修改，这当中必定会经历一些纠结的思想斗争，要不要这么做？这块是不是必需的？是不是重要的？甚至做到一半的时候，回过头来去怀疑自己的初衷，这么费力的做的这件事，何苦？有时候，把自己以前想到的一个看起来很好的idea后来要砍掉的时候，还是会痛的，但为了最终的大局，依然能坚定的走下去。“理想”就是坚持去把一件有意义的事情做成，做好的动力所在。\n\n## 关于读书\n\n我本人买的书不算少了，了解的也不少，导航上面列出来的那些书籍，不敢说全部，90%都是热销经典书。不过真正能读得进去，然后在实际运用中用得也不多，学习是个很微妙的东西，你吸收到了多少，能做出什么东西，很大程度上不取决于书上的铅字，而是你本身的投入程度和思考深度，还很重要很重要的是实践。这里可以引用一段我在知乎上的回答：\n\n“学习技术的人问的最多的问题，推荐好网站，好的在线教程，好的书籍等等。我们总是会觉得课程或者书籍简单，介绍的都是概念性或理论性的东西，浅尝辄止，我们看到的一些线上的网站或者demo源码，代码结构复杂——知识一看都知道了，实际写代码却没有思路，更不知道怎样写是更好的，好像二者之间有着跨越不过的鸿沟。其实，就是有些浮躁，缺乏实践的表现，理论是必要的，它能保障你知识体系的系统和完整性，但不动手是不行的。”（有删减）\n\n书有优劣之分吗？当然有，上面说不取决于它，但它也能够给你带来很多收获和启发，关键看书籍的章节内容安排、示例和语言描述，是否跟你现有水平相吻合，是否能把你带入进去，而不是大家都说好，都说经典的书就适合你马上拿来读，另外，每本书都会有它的侧重和详略，也都会因为书本限制，内容有所保留，当然，每本书都是人写出来的，不可否认作者会尽自己最大的智慧和努力去解释和表达清楚书要讲的内容，但也多少会用自己更擅长的方式和加入一些自己的见解，读者读起来是否能对等，就当另说了。从积极层面来说，好书还是应该多读，但要书尽其用。\n\n## 关于大公司\n能进入大公司，应该是每个技术员或者将要毕业的学生最初的理想愿景，有些优秀的幸运儿比较顺利的就获得了机会，大部分还是没有，但是又会去想。\n\n或者自己尝试过，或者听人说，总会觉得，门槛高，工作压力大，这似乎是人们对于大公司，对于名企的印象。那么为什么都还想去，直接一点，冲着好的福利待遇和所谓光环。\n\n不过最近两年，大家应该也都有感觉，移动互联网的热潮，互联网+的概念，互联网向传统行业疯狂渗透，IT人也随之疯狂，创业公司如雨后春笋般出现，动辄融资千万或亿级，不论是从办公环境、设备，还是待遇上来说，大公司似乎已经没了优势，仅存的优势，就是光环。\n\n那么这个光环是否也是必须的，显然不是，有句话说得好——“你认识牛人不代表你牛，你在的公司牛也不代表你牛”。如果你只是去在意那个光环，而没有从自身有一个清晰的职业规划和目标，不断学习追求进步，那么也只是背了一个虚的壳而已，说不定某个时候，就轻易的破掉。真正能代表你的是什么呢？个人比较欣赏最近在余果博文里看到的一段话：\n\n**“优越感应该来自输出，而不是输入。阅读一本书不应该有优越感，要自己写一本；使用某种新潮的编程语言不应该有优越感，要创造一个项目；买了摄影器材不应该有优越感，要拍出伟大的照片。”**\n \n这段话后面当然只是举例子，重点是第一句，我们有很多速食的东西，看过，了解过，大概知道，等，当我们能够输出什么的时候，才代表对其有一定的理解和掌握。\n\n我所知道的不在大公司的，也有不少优秀的团队和个人，工作的很好，也有着不错的输出。大公司的业务量级更大，用户更多，赚钱更多，所以相应的能提供更多的东西，也乐于吸纳优秀的人才。但并不代表你需要通过它来证明自己。就像我QQ签名一样，“保持一颗纯粹的心”，做自己喜欢的事情，简单快乐就好。\n\n上面谈的是不盲目追求进入大公司，但如果你有幸到了大公司，需要在意和可以为我所用的是什么呢？\n\n一、工作流程\n二、工具、规范\n三、平台资源、优秀的人\n\n是的，你会接触到很多之前没有接触过的东西，有机会和优秀的人一起讨论问题，看到更多好文章，听一些分享。仿佛进入了一片更加广阔的海洋，你自己也显得更加渺小，你需要更加的谦逊和更加积极的吸取营养，让自己得到成长。\n \n好了，说了这么多，有些是跟f2er.club直接相关的，有些是受情封之邀扯扯的，为了让大家更清楚的知道背后的故事，也顺便谈了一下自己对于一些事情的看法，希望能给一些同行一点点的帮助，欢迎多交流。\n\n## 后语\n\n早读君就是羡慕那种能把简单的事情做好的人，他就是其中一个。做一个前端导航站，可能不会花我们太多的时间，但内容的维护，分享的动力都还是很值得学习的。所以这个导航站注入了太多的感情在里面。\n\n\n\n\n\n","tags":["经历"],"categories":["分享交流"]},{"title":"那些年我干过的矬事","url":"/2015/10/17/those-year-i-do-bad/","content":"\n为什么要这个时候自己揭自己的短呢？因为被人指出了一个以前写的页面上面不好的实践方式。觉得干过的类似的事也有一箩筐了，可以小结一下，给大家一个参考。\n\n**一、不跟团队规范一致**\n\n规范是一个人人在喊，但人人都不太容易遵守的一个东西，因为每个人有着自己的习惯，到不同的团队，和不同的人合作，都会有遇到跟自己习惯不同的东西，这个时候就需要共同遵守一个规范或者大家一起制定出一个规范，不管是自己的文件组织、命名，还是代码的书写方式，交互的实现方式等，都要尽量跟团队一致，因为一定是会有团队协作的，这样会减少很多的沟通成本，提高效率，而且既然它成为了一种规范，某种程度上也是比较好的实践方法，无形中可以提高你的专业水平，养成更好的习惯。\n\n**二、习惯使用元素选择器**\n\n这里并不是说不能使用，而是不要过多使用（除了reset），虽然大家都觉得命名是个头疼的问题，但仍然建议给元素命一个语义化的类或者ID名，好处在哪里呢？比如常用的a、span、p这些，很多时候，我们使用它们的位置和数量是不可控的，一旦用了元素选择器，又在里面加入了另外的元素，样式不同，怎么办呢？或者，有时候使用了一个标签之后突然觉得并不合适，想改，怎么办呢？为了达到目的，你可能会去采取子选择器，兄弟选择器，css3的nth-child甚至多嵌套一层增加权重等等，这些当然也可以但经验来讲，这些做法把结构越来越锁死了，哪里都不能动，动一下样式就要重新写，很头疼的问题，所以，不如最开始就不给自己挖坑。简而言之，就是增强代码的可维护性。\n\n当然，出于性能考虑，css选择器的机制是从右往左的遍历式，如果用了元素选择器就会遍历所有同一标签的元素，显然更消耗时间。还有一个常见的不好的实践方式是比如ul.list，这里的ul通常情况下是没必要的，徒增权重。\n\n**三、使用较通用的类选择器**\n\n这个，是为了不给自己挖坑，也不给别人挖坑，比如title、list、item、mod等，很容易用到的名称，如果在一个地方用到，另一个地方又用到，就很容易产生冲突，你当然可以找理由说你能找到某种方法去避免，但人总会疏忽的，为什么不把它扼杀在萌芽中呢？当然，也不是说这些绝对不能用，有一种方法叫前缀，我们只需要给它们加上一个所在模块的命名前缀，就能一定程度上不踩坑。\n\n**四、重复的事情重复做**\n\n标题好像有点奇怪，不应该重复做吗？比如，大到我们每个项目都会去建立一些文件夹和文件，小到，我们每次都要为一些效果写兼容代码，经常用到一些浮动相关、水平垂直居中相关、显示/隐藏、溢出隐藏、类似的动画效果等等。其实我们可以通过自己的经验来做一些通用性的文件，每次再需要的时候直接拿过来。或者在同一个项目中，各元素之间我们总能找到共性，那么把它们抽离出来进行归类，既方便统一管理，也方便复用。正所谓，再高效的做事方法也比不上“不用做”~就像有位前辈曾经说的那样“比我聪明的人，我比他更努力，比我努力的人，我比他更聪明。”很多事情，都是有思考改进的空间，可以做得更聪明。\n\n**五、不利用继承**\n\n这里的继承，可以是大的范畴，也可以小到某个技术，就CSS而言，大家都知道很多东西可以继承，比如font-size、color、line-height等等，很多时候只需要在它们的父容器或者提取出来一个公共类，把这些定义出来，就不用再重复写。并不是简单的省事儿，简化代码，也体现了一定的知识性和思维，全局的规划，模块之间的共性和差异，某种程度上提升了自己写代码的专业素质。\n\n**六、不写代码注释**\n\n这个其实是很多人不理解的地方，我曾经也很不重视，为什么要写代码注释？我自己写的代码闭着眼睛就能知道哪是哪，有这个想法可能是两种情况：\n\n1、所做项目代码量很少，需要维护的项目少 ；\n\n2、团队协作的地方不多，而且团队整体没有注释意识，大家都习惯了。\n\n其实还是有它的必要性的，清晰的结构和语义化的标签及命名固然必要，但它们肯定比不上注释更能直接的告诉别人你那段代码要做什么，在什么情况下产生什么变化，会有哪些交互。等等，一旦你写了注释，不仅自己什么时候看都能明白，而且别人也能很容易看明白，跟后台开发合作以及会有工作交接的情况，都是很有好处的，有时候还可以利用注释进行搜索定位等，所以不要偷懒。\n\n**七、不思考，不规划，拿来就做**\n\n很多时候，我们拿来一个页面，通过第一印象看起来就觉得挺简单的，就开始做了，没有对其进行分析，比如：细节方面是否有遗漏，视觉提供的UI元素是否有明显的错误和缺失，怎样实现不会出问题，哪些是页面之间可以共用的模块或者颗粒，哪些图是需要拆开，哪些可以整块处理，哪些可以用代码实现，哪些可以用字体图标，哪些需要合并，哪些是以前做过类似可以复用等等，如果不进行这些规划，在做的过程当中就会不断的遇到问题，然后需要花更多的心思对其进行组织整理，修修补补，效率就会受到影响，完成质量也会相应降低。正所谓“磨刀不误砍柴工”，准备工作要做足。\n\n**八、只看视觉稿，不想实际情况**\n\n视觉稿还原，这个话题已经被行业提升到一定高度，都在追求毫厘不差的还原视觉稿，觉得那样就是做到了细节的极致，其实很多时候，有两点问题：\n\n1、提供给我们的视觉稿并不是，也不可能包含所有尺寸和分辨率的设备\n\n2、视觉稿是静态的，所提供的容器，文字，图片等也都是静态的。\n\n如果我们脑子里有一个声音“严格按照视觉稿”。\n\n那么可能出现什么情况？\n\n1、图片本身是多大就多大放上去没问题\n\n2、文字本身是多少就是多少没问题\n\n3、容器本身是多大就定多大没问题\n\n最终会导致什么问题？\n\n1、图片溢出\n\n2、文字溢出\n\n3、不管屏幕多大，容器、图片、文字都是一样大，不能自适应。\n\n最近几年有个说法，觉得还蛮符合，不是视觉稿还原，而是设计理念还原。我们要去理解需求方要的是什么样的页面，理解设计师想要的效果是怎样的，然后结合我们的经验和专业去让页面在实际使用场景中很好的展现出来。这里的实际场景包括，用户上传的图片，用户输入的文字，所用的设备，所处的网络环境等等。\n\n至于上面那些情况所导致的问题，当然还是要以需求为导向，具体第九条和十一条还会有讲到。\n\n**九、只看自己用的浏览器情况，不考虑兼容**\n\n兼容现在的范畴会比以前更广了，不同浏览器，不同浏览器版本，不同分辨率，还有微信、手Q等，一般开发者只会使用一种自己熟悉的，有很好开发者工具的，对新特性支持很好的浏览器进行制作和预览效果，这其实是在最大程度上掩盖掉了很多问题，当我们换一个浏览器，或者换一种设备去看的时候，可能一下就惨不忍睹。\n\n个人认为要从哪些方面考虑呢？\n\n1、对于有不同版本的css属性，兼容性代码要写全，如果需要兼容的版本比较低，那就衡量一下是统一使用兼容性比较好的方案，还是采取判断浏览器使用两种方案。\n\n2、优先采用不固定布局，比如百分比、父容器内边距，结合浮动和定位等，这些都能让你的布局在不同尺寸的设备上收放自如。\n\n3、要特别考虑的是有一些特殊要求的网页，比如需要占据整屏的页面，需要定在某个位置的元素，怎样让它做到至少主流机型都正常，布局不会乱。\n\n**十、拒绝尝试更好的实践方法和新鲜事物**\n\n比如当你习惯了css，是否愿意尝试less、sass、stylus等？当你习惯了px单位，是否愿意尝试em、rem？当你习惯了使用各种工具来处理代码和图片，是否愿意尝试grunt、gulp，当然现在还有webpack、browserify等很多。是否在项目中使用了雪碧图、字体图标甚至更多？是否愿意尝试一些框架的使用，是否愿意去玩一下css的新属性，哪怕还没有浏览器支持（chrome开启实验功能可用的）。当你习惯了dw，是否愿意去尝试notepad++、sublimetext等等这些更轻量，看起来学习成本更高但可能更好用的工具？当你习惯了手写代码，觉得自己的手足够快，那你是否愿意继续去了解一下有哪些快捷操作方法可以免去一次次的鼠标点击和复制粘贴？你试过就知道有多好玩，试过就一发不可收拾~\n\n**十一、想省事**\n\n不重视沟通，不重视自查，认为没问题。\n\n很多时候，我们看视觉稿，看交互稿（有时候还没有），然后根据自己的经验去判断，去想象页面应该是什么样子，怎样合理，这种情况应该是大多数公司或者团队都有。鉴于每个人的喜好和经验不同，我们想的跟需求方/产品/设计师想的很可能不一样，如果在有疑问或者不确定的时候嫌麻烦不去沟通，可能出现的后果是，都做好了，给到团队进行走查，都提出来一大堆的问题，甚至有时候需要你动大刀子，这个时候就该你叫苦不迭了。想省事，其实给自己留了更多的后患，得不偿失，也是一种消极的工作方式。\n\n除了做之前和过程中的沟通，做之后的自查也是有必要的。难以避免做的过程中，会有一些小的尝试，代码的增减，注释，临时文件，已经可以把这些进行整理删减了。另外，虽然有很多同事和测试来对我们的产出进行测试，但我们自己先检查出来总是好的，减少了一来二去的反馈和反复修改，对我们的自身的工作体验和节奏也是有好处。\n\n**十二、在没问题的地方找问题**\n\n我们会犯一些低级错误，这是无法避免的，比如符号不小心漏写了，删除了，在某个地方定义了另外的规则把我们想要的覆盖了，改错文件了。或者因为对某个属性只是字面上的理解，没有理解本质，用的时候起不了作用，然后排查的时候，没有针对性，乱查，要么删点代码，要么大幅度的修改数值想暴露问题，往往事与愿违。这就是方法不对了。\n\n怎样能比较好的找问题呢？我觉得下面几点可以作为参考\n\n1、由经验判断，哪里最可能有问题或者回忆一下自己操作不当的地方\n\n2、养成好的编码习惯，不犯低级错误给自己挖坑\n\n3、编程工具有比较好的错误提示\n\n4、查看控制台报错\n\n5、选择性注释代码来暴露问题代码段\n\n**十三、只想把事情做对，没想着做好**\n\n举个极端一点的例子，我跟同事曾经玩笑的谈论了一下标签的使用，说就算是你整个网站全都用一种标签去写，那也是可以写出来的，因为从表现类别来说，就分为“行内”和“块级”，另外还有一个display可以改变它，所以就没什么关系了，写出来的页面应该也看不出来什么问题。好像也没错是吧，我们肯定不会这么做，但我们总会做很多类似这样的“对”的事，但远没有达到科学、合理。\n\n人人都更加愿意谈自己擅长的新东西，好玩的东西，高级的东西，某种技巧等，我为什么写这么一篇文来告诉大家自己做过的矬事呢？每个人都是从无知到有知，从做得差到做得好，很多人会觉得自己在某个时候进入了一种瓶颈，其实就是没有对比，没有去接触更好，更广阔的东西，没有跟外界有足够的交流，就比较难发现自身的不足，勇于去主动发现自己的不足，总结思考，加以改进，就能从中学到东西，得到提升。我写到的这些东西，应该也有很多人同样遇到过，大家的经历应该都是相似的，所以，希望能够起到一定的参考作用。\n\n该告一段落了哈，以后应该还会干更多矬事，哈。有需要交流可以直接找我，相互学习，促进进步~\n\n","tags":["总结"],"categories":["总结"]},{"title":"醉牛前端诞生记","url":"/2015/09/13/zuiniu-birth/","content":"\n## 起源\n\n大概两年多以前，和前端结缘，做技术这行的，不管是有项目练手，还是有人带，最主要依然靠自己。现在是信息时代，找资料很方便，当时的我像现在很多新手一样，如饥似渴的在网上找着各种指南，好的学习资料，教程，博客，word、pdf、txt、video，也加各种群求经。逐渐的就找到了很多好的资料。我看着那么多好东西，心想肯定还有其他很多人在找他们，那么为什么还要让他们跟我一样到处找，走那么多没必要的路呢？\n\n于是在我出来工作之后不久，就拾起了在校时就建立却好久没顾上打理的QQ群，10个人不到，改名叫“web前端~美是编出来的”，这个名字起初是有人质疑的，觉得有点复杂，也有点奇怪。我为什么没改呢，因为它就是我想传达出来的信息，为什么我会做这个并喜欢上它，就是认为它很有趣，很神奇，像魔法一样能做出具有美感的页面。对，就是这样。群里从0到50的人基本都是我出去发广告拉来的，在我去宣传的过程中，在贴吧里看到有一个提供两本书的帖子下面有超过2000条回帖求书，当时我就震惊了，两本书需求就这么大，我有那么多…这更坚定了我把它们分享出去的想法。后来群里的人越来越多，我就没再刻意的去推广过，只是在群里给大家提供一些力所能及的帮助，比如：上传最新最好的资料，发布一些靠谱的职位信息和好文、教程链接等。\n\n说了这么多似乎和醉牛前端还是没扯上关系，其实不是，都是有因果的，虽然组了QQ群，虽然分享了那么多资源，甚至我在各个社区都开了专栏，也写自己的博客，但逐渐的会觉得仍然有些无力感，因为互联网很大，信息很多，需要帮助的人很多，而它们都太有限了，谁也不能一对一手把手，或者24小时全天候去提供帮助、解决问题。（虽然也没人有义务这么做，谁让我那么爱提别人操心呢~）。所以，效率很低，复用率极低，成本很高。很多东西可能这次你找到了，看过了，下次又找不到了，大家都不是机器，不可能把所有东西记脑子里，也不是所有人都会动手去做一个整理和组织（真的挺繁琐）。于是后来想做一个学习的平台，还想到做几个W作为主干，what、why、how，是什么、为什么、怎么用，然后再进行其他分类，想想真的挺赞。说干就干呗，于是我又到群里去发广告拉人了，拉了总共十几个人，还分成了设计和开发组，跟他们说了要做什么，想做成什么样，还向他们保证了这个项目不会死，我趁着周末把项目策划书都写出来了，他们也提了不少看法和意见。说到现在你可能有疑问，那么它就是醉牛前端吗？不像啊。是的，我保证了它不会死，可到目前为止它还是没有开始做，原因我在第一次发醉牛前端上线公告的那条微博里有说到“想法太多、太大，执行很不够”。\n\n## 原型怎么来的\n\n在很多次思考和否定之前的想法之后，我就想，太大或者太复杂的东西暂时做不了，那么可以做什么呢？\n\n我们很多人都有自己的网址收藏夹，我看过最恐怖的把整个电脑屏幕都铺满了，都是title，随着时间的推移，不断往里面加的话，都会变得很多，而且没有分类，前提那是你自己的电脑，换了电脑可能就丢了（如果不知道导出或忘记导出）。正是我自己为其所累，就又想了其他的对策。那就是很多人都吐槽却一直在用着的百度，忘了从什么时候起，百度首页不再只是简单的一个搜索框，而是有了一个导航，先给大家看张图，我自己在用的（已经是不完全版，更多的加在了站上）\n\n![](zuiniu-birth/1.jpg)\n\n是的，这个导航你可以自定义的添加分类、网址和描述。\n\n用了一段时间之后分类越来越多，觉得可收藏的东西越来越多。我保证了不死的那个项目其实一直没有忘，既然那样的做不了，我又实在不想什么都不做，那就把自己的想法“简单、再简单”，不要把一件事想太复杂，也不要那也想做这也想做，你会发现到最后你把自己“想”死了。所以，就不贪心，不管是歪瓜裂枣还是烂葫芦，先做出来一个东西，没做出来的再漂亮也是空谈。\n\n那么做什么内容呢？教程肯定不行，最基本一点，我也没教程资源啊~手册？有人做得挺好了。又想想自己在工作和学习过程中找到过、用到过哪些东西？哪些很好、很常用的东西？为什么不提供一个平台把它们汇集到一起给大家呢？有些方面是很容易就想到的，比如博客/社区、手册/工具和一些常用的组件和库、书籍、教程。于是我就开始干了。\n\n## 怎么生出来的\n\n参照自己在使用百度导航的一些经验就开始做了起来，最开始的UI肯定不是现在的样子，就不给大家看了~做得过程中其实又有了新的一轮梳理，哪些东西应该分到哪一类，哪些应该再进一步的细分，哪些应该再加进来。好的，跟着自己的感觉折腾了几天之后，最开始的样子出来了，就在github上面新建了项目叫notebook（手册），就是想它像一个手册一样方便，大家想用马上拿来用。上传了文件，然后结合gh-pages，就出来了最初的样子。\n\n## 破茧到1.0版本\n\n最初的样子出来后，肯定想找同行朋友看看，因为我自己也不是太满意，内容不够，外观也有些别扭，在听取了一些建议之后，开始第一轮的优化，可以说是脱胎换骨的，找不到一点原先的样子了，当然，也参考了其他的网站。\n\n只从样子上去改肯定不够，还有几个问题：\n\n**叫什么？**\n\n这个其实是快要上线的时候才想起来的，当时只用了英文的名字，就是现在的域名，中文名还没加上，“醉牛前端”是早前曾经出现过脑海的名字，又想起它来，也没别的更好的想法（取名字向来都是头疼的事情~），于是就用它了，跟“最牛”同音，当然，就是个说法，可能也利于传播把，但没有最牛这回事。\n\n**网站是干什么的呢？**\n\n我要把最主要的目的以最直接明了的方式告诉大家，于是，就出现了右上角那两行字“做专业的前端平台，提供你需要的东西 解放你的收藏夹，让它们只做最主要的事情”\n\n**Logo**\n\n作为一个网站，只有颜色和文字，显然有些单调，起码logo是应该有的，可是，哪里有现成的适合网站的logo呢？于是我开始了新一轮的寻找，看着图标找感觉，找了几个站，也看了很多图标，看着看着，就看到了有一个很多小人的图标集，觉得，既然是做给前端人的，那么，这些没有身份的小人应该能够有一定的寓意，代表整个前端群体，但选哪个都不合适，于是，想选几个，几个呢？logo不能太大，三人成群，那就三个吧，挑什么颜色的呢？我又想到了前端最常用到的三原色“RGB”,“红、绿、蓝”，好的！就这么愉快的决定了。那选择了它们三个，以怎样的形式呈现出来？最初的想法是一个在上面，两个在下面，就是现在大家看到的样子，就用ps组合了一下，放了上去，但是…我还是不满足，就这样而已吗？这里其实是受到鬼哥的影响，他博客头部的“css”图，鼠标悬停是有动效的，所以，我也想做，显然一张图做动效会受到限制，所以，logo1.0废弃，三个图标单独放上去，就有了现在的logo，不复杂，却增添了一点点趣味性。（不要告诉我很多人在看到这篇文的时候才知道logo会动啊？~）\n\n**域名**\n\n既然是网站，就要有个独立域名，才像模像样，用什么呢？试过f2er-club.com，貌似已经被用过，f2er.com，呵呵，当然也被用，然后，我就试探性的打开了后缀列表，看到了.club，然后尝试了一些f2er.club，欧耶，perfect！~虽然出来之后也有人表示过质疑，但我相信它还是比较容易被f2er们接受的，是吧？\n\n**用户体验**\n\n网站做出来了，就是给人用的，虽然我认为它是个“内容”为主的站，但如果只是内容做好体验不好，岂不是很不搭，于是，从背景、边框线条、边距到区域动效、到点击导航不能返回顶部，到考虑到哪个使用的频率应该是最高的来调整侧边导航的排序、到大屏幕下内容不够不能撑满屏幕下部大块留白，到移动端适配。有些是上线之前就做了的，有些是上线后听取同行的意见进行的修改。 当然，没有最好只有更好，它还会变得更好。\n\n## 总结\n\n网站上线后，得到了同行们的好评，很是欣慰，虽然它就只是link的大汇集，有人说我肯定花了很多的心思，这一点我不否认，不花心思真的不行，各种方法、各个角落，一个个的去找，分类、弄好了之后链接再检查，断断续续做了两个多月，甚至我都很多次几乎做不下去要放弃，因为也要做别的事，也要学习，差点就搁下了。但又不甘心，为了逼自己，在1.0还没出的时候，我就把域名注册下来了，抗战纪念日的假期三天，集中精力弄了两天半，虽然假期也没怎么休息，没出去玩儿，觉得还是蛮有意义。它本身没有一点技术难度，就是为了做一个这样的东西出来给大家，也是给自己，提供一些便利。我相信它~\n\nTips：网站会不定期更新内容，我会在微博上面发消息通知大家，大家有建议或想法，最好是github上面提issue，当然，如果你没有github账号，或者不方便，那么[微博](http://weibo.com/ideazhao)留言也行，如果微博也不玩儿，可以邮件：420750281@qq.com或者Q我，如果没有Q…","tags":["总结"],"categories":["总结"]},{"title":"两年前端行","url":"/2015/08/08/two-years-fe/","content":"\n借着上海cssconf之行夭折之际，怀着遗憾，看着“直播”~写下这篇文吧，虽然已经不是准确两周年时间，也算是两年的小结。\n\n去年一周年的时候写过一篇，那个时候是刚换新工作一个月，而今天是我第三份工作刚刚离职。所以你应该懂了，我想在这个节点上再来进行总结。\n\n回顾两年时间，一切的事情，都离不开两点：热爱、坚持。\n\n现在为止待过三家公司，每一家公司对我都有很大影响。\n\n## 初来深圳\n\n一切都很稚嫩，包括那份初出茅庐的激情，只有一个想法就是先赶紧找到一份工作，因为从离开校园之前我就倔强的拒绝了爸妈的任何给予，很多人说这个时候还没有支撑，先找爸妈要一点是合理的，我没有，不是为了拒绝而拒绝，我是想逼自己一把，同时相信自己能够生存下来。我的每份工作找的时间都没有超过十天，然后，到了一家当时我对它认识很模糊的公司，后来知道是做企业建站，公司地点离深圳中心区很远，地铁一号线坐到尽头都还到不了，团队没几个人，薪水够低，可能大多数毕业生都会接受不了这一切，更何况在深圳这个地方，刚去的时候自己的电脑都没有，但这都不重要，我还什么都不会，网页的技术也只是一点点，我需要的是一次机会。到公司前两天，主管让我硬生生的坐在当时带我的导师后面坐了两天，就只是看他写代码，说实话这对我来说也能接受，因为不会做事，在看的过程中也问了不少问题，但由于中午办公室关门，我没地方休息，有时可能会看着看着打瞌睡。两天过后，主管给我拿了台笔记本，让我慢慢摸索，然后晚上下班后让我不要走，导师拿着笔在白板上一对一的跟我讲一些基础知识，每天也蛮累的，但收获也很多很多，慢慢的开始给我一些东西练手，忘了过了多久，主管感觉时机差不多了，跟我谈话，问我自己独立做一个项目ok么？觉得可以的话下个项目就给你，当时我的心里偷着乐，嘴上说，应该可以吧。就这样，我迎来了第一个独立完成的项目。现在仍然记得它的名字——冠科。\n\n依然记得很多次接近午夜才回到宿舍，记得从试用到转正，记得从普通员工到可以参加主管会。这中间公司也在发展，也前后招了一些人，设计师，前端，但都没做一个星期就走了，原因，无外乎觉得公司不够好，薪水太低，确实，公司比起那些高大上的公司是比较low，但觉得薪水太低的那位哥，心态没有摆正，他是培训了一年出来的，但是代码水平不敢恭维，面试的时候，做机试题，body写成了boby都不知，底部导航就直接一张图放那里了，其他的就不说了，其实想说，他还那么年轻，又急什么，不能先提高自己的水平再去追求相应的回报么。相信很多人都会同意这样一句话：公司是让你过来做事的，不是给你当学校还要养着你的。我的能力在他之上，学历也在他之上，但我珍惜在那里成长的机会。就算后来我离开了公司，也还和前同事有联系，有感恩，也有友情，前主管到现在都依然看好我，可能也跟我的心态有关吧~\n\n## 第二站\n\n离开第一家公司是出于个人考虑，找第二家公司的时候，觉得最好找个大一点的平台让自己锻炼锻炼，涨涨见识，进一步提高水平，顺便拿稍微多点薪水，改善一下生活质量。面试了几家公司，有些是我对公司不满意，有些是公司对我不满意，这里面也包括了去缘来网被大白面，最终成功的公司两家，一个还是建站，不过跟第一家公司只做PC的企业建站不同，它比较多样化，看起来更加前沿，另一家是个创业公司，做的是自营产品，自己的平台，考虑再三，我选择了后者。而且去了之后，前端就我一个人，后台也只有一个，其他有做安卓、ios，所以，麻雀虽小，五脏俱全。因为是开发自己的平台，所以项目类型和复杂度是以前没有接触过的，因为前端就我自己，所以，要做的事情的广度也是之前没有的，偶尔会接一些移动端的外包项目，这个也是之前没做过的，所以，挑战很多，挑战也是机遇，虽然时常抓耳挠腮的不知道一个东西从何着手，怎么解决，鸭梨猪母狼马蜂大，但后来大部分也都一个个的解决了，所以，这家公司虽然待的时间也不长，成长也是很大的。\n\n## 第三站\n\n第二家公司因为产品迟迟的没有出来（这一点也是挺纠结，前端部分做完了，觉得还蛮不错的作品，但后来别人问我项目，都没办法给出链接展示，几个月的成绩憋在心里），没有盈利方式，没有赚钱，资金周转不过来，接二连三有人走了（总共也没多少人），所以，氛围就更加不好了，人心很不稳。我也不例外。平时在学习前端的过程中也结识了不少同行朋友，这个时候自己也在着手想下一步该怎么办，有想过转移阵地，离开待了一年多的深圳，去上海，鞋厂是其中一个选择，觉得团队很不错，而且一度觉得自己真的可以去，有点小鸡冻，but，简历丢过去给志哥，隔了几天电面，然后就没有然后了…心思重新收回来，在深圳找，偶然机会看到腾讯CDC有招人，是外包岗，要求也不高，就决定尝试一下，很认真的做面试题，准备面试。去了之后一面是tommy，也是第一次走进企鹅办公区，说实话，虽然之前也知道他，但当时不知道在我面前的人就是他，不然会比较紧张，问了一些问题，表现的算一般，二面是现在的直属leader阿义，边看我做的面试题目边问我一些问题，在这个环节我就已经感觉没大问题了，因为问了一些入职之后的问题。后来我就过来了。来了之后，知道了彪叔和basecss也在这边，不过，我们却和他们不在一个地方办公，小小失落~后来就投入正式工作了，来到这里得到的成长是，分工合作，沟通，一些规范和流程，一些工具的使用，代码的组织，文件的组织，当然也有遇到一些技术上的大挑战等等，都是之前不知道或者比较薄弱的环节，关于工作上的一些积累和经验总结，会在以后的文章里再分拆细谈。\n\n做了将近9个月的时间之后，看到了一次转正的机会，是到理财通那边，然后就尝试了一把，之前没有想这么快就转移，只是想尝试，行当然好，不行的话，也找找自身的不足和差距，继续努力说不定下次就行了。经过了半个多月的机试、面试和一些朋友的帮助，最后成功了。\n\n下周入职，这对我来说，是个肯定，是个新的起点，也会有更多挑战和成长，很多人会羡慕，说大腾讯，好牛，精英，大神，大大之类，其实，我都会淡然看之。因为只有自己知道怎么走过来的，也只有自己知道自身水平，我从来不是一个爱慕虚荣的人，也不会单纯的因为待遇福利去选择一家公司，从自身技术水平来看，还有相当的不足，从工作经验，项目经验等方面也是有很多不足，继续提升自己，做好自己的本质工作。在继续提升自己的技术的同时，做一些对同事、同行也有帮助的事情，这些就是我接下来要做的。\n\n好的，两年的小结就到这里了，就只算是工作经历上面的一个总结，其他后续再分享给大家。","tags":["总结"],"categories":["总结"]},{"title":"margin那些事儿","url":"/2015/08/07/front-end-home-margin-that-thing/","content":"\n## Margin是什么？\n\nMargin这个概念本身并不难，我也不想把它说的多晦涩，会css的都知道box盒模型，它就是盒与盒之间的间距，俗称外边距，也有叫外补白的，这些不重要。是的，它就是这么简单，但是，它又是怎么兴风作浪的呢？\n\n在刚接触css的时候，有个小师傅告诉我，能用padding的地方就不要用margin，容易出现问题，我当时是谨记在心，以至于后来在挺长一段时间，也不知道会有什么问题。人就习惯于用“有问题”来概括一个还没弄明白也没找到解决方案的问题，当然这是消极的，我们应该面对问题，解决问题。\n\n## 会有哪些问题？\n\n**问题一：外边距叠加**\n\n关于叠加，已经有非常多的人提问，也有过非常多的解答。\n\n这里不再赘述，但可以大概说一下：\n\n**一言以蔽之：两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠**\n\n有几个关键词：\n\n**块元素**：这里可以稍微说一下，大家都知道行级元素跟块元素是有区别的，所以，大家可能经常采用display：inline-block；使其块级化（其他方法这里不谈），然后就对其随意的做各种块级元素才能有的动作不亦乐乎，那么这里就是要说的是，作为行级元素，它可以做到的是border、padding、水平margin，不能做的是width、height和垂直margin，有时候不必盲目的去把它块级化。所以，回正题，这里要是块元素，不然叠加无从谈起。\n\n**两个或多个毗邻**：有人可能认为挨着排列的同类元素才称为兄弟，这是一种惯性误解。这样的误解同样存在于js的当中的兄弟元素，所以，应该首先跳出这个区域，才能更好的看待叠加，当然margin的叠加也不仅是同级的元素会，父与子也会，甚至能够再向外延伸，也就是说，它具有“穿透力”，仿佛盒子没了边界，什么样的边界才能称作毗邻呢？只要两个容器之间没有被非空内容、padding、border 或 clear 分隔开，那么就可以称作毗邻。 当然，还有一种特殊情况，那就是空元素自身的上下边距，也会重叠。\n\n普通流：大家都知道，float和绝对定位等情况会使元素脱离普通文档流。\n\n垂直：叠加只是垂直方向会发生，水平则不会。\n\n代码：\n\n    <ul class=\"menu_list\">\n      <li>margin:20px 0;</li>\n      <li>margin:20px 0;</li>\n      <li>margin:20px 0;</li>\n      <li>margin:20px 0;</li>\n    </ul>\n\n效果：\n\n![](front-end-home-margin-that-thing/1.jpg)\n\n那么如果不想它叠加怎么办呢？\n\n可能很多人马上脑海里就会出现那三个高大上的字母“BFC”。\n\n那么，**触发BFC的方法是什么？**\n\nfloat（除了none）、overflow（除了visible）、display（table-cell/table-caption/inline-block）、position（除了static/relative）\n\n大家都知道要想解决问题，把它会出现的条件给避开即可，那么“BFC”就是答案么？有人已经给出了demo，不妨来看BFC不只是解决叠加的答案\n\n是的，解决外边距重叠的方法是触发BFC方法的子集，而并非等同。也就是说，有些方法并不能完全消除掉叠加现象。\n\n**但答案到底是什么呢？**\n\n1.浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素）\n\n2.创建了块级格式化上下文的元素，不和它的子元素发生 margin 折叠（注意这里指的是创建了BFC的元素和它的子元素不会发生折叠，与上面的demo并不冲突）。\n\n但是，我们在解决这些问题的时候，都是为它们添加了额外的规则，这些规则所造成的影响和去除影响的代价也是不可估的，那为什么不从源头上去避免叠加的发生呢？是的，能用上下边距来进行的布局一般都能使用单方向外边距，所以，“消除叠加，不如本来就没有叠加”~\n\n话又说回来，其实这个叠加，并不能说是个真正的问题，因为它是有设计初衷的，我们把它看做是问题，才觉得它有问题，如果从另一种角度来看，一个容器里面有若干子元素，叠加的结果就是，各子元素之间等距，父容器上下也都有叠加而来的等值外边距。这其实是个挺合理的效果不是么~\n\n好了，更多相关的东西，比如叠加如何计算等，可以参考下面两个网址的内容：\n\n[Css框模型](http://www.w3help.org/zh-cn/kb/006/)\n\n[IE6 IE7 IE8(Q) 中浮动元素和绝对定位元素某些情况下会影响普通流中毗邻 ‘margin’ 的折叠](http://www.w3help.org/zh-cn/causes/RB8004)\n\n**问题二：双外边距**\n\n场景：\n\n1、IE6\n\n2、block元素\n\n3、float\n\n4、margin\n\n5、浮动和margin方向相同\n\n比如下面\n\n    <ul class=\"menu_list double_margin\">\n     <li>margin-left:20px;</li>\n     <li>margin-left:20px;</li>\n     <li>margin-left:20px;</li>\n     <li>margin-left:20px;</li>            \n    </ul>\n\nli设置左浮动\n\nIE6下效果如图\n\n![](front-end-home-margin-that-thing/2.jpg)\n\n明显可以看到最左侧的边距为右边的两倍。\n\n当然，这个bug可能现在会见到越来越少，因为IE6的“消亡”，还有就是滥用浮动是一种不好的布局习惯，所以，用了其他方法它也不会出现了。另外有一点可能造成误解，就是浮动会使行级元素块级化，那么为什么这里要block和float同时满足呢？不信你可以试试，同样条件下，span是没有双边距的。或许，这也就是为什么display：inline可以干掉这个“bug”的原因吧~\n\n好，除了不浮动，那么还有一种方法，就是不满足第5条，让浮动的方向和margin反向，下面会讲到利用了第5条做出的一种经典布局方式。\n\n上面说了问题，那么margin有哪些有用的用途？\n\n下面举几个实际中的例子\n\n## 了不起的负边距\n\n**水平居中**\n\n我们经常会想要一个不管怎样大小的屏幕分辨率下都居中的元素，而且还不能够使用惯用的text-align:center;和margin:X auto;那么这个时候就需要定位了，position：absolute；设置left值，可是，设置多少呢？因为left的值是与容器左边界为标准的，而不是容器的中心轴，所以，这个值没办法设置，于是乎，margin登场，我们可以采用一个和目标容器同等宽高的容器来包裹住目标容器，然后对包裹容器进行绝对定位left：50%，top：50%，最后，对目标容器采用margin：-50% 0 0 -50%；这样的话，目标容器就刚好居中了。（采用定位也可以实现，这里不讨论哈）。这个方法有个局限性就是要定宽，至于不定宽的方法，可以看一下我写的另一篇“不定宽居中的几种思路”~\n\n**不规则的布局**\n\n比如我们平时所理解和看到的盒子是矩形的，有时会看到一个元素，它既不属于上面的盒子，也不属于下面的盒子，而是在中间的，这怎么办呢？ 负边距是个不错的选择，可以设置成你需要的值让它“出去”，当然，如果你不凑巧同时使用了overflow：hidden，那就只能呵呵了。（ps；这里提到的效果同样可以用定位，不谈~）\n\n**等间距列表**\n\n这个你没遇到过？反正我是不信~每个人都会遇到它，而且是经常遇到，一个头疼的事情来了，想给每一项都设置“margin-left” or“margin-right”，可是，最左侧和最右侧的元素怎么办？就会被挤下去了。或许你有下面几种办法。\n\n1、单独加style\n\n2、单独给类\n\n3、用：first-child或者：last-child，再或者：nth-child\n\n很好！你居然有这么多办法，可是，不觉得前两种方法很牵强，那么还有第三种，but，你确定不考虑兼容？ 好吧，不卖关子了，使用margin负值可以解决它。给子元素定义margin-right，父容器定义margin-right负值，具体的值要看具体情况了，为什么这样可以呢？实际上它是改变了元素的宽度使得空间足够了。\n\n干掉空隙\n\n比如之前谈到过的display：inline-block所产生的那点间隙。不再多说，技术运用在于我们的发挥了~\n\n下面就来看一个大招\n\n## 双飞翼布局\n\n这种布局方式貌似最近又活了一把，好吧是一直都火，堪称经典的一种布局方式，说实话，也是我进入职场之后，老大交给我的第一种方法。\n\n下面请看代码\n\n    .main { \n       float: left; \n       width: 100%; \n       background:#39c;\n       height:300px;\n      } \n    .sub { \n       float: left; \n       width: 480px; \n       margin-left: -100%; \n       background:#f60; \n       height:300px;\n      } \n    .extra { \n       float: left; \n       width: 190px; \n       margin-left: -190px; \n       background:#666;\n       height:300px;\n      }\n\n    <div id=\"bd\"> \n       <div class=\"main\"></div> \n       <div class=\"sub\"></div> \n       <div class=\"extra\"></div>\n    </div>\n\n效果如图：\n\n![](front-end-home-margin-that-thing/3.jpg)\n\n当时很菜，看了好几遍都没明白到底是怎么回事，自认为的一个在左边，一个在右边，应该是float：left和float：right吧，却不是，那总应该是个margin-left，一个是margin-right吧，也不是，好奇怪的赶脚啊！~后来，老大跟我画图讲解才恍然大悟。然后想，布局要搞得这么神奇呀，以至于后来用其他方式的时候都会有些怀疑自己用的方法思路是不是太简单了，有问题吧？~\n\n当然，这种布局运用到了float和margin负值，而且很是方便，两栏、三栏、栏和栏之间交换等，那都是分分钟的事情。当时我要使用别的方法的时候，老大就会白我然后说道：你能保证不出问题么？ 好吧是的，这种方法优点很多，比如：\n\n实现了内容与布局的分离.\n\nmain部分是自适应宽度的，很容易在定宽布局和流体布局中切换。\n\n任何一栏都可以是最高栏，不会出问题。\n\n需要的hack非常少（就一个针对ie6的清除浮动hack:_zoom: 1;）\n\n在浏览器上的兼容性非常好，IE5.5以上都支持。\n\n故而历久弥坚~\n\n元素间的空隙或许到什么时候都是需要的，它代表着元素相互之间的一种独立，能使页面看起来更加的有结构感，更清晰，那除了margin还有什么选择吗？\n\n可期的未来——“摆脱”margin\n\nCss3提供了很多新的方法来进行布局，看起来也更加灵活和智能，比如Flex box（伸缩盒），Multi-column（多栏）和Grid（网格）等。那都是棒棒哒！~\n\n好了，今天关于margin的问题先谈到这里，说的蛮多了，其实还有，也可能有疏漏，欢迎大家骚扰。\n\n另外，可以有以下两种方式找到我\n\nQQ群：152128548\n\n微信公众号：前端周末\n\n咱们下周见！","tags":["CSS"],"categories":["CSS"]},{"title":"再谈css","url":"/2015/06/22/再谈css/","content":"\n先说两句闲话，为什么叫再谈呢？因为以前有谈过，请看这里[初谈怎样更好的去规划CSS](http://ideazhao.com/2014/08/16/%E5%88%9D%E8%B0%88%E6%80%8E%E6%A0%B7%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8E%BB%E8%A7%84%E5%88%92CSS/)\n\n时间差不多是一年前，那个时候还没有换工作，公司就我一个前端，负责一个项目的所有前端相关，当然，说是这样说，我是没有能力去顾及那么多的，自己懂的或者意识到的东西本身就有限，只是通过一整个项目的折腾，总会意识到一些问题，甚至有时候代码写得自己都忍无可忍，有痛就有领悟，自然就能总结出一些东西，就有了那篇初谈。当时写完之后蛮有成就感的，现在看来还是有很多不足，因为是初谈，为照顾一些初学者，包含了多一些基础的东西，一年过去了，前段时间在团队内部也做了一次css的分享，借此机会再谈谈吧，虽然依旧可能有很多不足~\n\n## 选择器\n\n这是css的永恒话题，也是核心话题。但这里如果罗列出来就没意思了，不如大家去看文档~\n\n**元素、类、id、子选择器、后代选择器、兄弟选择器、属性选择器、伪类选择器、伪元素选择器、群组选择器**\n\n在这一堆选择器中，该如何选择呢？老生常谈的东西咱就不多说了，说说在项目中的有益做法。\n\n首先要明确的是，为什么要用？它是css和html之间沟通的桥梁。 既然跟html有关，那么就可以谈谈html，又和什么有关呢？和我们要做的页面有关，好的，那就到了视觉稿。我用一个词来形容看视觉稿的感觉——“庖丁解牛”。什么意思呢？\n\n它可能包含以下部分：顶部、头部、导航、侧边栏、banner区、列表、底部，以及其他大的区块。 至少到这里我们能看到什么呢？我们的css能大致划分多少大块，能把“宽度、居中、浮动、文本位置、字体类型、颜色”等剥离出来。\n\n那么可以再细看，继续找共性，比如“圆角、边框、背景、阴影”等等。\n\n下面找不同，被我们剥离出来的东西，在哪些区块是有特殊性的？\n\n这样做的好处是什么？——模块化，增强复用性。我们不需要每个地方用一套独立的样式，共同的规则书写很多遍。可以把共同的部分写成一个公共类，特殊的规则再另外定义，此所谓“基类 扩展类 实例类”。\n\n好的，根据页面结构，我们已经成功的把它们拆解了，下面要做好什么呢？——解耦。\n\n为什么要这么做，首先html的标签是有限的，而且我们要尽量语义化，那么一个页面里面用到相同标签的地方可能就很多，比如h1~h6、ul、p、span等等，如果我们直接用元素选择器来定义规则：\n\n1、 如果我们觉得那个元素可能不合适呢，要换掉，css也要改了。\n\n2、 如果要加入一个新的内容，用的是同一种标签却是不同的样式呢？这个时候要重新定义一条规则，或者被迫使用其他的选择器，也许能够暂时达到目的，但灵活性是很差的，万一又有变化，就不起作用了，这就是为什么常常提到可维护性。\n\n另外，不使用元素选择器也会增加代码的可读性，我们为划分好的不同模块采用不同的命名，增强可读性的前提下，也很好的避免了冲突。\n\n好，接着说，很多人会谈到嵌套的问题，一般说法是最好不要多于三层或者四层，意义在于哪里呢？这得从css的解析方式说起，它是从最右端往左进行解析的，层过多自然会耗掉更多解析时间，这也同样跟上面说的那个吻合，不仅仅是因为解耦才不使用元素选择器，如果使用元素选择器，特别是在最右一层的话，它会遍历完整个页面中的同类元素，再往上寻找，这显然造成了本来可以避免的问题。\n\n还有哪些css2.1的选择器可以发挥妙用呢？\n\n比如：兄弟选择器“+/~”、伪类选择器’:selector’、伪元素选择器’::selector’、群组选择器”.a.b.c” 相比css2.1，css3新加入的东西的确是让人兴奋的，特别是一些属性选择器和一些伪类、伪元素选择器，能够让我们更加灵活的去控制页面样式，减少给html打的补丁，甚至是限制用户行为，比如selection、resize等。\n\nCss4选择器？是的，它会在css3的基础之上继续加强，具体不细谈。给出两个链接大家可以去看看。\n\n[css4-selectors](http://css4-selectors.com/selectors/)\n\n[w3 selectors-4](http://dev.w3.org/csswg/selectors-4/)\n\n以上结合页面的规划，谈了一下，用什么选择器和怎么用，代码怎么组织的问题。\n\n再简单谈谈工具、框架和一些需要注意的点：\n\n**1、 用工具可以做什么**\n\n简而言之，提高工作效率，包括：\n\n预处理工具less、sass、stylus，编程的方式来写css，有变量、嵌套、函数、条件、算术、词法作用域等等\n\n[Less](https://github.com/less/ http://www.lesscss.net/)、[Sass](http://sass-lang.com/ https://github.com/sass/sass) \n、[sassguide](http://www.w3cplus.com/sassguide/)、[Stylus](https://github.com/stylus/stylus http://www.zhangxinxu.com/jq/stylus/)\n\n更多工具: http://www.oschina.net/news/22745/8-css-preprocessors-speed\n\n后处理工具Autoprefixer、Css Grace\n\n用处\n\n* 不改变css原生写法\n\n* IE hack处理兼容\n\n* 添加css3前缀\n\n* 检查错误（哪些误用？例如：float: left/right 或者 position: absolute 后还写上 display: block;更多请戳[哪些误用](http://www.zhihu.com/question/20979831)\n\n[CSS Grace](https://github.com/cssdream/cssgrace)\n\n[Autoprefixer](https://github.com/postcss/autoprefixer)\n\n还有代码格式化工具、代码压缩工具等等，都是能够帮助我们写出更优雅的代码。\n\n谈到工具了，要说的一点是，我们做技术的要敢于、乐于尝试，现在还有很多人习惯于写css，而不去用这些工具，不觉得它们有什么好处，反而觉得学习起来麻烦，还有些朋友，接触一下，知道有变量，可嵌套，其他的觉得太复杂没做深入了解，就直接选择放弃了，前端技术和工具层出不穷，如果是这样一个状态的话，无论是对自己技术的提升，工作方式的优化等等，都是不利的。其实没有想象那么复杂，好处却是大大的。\n\n**2、 框架的使用**\n\n或许每个人都能脱口而出的一个是bootstrap。当然，还有其他的框架，我并不是给它打广告。\n\n为什么要用呢？首先还是节省了时间，不再做重复劳动，然后，它是做过了各种的测试，集大家的力量，在项目中经过考验的，对很多设备和浏览器都适用，并且有它的一套UI设计在里面，这样就可以为我们省去了很多的劳动。\n\n**3、 需要注意的点**\n\na、 文件个数和大小，有一个文件就会向服务器发送一个请求，显然，不宜过多，一般以不超过四个为宜，所以，有时候我们在开发过程中可能用到多个文件，发布的时候会进行合并和压缩，就是这个道理。\n\nb、 文件是否有加载的必要？这种情况常见于需要兼容低版本IE，很多人是直接写css hack在文件里面，如果项目比较大，需要用到的代码文件比较多，那显然没有必要为其他浏览器以及高版本浏览器去加载兼容代码。一般倾向于写条件判断语句来选择性加载。\n\n不过可能会遇到问题，比如IE10不识别，这篇文章里给出了解决方案，大家可以参考一下[IE10不识别的解决方案](http://www.stepday.com/topic/?690)\n\n## Css的出轨\n\n大家都知道，随着css3的肆虐，很多效果我们不需要用ps来做了，比如border-radius、box-shadow、opacity、filter、text-fill-color、text-stroke、box-reflect等，这让我们只使用代码就能写出很多好看的效果，也增加了灵活性。\n\n样式性标签淡出历史舞台，如：居中、加粗。\n\n动效标签css替代，如闪烁、跑马灯。\n\n联姻js动起来transform、transition、animation\n\n既然css能做的事情越来越多，越来越灵活，那么不得不说的一个话题就是“纯css”实现，很多年了，高频中枪的有：二级导航、tab切换、手风琴、轮播图等。\n\n那么纯css有什么好处？首先你不会js的话，那肯定是有好处的，这个不说，然后就是，它可能更容易控制，代码文件会更小。当然，凡事皆需根据实际情况权衡，大家自己思考。\n\n## “无所不能”的未来\n\n为什么说它无所不能，先来看看布局：\n\n适应多终端\n\n媒体查询Media query、流式Flow、伸缩盒Flexbox、计算布局calc、网格布局Grid、多栏布局Multi columns等等；\n\n另外，因为一些属性的出现，页面中的元素打破了总是方方正正的形象。\n\n几个戴表：transform、border-radius、 multiple backgrounds、shapes、appearance、@font-face等等\n\n形状可以是任意的。字体可以是多样的。 很多东西都不再拘泥于单调的形式，这给我们带来了无限可能，就看你的思维是否被局限住！~\n\n听说还有pointer-events;will-change;\n\n还有变量，好吧，说high了。不管它们最终有无，最终能做些什么事情，css都还在向前推进着，或者新的选择器，或者新的属性、属性值。我们能做的，就只有期待！~\n\n这次就先谈到这里吧，人的认识、思想和方法论都会随着时间的推移，经历的增多发生一些微妙的变化。相信我还会再谈的，那下次见？~\n\n欢迎订阅我的微信公众号：前端周末\n\n欢迎加入我的企鹅群：152128548","tags":["CSS"],"categories":["CSS"]},{"title":"浅析line-height和vertical","url":"/2015/06/19/front-home-lineheight-and-vertical/","content":"\nline-height\n\n通常被我们用来干嘛呢？\n\n比如：height：*px;line-height:*px;是这样的么？我们常常用它来对文字进行居中。为什么这样就能居中呢？因为行高是元素基线之间的距离，行高会减去字体的高度然后上下平分去建立一个行内框（inline box），如果这个时候高度和行高一致，自然就体现为居中。那么它有什么可研究之处呢？\n\n比如：有时候设置了line-height却仍然不能将内容居中怎么办？设置了vertical-align：middle;没用是为什么？\n\n先来概览一下：line-height\n\n在块级元素，将line-height属性指定的线框元素中的最小高度。\n\n在非替换行内元素，行高指定用于计算行框的高度值的高度。\n\n在替换的行内元素，如按钮或其他输入元件，行高没有任何效果。\n\n这里出现了应该注意的第一点，行高作用的是高度。\n\n意思是可以不设置height？Yes。我们通常会认为当我们给一个空的容器填充了文字，即使我们没有给容器设置高度，文字也会把容器撑起来，其实不是，它是由和文字相关的一些属性的设置以及line-height：normal来决定的，而且这对块级元素和行内元素的影响不同。\n\n先给出试验的原始图作为参考\n\nCode \n\n![](front-home-lineheight-and-vertical/1.jpg)\n\n每个div设置了20px内边距，为下图的绿色部分，font-size：16px;\n\n效果 \n\n![](front-home-lineheight-and-vertical/2.jpg)\n\n我们给p设置line-height：0；overflow：hidden；\n\n![](front-home-lineheight-and-vertical/3.jpg)\n\n可以看到，此时p“消失”了。但也会惊讶的发现span这里完好无损，来看浏览器告诉我们的\n\n![](front-home-lineheight-and-vertical/4.jpg)\n\n是的，它的line-height同样被改变了，但是高度却不为0.这就是对行内元素的影响。行内元素的行高会跟着改变，但是它的高度不会变。\n\nline-height取值\n\n值：\n\nnormal\n\ninherit\n\n带单位的数值，如:20px(同样可以使用存在且合理的em、rem等);\n\n无单位值，如:2;\n\n百分比值：如:150%;\n\n和什么是相关的？\n\nfont-stretch、font-variant、font-style、font-weight font-size、font-family\n\n一个个的来看 Normal=？ 在什么都不设置的情况下，normal是多少？应该是1吧？就像我们猜测z-index在不设置的时候默认值是0一样。看看便知\n\nNormal\n\n![](front-home-lineheight-and-vertical/5.jpg)\n\n1\n\n![](front-home-lineheight-and-vertical/6.jpg)\n\n不一样啊，那100%呢？\n\n![](front-home-lineheight-and-vertical/7.jpg)\n\n看起来纹丝未动哈。可能有人会问，1和100%不是一样的么？！可真不一样，后面讲。\n\n那normal是多少？\n\n不能靠猜哈！它在不同浏览器中的计算值也是不同的，有资料说它取值是在1.1-1.2之间，css权威指南上也说是1.2倍，据我测试，在chrome下，等于line-height：1.32;\n\nInherit\n\n继承，跟上例相关，line-height会怎样继承？先看数值\n\n数值分为带单位和不带单位的\n\n带单位，其实这个就很直观了，你定多少它就是多少，就跟我们js当中所说的字面量一样。But，只是对于px、pt等具有物理标准的单位，其他的后面讲。\n\n不带单位\n\n这里面就牵扯到一个继承的问题，上面有提到1和100%是不同的，原因就在于此。不带单位的数值，它是将这个数值作为比例传递了下去，至于后代的行高是多少，则是由后代的font相关属性决定。咱看图举栗子~\n\n其实上面已经贴了一张图。那里的1和100%一样的，为什么呢？因为font-size被继承了下来，这个时候继承的是数值还是比例就没有区别了。 如果是不同的呢。\n\n比如我mod行高设置为1.5;p的font-size：18px;再来看\n\n当我们只改变了数值\n\n![](front-home-lineheight-and-vertical/8.jpg)\n\n这看起来好像没有太大变化，但我们来看二者的区别\n\n![](front-home-lineheight-and-vertical/9.jpg)\n\n![](front-home-lineheight-and-vertical/10.jpg)\n\n这时p的行高line-height=18*1.5=27px，span部分的行高 line-height=16*1.5=24px;\n\n是的，当line-height为不带单位的数值时就是这样。\n\n那么。。。当它是1.5em的时候会是怎样的？会是一样的么，我们给它们的父级元素设置1.5em； 如下：\n\n![](front-home-lineheight-and-vertical/11.jpg)\n\n呕吼！看来浏览器这时候没有理会p的18px，而是用了父级的16px。\n\n下面看百分比\n\n百分比和无单位数值从数学的角度来看没什么区别，这可能也是多数人看到这两个最困惑的一点，人总会根据自己的经验来判断一些东西。往往具体的事物有着具体的规则，会有差别。对于line-height来说，前面说了无单位值是继承了比例，百分比则是继承了行高的值，也就是说，这个时候父元素的行高决定了下面所有，当然，前提是子元素没有定义行高。\n\n为了验证我们的想法，给父元素设置line-height：150%;/子元素不设置，如果如我们所料，行高应该都是24px，来看结果，\n\n![](front-home-lineheight-and-vertical/12.jpg)\n\n![](front-home-lineheight-and-vertical/13.jpg)\n\n看来是这样的，当是百分比的时候，它们继承了父级的line-height值。\n\n好了，至此，我们看到的都还是正常情况，那不正常情况呢？比如\n\n行高小于字号\n\n我们给line-height:0.5; 这个时候会出现什么情况呢？\n\n![](front-home-lineheight-and-vertical/14.jpg)\n\np的行高会缩很多，同时高度也跟着行高变化，但span的高度未发生变化。正如上文所说，它的高度不会被line-height改变。\n\n但行高确实变了\n\n![](front-home-lineheight-and-vertical/15.jpg)\n\n做一个小结：\n\n1、行高会影响块级元素的高度，而不会影响行内元素的高度。\n\n2、1和100%和1em不同，虽然它们看起来都是比例，但对象不同，所传递的东西不同。1是把比例传递给后代，100%是将计算后的值传递给后代，1em则会使元素以其父元素font-size值为参考来计算自己的行高。\n\nvertical-align\n\n好的，下面看看vertical-align吧，也该它登场了。\n\n通常我们用它是干嘛？是的，有时候我们想很爽的像text-align那样用它来进行垂直居中，因为居中的用处实在太广了，它代表着一种对称美。\n\nValue\n\n长度 通过距离升高（正值）或降低（负值）元素。’0cm’等同于’baseline’\n\n百分值 – % 通过距离（相对于1line-height1值的百分大小）升高（正值）或降低（负值）元素。’0%’等同于’baseline’\n\nbaseline 默认。元素的基线与父元素的基线对齐。\n\nsub 降低元素的基线到父元素合适的下标位置。\n\nsuper 升高元素的基线到父元素合适的上标位置。\n\ntop 把对齐的子元素的顶端与line box顶端对齐。\n\ntext-top 把元素的顶端与父元素内容区域的顶端对齐。\n\nmiddle 元素的中垂点与 父元素的基线加1/2父元素中字母x的高度 对齐。\n\nbottom 把对齐的子元素的底端与line box底端对齐。\n\ntext-bottom 把元素的底端与父元素内容区域的底端对齐。\n\ninherit 采用父元素相关属性的相同的指定值。\n\n它对哪些元素起作用呢？\n\n只有一个元素属于inline或是inline-block（table-cell也可以理解为inline-block水平），vertical-align才会起作用。\n\n那么它是什么，怎么起作用的？\n\n从各种取值的描述来看，它对于元素本身的表现并无影响，而是影响的在垂直方向的位置，而这个位置是其自身相对于上下文的元素的位置。\n\n那么就好理解一些了，找找位置即可。\n\n默认值为baseline，即子元素的基线和父元素基线对齐。因为让所有文本元素的底端对齐是再正常不过的需求。其他的呢？\n\n我们拿label来看，为了能看得更清晰，我们用一个input来对比，这恰巧也是我们的常用组合。\n\n把label的font-size设置为30px。\n\n值当中有几个是比较好理解的，比如\n\ntop \n\n![](front-home-lineheight-and-vertical/16.jpg)\n\nbottom \n\n![](front-home-lineheight-and-vertical/17.jpg)\n\ntext-top \n\n![](front-home-lineheight-and-vertical/18.jpg)\n\ntext-bottom\n\n![](front-home-lineheight-and-vertical/19.jpg)\n\nmiddle \n\n![](front-home-lineheight-and-vertical/20.jpg)\n\n那么sub和super该怎么理解呢？\n\n这个在某些时候会引起误解，因为你可能设置的super的时候，文字看起来比sub的位置还低，这是因为字体和行高的影响。其实大家是不是会对它们有些眼熟呢？对，html有两个标签是用来负责设定上、下标的，那么这两个是不是同理？ 来看看便知，因为我们给父元素定了无单位数值的line-height，所以字体大小会影响行高，进而影响到基线和对齐的效果，所以我们将font-size:16px;来看效果。\n\nsuper\n\n![](front-home-lineheight-and-vertical/21.jpg)\nsub \n\n![](front-home-lineheight-and-vertical/22.jpg)\n\nIt’s true!~\n\n对了，还有百分比和长度\n\n百分比的位置依然是从基线算起，而不是我们已经习惯了的顶部。正值会使元素向上移动，负值会使其向下移动，这跟其他值比如margin和定位又不同。当其顶部或者底部超过了同级元素的最大行高，则会影响到整体的高度。\n\n长度和百分比类似，以基线为标准，正值上移，负值下移，超出最大行内框的高度则撑起外围容器的高度。\n\n想玩儿的话，张老师有个页面可以玩玩儿[vertical-align](http://www.zhangxinxu.com/study/201005/verticle-align-test-demo.html)\n\n另外大家可以到MDN和strick上面看看相关的内容\n\n[mdn-line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) \n[css-tricks-line-height](https://css-tricks.com/almanac/properties/l/line-height/)\n\n\n[mdn-vertical-align](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) \n[css-tricks-vertical-align](https://css-tricks.com/almanac/properties/v/vertical-align/)\n\n一篇baseline的文章参考[baseline](https://www.qianduan.net/css-baseline-road/)\n\n好了，就先聊到这儿吧，可能会有疏漏，欢迎拍砖！\n\n可关注公众号：前端周末 css3china，会有更多好东西推送。\n\n也可以加入：152128548和我们交流，这里有很多高手哦！~","tags":["CSS"],"categories":["CSS"]},{"title":"z-index和zoom这哥俩","url":"/2015/06/12/zindex-zoom-and-the-brothers-home-front/","content":"\n今天为什么要谈这个呢？出于一个页面仔的“窥探”欲吧，也可能不是，因为这些本来就是需要知道的，只是可能没有引起太多人注意。\n\n当然，每个“是什么”的背后都有一个“为什么”，很多人都遇到过“设置了z-index却无用“的问题。\n\nz-index是干嘛的呢？——设置元素在z轴方向的层级。那么怎么用它才是正确滴捏？\n\n先来看正常情况下\n\n    <div class=\"mod\">\n      <h2>z-index</h2>\n      <div class=\"up\">我是上层，哈哈</div>\n      <div class=\"down\">我是底层，呜呜</div>\n    </div>\n\n    css\n\n    .mod{\n    background: #BEFFFC;\n    /*position: relative;\n    z-index: 0;*/\n    }\n    up,.down{\n        height: 50px;\n        left: 0;\n        }\n    .up{\n        /*position: relative;*/\n        top: 0;\n        background: rgb(123,213,132);\n        /*z-index: 0;*/\n      }\n    .down{\n        /*position: relative;*/\n        top: 0;\n        background: rgb(102,134,232);\n    /*    z-index: 0;\n    */  }\n\n如图\n\n![](zindex-zoom-and-the-brothers-home-front/1.jpg)\n\n1、我们把z-index的注释去掉\n\n纹丝不动\n\n2、把up和down的定位加上\n\n依然纹丝不动，好吧是的，这个时候不动是正常的，它就不该动。\n\n3、为了能看出差别，父容器定位加上，子元素绝对定位\n\n如图\n\n![](zindex-zoom-and-the-brothers-home-front/2.jpg)\n\n第一种情况出现了，视野之中，只剩下down，到这里为止，似乎也没跟我们要说的扯上什么关系，但其实是有关系的，我们给它们设置了z-index:0;那么它们现在就是在同样的层级，当是同样层级时，后面会覆盖前面。\n\n再来看\n\n4、去掉定位，使用margin负值把down拉上去\n\n![](zindex-zoom-and-the-brothers-home-front/3.jpg)\n\n设置z-index，up为2，down为1，纹丝不动\n\n改为定位\n\n![](zindex-zoom-and-the-brothers-home-front/4.jpg)\n\n旧景重现，but这个时候up在down上面。这是第二个注意点，需要使用定位，才能让z-index起作用！\n\n那么，哪种定位呢？我们来试试一个相对一个绝对，为了看得方便，给down设置绝对，并设置top值。层级仍然不变\n\n如图\n\n![](zindex-zoom-and-the-brothers-home-front/5.jpg)\n\n如我们所愿，改一下试试，up为1，down为2\n\n如图\n\n![](zindex-zoom-and-the-brothers-home-front/6.jpg)\n\n哇偶，没问题\n\n5、那如果想跟父元素调调呢？\n\n如元素设为2，子元素设为1\n\n如图\n\n![](zindex-zoom-and-the-brothers-home-front/6.jpg)\n\n啊？！我真的没骗你，代码已经改了，可是为什么是这样，好吧难道是值不够大？那再改改，父元素改成10，还是不动，100，还是不动，使大招，999！！偶，还是不行，要吐血了。我们总是想使用暴力手段来尝试一些错误的东西，实际上是在跟自己过不去~这是为什么呢？\n\n因为，只要你的子元素使用了大于等于0的值，那么它就永远在父元素上面，不管父元素设置了多么大的z-index值，不信？那么是不是我们给z-index设置为0，子元素设置-1就可以了？\n\n看图\n\n![](zindex-zoom-and-the-brothers-home-front/7.jpg)\n\n看来没有想的那么简单\n\n去掉父元素的z-index试试\n\n![](zindex-zoom-and-the-brothers-home-front/8.jpg)\n\n哇，它们消失了，那么这个时候父元素的z-index值是多少呢？借助浏览器来看一下\n\n![](zindex-zoom-and-the-brothers-home-front/9.jpg)\n\n好的，看来父元素跟子元素不玩儿这个，它们不互相攀比~\n\n6、还有一点，子元素的子元素会是个什么情况呢？\n\n我们索性来直接给它们里面直接套一层div，然后再看会是啥情况\n\n尝试设置up为2，down为1，up子元素为1，down子元素为2\n\n![](zindex-zoom-and-the-brothers-home-front/10.jpg)\n\n好吧，我们又和哈哈见面了，可以看出，子元素设置了什么不重要，只要父元素设置了更低的z-index值，则子元素是无能为力的。\n\n然而这就这样结束了么？别忘了我们刚才没有给mod设置z-index值的时候，up和down是什么表现？\n\n是的，那么尝试不给down设置值，而只给它的子元素设置z-index，为了看得更清楚，给down定位到偏下位置。\n\n如下，设置为1\n\n![](zindex-zoom-and-the-brothers-home-front/10.jpg)\n\n老朋友又见面了。。。\n\n设置为2\n\n![](zindex-zoom-and-the-brothers-home-front/11.jpg)\n\n哇哈哈，down的子元素就酱紫完成了对父元素和up的超越，为什么同时超越了up？别忘了，down是在up之后。\n\n那如果把父元素的z-index清掉，只比较子元素呢，是的，它们同样遵循着”同级后在上，谁高谁在上“的原则。\n\n好了，说了这么多，来个小结：\n\n1、z-index起作用的前提是定位，这一点很重要，很多人设置z-index不起作用就是因为这个，更容易忘的是父子层叠的时候。\n\n2、层级值的比较，只在同级元素或者同级元素的子元素之间，父子之间不会有这样的比较。\n\n3、只要是子元素有着大于等于0的z-index值，那么它就在父元素之上，想在父元素之下，就设置为小于0的值，并且父元素z-index值为auto；\n\n除此之外，还有一点需要注意，z-index的值不会继承，还有人说z-index的默认值是0，刚才大家看到的，不够严谨。\n\nz-index就说到这儿。\n\n其他可参考 z-index\n\n下面简单说说zoom\n\nzoom这个东西大家经常看到使用，而且是对IE浏览器使用。其实是用来缩放的。\n\n很多文章说它是IE专有属性，其实未必。在火狐和chrome下，它依然会起作用，其他的我没测，不好发表看法。\n\n这里是来自caniuse的兼容表\n\n![](zindex-zoom-and-the-brothers-home-front/12.jpg)\n\n另外两点表现比较诡异，\n\n1、缩放了高度，宽度未变\n\n2、缩放只是看起来，而并未对元素进行真正的缩放\n\n上述两点也是它跟transform：scale表现的区别所在。\n\n可以对它设置数值，如1，也可以设置百分比，如200%。\n\n那它可以用来干嘛\n\n触发ie的hasLayout属性，清除浮动、清除margin的重叠。\n\n有人说css3中它就会没了，显然不是，它还新增了一些东西，比如：\n\nzoom-in/zoom-out\n\n不要误会，它们是属性值，而不是属性，它俩是用来干嘛的呢？\n\n是改变鼠标的形状的，比如这样\n\nenter image description here\n\n具体可以看下张鑫旭的例子CSS3 cursor属性值zoom-in/zoom-out\n\n好了，由于时间紧迫，这篇文要结尾了。不知是否能够对你有所帮助，可能有所疏漏，下次有时间再来祥谈。\n\n欢迎关注微信公众号: 前端周末\n\n欢迎来这里交流：152128548","tags":["CSS"],"categories":["CSS"]},{"title":"小叙透明","url":"/2015/05/09/say-opacity/","content":"\n网页的历史不长，但是几经变化，不论是从布局，文字，颜色搭配，图标等等，都是有过诸多的演变，人们的审美不同了，或者说，一直在追求更美观的效果。\n\n拿一些细节方面来说，比如渐变，圆角，阴影，半透明，这几个应该是被用的最多，效果也很好的方法。其中前三个，都可以做到比较好的退化，甚至说牺牲，因为很多时候，即使它们在一些浏览器里有，另一些浏览器里没有，看起来也能让人接受，不会产生太大的影响，半透明就不同了，透明和不透明的差别还是蛮大的，那么今天就来聊聊“透明”。\n\n透明还分为两种，**半透明的纯色** ，**背景透明的图片**。\n\n## 背景透明的图片\n\n大家都知道这个在IE6下会不支持，图片是有格式的，what格式会出问题？ 我们网页中常用格式jpg、png24/png8、gif，其中后面两者是透明的，而会出现问题的只是png24格式，见下图\n\n![](say-opacity/1.jpg)\n\n应该看出来了，它不仅仅是背景不透明还会出现比较明显的锯齿。 其实说到这里，想到一个问题，还管IE6干嘛。。。不过真有一部分需求是要管的，所以， 如果还有兴趣做了解的话，那么大家可以看看这篇文章 [使IE6下PNG背景透明的七种方法任你选](http://blog.csdn.net/mosliang/article/details/6760028)\n\n那图片就不用多谈了（好懒呐~）\n\n## 半透明背景色\n\nCss的什么属性可以做到这点呢？\n\nOpacity：0~1，取值为小数（常见1位小数，多位亦可）。纯控制透明度，适用IE9及以上浏览器和其他主流浏览器。\n\nfilter（IE私有属性），写法filter:alpha(opacity=50); 适用IE8及以下浏览器，产生类opacity效果。\n\nRgba：控制背景色和透明度，适用IE9及以上浏览器和其他主流浏览器。\n\n低版本IE使用滤镜，例如： filter:progid:DXImageTransform.Microsoft.Gradient(startColorStr=#80000000,endColorStr=#80000000);\n\n其中参数值是 #AARRGGBB 形式的，AA是代表不透明度的十六进制，00表示完全透明，FF就是全不透明，化成十进制的范围就是0~255，剩下的 RRGGBB 就是颜色的十六进制代码。\n\n其实我在想怎么不能有一个东西搞定所有？事实证明这是有难度的，技术在发展，标准在行进，厂商支持也不同。\n\n## 哪里会有问题呢？\n\n不少需求里面都会需要用背景透明，那么该怎样去选择这些透明来为自己服务呢？\n\n现在做技术的同行有些是“实用主义”，不管方法是怎样，可以达到目的就行；有些是“能用主义”，只要找到一种方法行，就用了。这两种情况一般都不会去深究，只看效果，通常遇到这样的问题的路径就是想起“opacity”一用，好像不对，一下都变得朦胧了，比如这样\n\n![](say-opacity/2.jpg)\n\n然后查查还有什么比较好的解决方案，找到了rgba，一用果然不亦乐乎，\n\n再一看，浏览器支持貌似不好啊！连IE8都挂了。\n\n## 那到底该怎么办！\n\n其实上面已经给出办法了不是么，只是需要说的是二者的不同使用场景，\n\nopacity是用来控制透明度，注意，前面没有“背景”二字，所以，它以及它的子元素都会受到影响。那么这种就适合做啥呢？对了，ps中的蒙板效果。你还会嫌弃它使内容也透明吗？别的想做还难呢，正所谓，各司其职~\n\n有些人应用opactiy，多加了一层在外面当做“背景”，然后使用定位把不想透明的内容叠放在上面，此法实为下策。\n\nrgba是在rgb色值的基础上，加了alpha通道的透明度，所以，它控制的是背景色。\n\n那要使得背景透明，内容不透明，该怎么做呢？\n\n**rgba+IE滤镜**\n\n只是有几点需要注意：\n\n1.IE6、7不认识alpha，需要激活IE的haslayout属性(如：*zoom:1或者*overflow:hidden)，让它读懂filter:Alpha；\n\n2.滤镜能够支持到IE9，那么IE9到底该听谁的？会重复的起作用？是的，所以，还是需要区分开来，即使是平时写浏览器兼容的时候也是最好做个区分，不要让那些代码在所有浏览器里都加载，虽然它们起不了什么作用。\n\n3、在父元素position：static;子元素position：relative;的情况下子元素才不会受影响，否则其仍将变成了透明的。\n\n代码如下：\n\n    css:\n    .solve{\n      background-color:  rgb(190, 255, 252);\n      filter: alpha(opacity=20);\n      background: rgba(190, 255, 252,0.5);\n      *zoom:1;\n       }\n     .solve h2,.solve img{\n      position: relative;\n       }\n    html:\n    <div class=\"solve\">\n    <h2>解决方案</h2>\n    <img src=\"images/pngdemo_8.png\">\n    </div>\n\n对比效果\n\n![](say-opacity/3.jpg)\n\n没做特殊设置的下场\n\n![](say-opacity/4.jpg)\n\n需要指出的是，rgba（）它是用来定义色值的，也就是说，它不专属于背景，比如我们偶尔也会碰到透明的边框等等，也是同样适用的，除了在个别浏览器下可能支持会有小的差异。\n\n还有一种不常用的HSLA，它和rgba异曲同工，比如background:hsla(165, 35%, 50%, 0.2);这样，设置颜色和透明度。 具体如下：\n\n使用色调Hue(H)、饱和度Saturation(s)和亮度Lightness(L)来设置颜色。\n\nHue衍生于色盘：0和360是红色，接近120的是绿色，240是蓝色。\n\nSaturation值是一个百分比：0%是灰度，100%饱和度最高。\n\nLightness值也是一个百分比：0%是最暗，50%均值，100%最亮。\n\n好了，这次聊的不多，不过还是希望能够帮到一部分朋友。问题多多，来日方长，咱下次见呗！~\n\n推荐文章：[css实现背景透明文字不透明](http://www.cnblogs.com/PeunZhang/p/4089894.html)\n\n欢迎关注微信公众号：css3china 前端周末\n\nQQ：152128548","tags":["CSS"],"categories":["CSS"]},{"title":"我的“深jsconf2015”之旅","url":"/2015/05/09/shen-js-2015/","content":"\n说实话，我似乎没有理由来这一届深js，首先我不擅长，然后我的职位是重构，工作当中用的也不多，在过去的两年里基本上主要精力都在html和css上。由于种种原因，虽然买了不少js的好资料，也断断续续的在学习，但依然没有任何能拿得出手的东西。也就稍微会点jq之类，所以，在高手云集、群星璀璨的jsconf上，客观上来讲似乎不能get到多少精华的东西。还有一点更现实的问题是，花了500银两，是疯了么？好吧，接下来说说理由和感想。\n\n理由一：在深圳，这次大会有来自全国各地，乃至世界各地的人们，当有很多人背着包，拉着行李箱，在去往机场或者车站的路上的时候，我已经到了家，所以，没理由不来。\n\n理由二：两年前决定从事前端，却一直没能成为一名真正的前端，而是只会写写页面，一点简单交互和动效的伪前端，虽然如此，依然在努力学习着以弥补自身的不足，就我个人的经验而言，你可能在自己成长过程中，遇到各种突如其来的困难和考验，每一次都能让你找到自身的不足，都能有所进步，而这些困难和考验有些是无法准备，也是无需准备的，正如这次大会，虽然我不具备完全理解大牛们所讲的东西的能力，但如果它能给我带来启发，让我能够站在更高层次上去认识它，或者帮助我拓宽视野，就值得，事实上，它给我的，远远比我想象的多很多，让我觉得特别的值。所以，来对了\n\n都有什么感触呢？\n\n1、首先要承认的是，使用全英文的外国友人以及尤小右所讲的内容，我几乎完全没有get到，曾经考过英语6级的我来说也是“然并卵”，所以，这让我有了更强的紧迫感去加强自己的英文，虽然我每天也并不需要跟外国人交流，但仍有很多的英文资源是可以学习的。而且在将来，谁又敢说不同外国人交流合作呢？到那时候再努力，晚矣\n\n2、虽然如此，我仍然努力的去跟随着演讲者的稿子和它所敲的代码，去观察和体会，两天21位讲师，加上几波的lighting talk让现场的数位观众有机会上台做短分享（他们也都是各大公司的技术能人哦~），信息量真的超级大，超级丰富，所以，有人说，这种大会就是各种大神聚在一起聊聊天，吹吹水，叙叙旧，no！\n\n3、视野和想象力的局限性，很多东西我们看不到，就觉得它可能还没有，不存在，很多东西我们没做过，就认为它做不到。这样的大会就是给了我们一次机会去看看，有些东西其实是存在的，其实是可以做到的，就是让我们意识到自身目光的局限性。比如说，至今还有人认为js就是用来做网页上面那些动效的，有了node之后，认为他可以做服务端，但是它还可以作用于硬件。\n\n4、我一直在思考的一件事情，为什么我没能很好的掌握js，实践的少这是其一，其二就是，它跟css在使用和方法论上面的差异，或许这也是一些人说的所谓“程序语言”和“非程序语言”的差异，我们写代码是用来实现一些需求的，把需求转换成我们所用的技术所能做的事情，抽象成某种模型之后，才是技术实现，所以，这就是中间所隔着的那座山。再举个更加易懂的例子，当给你一个网页，第一眼看上去，csser和jser所看所想肯定有很大不同，一个注重表现、布局，一个注重行为、数据，然后再顺着两种技术的不同路线接着往下走，这就是我说的区别所在。\n通过这届大会两天的熏陶，我似乎在“远离”着css的工作方式和逻辑，在强迫着自己去适应js的世界，总得来说效果还不错。\n\n5、现场来了很多牛人，尤雨溪、贺师俊、徐飞，还有各大公司的骨干，还有一些外国大牛等等等等，恕我不能一一列举出来，你不仅能够见识到它们所分享的技术方案，也能见识到他们现场coding的风采。\n\n6、不得不提的是，现场来了很多大学生，甚至来了一位高中生，而且当时就坐在我前面，我真是惊呆了，这不得不让我这个已经出来工作还为500块犹豫的人感到惭愧。更意外的是，他可不只是来凑热闹的，他知道很多东西，也用过很多东西，好吧，或许这不能“怪”他太强，而是我太弱。在这里你不仅能够感受到年轻人的学习热情，还有一些从业十几年的人那种在谈论技术时候的激情，吃饭的时候，坐下闲聊的时候，甚至有些结束之后另外约别的地方聊到很晚。可能知音难觅吧，所以有人说github是世界上最大的同性交友平台，很多人在上面相互f**k~\n \n\n好吧，最后来点小结，会场有很多公司赞助的那啥和那啥我没拿，有打折卖的书，忍住了没买，前面也说了我已经买过很多，不过…这次大会抽了四次奖，抽了那么多人，我居然没有中，就我今年的运气来说，这很不科学，最后有三十本书让人随便拿，然后，还没等一等奖的人领完奖，身边就有人冲了出去，我…也冲了出去，抢到一本，哈哈！\n\n有一点遗憾就是，还没来得及跟情封和鬼懿合张影留个念，他们就提前半天走了。（看来是嫌我红包给得少，哈哈~）\n\n和很多人一样，这次大会多少会有一点“见到很多大牛”真身的一种满足感，但是，还没有见到我想见的全部的人，再加上这次大会的精彩程度和满满的收获，让我对下个月在“魔都”上海举办的第二届cssconf更加充满了期待，所讲的主题全都是我感兴趣的哦！你呢？约吗？~~\n\n最后送几张图\n\n![](shen-js-2015/1.jpg)\n\n![](shen-js-2015/2.jpg)\n\n![](shen-js-2015/3.jpg)\n\n![](shen-js-2015/4.jpg)\n\n![](shen-js-2015/5.jpg)\n\n这位就是全场唯一的高中生\n\n![](shen-js-2015/6.jpg)\n\n\n","tags":["分享交流"],"categories":["分享交流"]},{"title":"图片以及其他替换元素的空隙问题","url":"/2015/04/18/img-ele-gap/","content":"\n今天来聊聊图片，当然，对于web来说，图片是个大命题，多大呢？要多大有多大~ 这里只谈它是怎么“不听话的”，然后让它乖一点。\n\nWeb的世界里有很多问题，与之对应的基本也有很多情景和对策。那么问题就来了，我们遇到某种情景和找到的对策也都具有偶然性，下面来挑很多人都遇到过的一种情况说说。\n\n上篇文章我们谈了inline-block的空隙，这篇文依然是聊空隙。通过上篇文，我们可以看出，其实空隙和元素本身并无直接关系，因为它真的就是“空隙”。但是小小的空隙却常给我们带来小小的困惑和麻烦。\n\n场景：“这是怎么回事啊，我什么都没有给图片设置，为什么这里有个空隙？！然后，margin、padding、border、outline…（七大姑八大姨）全都去掉了，为什么还有？！肿么办呐？！”\n\n对于以上场景你是否熟悉捏？~颇有病急乱投医，reset掉它全家的意味哈！\n\n再稍微分两种情况来说（其实没啥区别），一种是img“裸奔”，另一种是被其他元素包裹，比如div或者li等。\n\n“裸奔”代码如下：\n\n    <div class=\"img_list\">\n        <img src=\"images/xiang01.jpg\" alt=\"\">\n        <img src=\"images/xiang02.jpg\" alt=\"\">            \n        <img src=\"images/xiang03.jpg\" alt=\"\">\n        <img src=\"images/xiang04.jpg\" alt=\"\">\n        <img src=\"images/xiang05.jpg\" alt=\"\">            \n    </div>\n\n实现如下：\n\n![](img-ele-gap/1.png)\n\n聪明如你应该看出端倪了对吧？是的，每张图片的右边如预期般出现了空隙，但事实仅仅如此么？~ 我们把容器缩小看一下 duang~\n\n![](img-ele-gap/2.png)\n\n原来不只是右边有，下面也有？似曾相识吗？\n\n**方法一：font-size：0；**\n\n是的。“音烂不唠嗑”那家伙好像也是有空隙，那我们用其中一种方法把它消除掉试试，把font-size设置为0；\n\n![](img-ele-gap/3.png)\n\n呜呼，果然，那这是第一种方法。\n\n**方法二：float**\n\n由于float能让元素脱离正常文档流，可谓有摧毁一切的架势，这里也不意外，使用float就可以使他们消失于无形，如果赶上你制作图文混排文字环绕的效果，那就是一举两得了~\n\n**方法三：vertical-align：XX；**\n\n或许你会有点奇怪，为什么是XX？没错，有些文章中有说设为“top”，有些文章中说用“bottom”，可是在css如此的精彩世界里，你会对这么一个简单的答案满足么？总会多问几个why？然后，you try try 便会发现，，原来设置top|bottom|middle|text-bottom|text-top等都是可以消除掉这个空隙的，但需要注意，往往页面中不是一个图片孤立的存在着，设定不同的值可能会对其他的内容产生不同的影响，这里不细说，具体请各位去了解下vertical-align方面的东东（下面有个张老师的链接）。至于为什么vertical-align有除掉这个空隙的作用呢？\n\n据不完全考察，图片文字等inline元素默认是和父级元素的baseline对齐的，而baseline又和父级底边有一定距离（这个距离和 font-size，font-family 相关），所以设置 vertical-align的某些值可以避免这种情况出现。你可以试一下设置一个具体的负百分比值也行哦~\n\n**方法四：display：block；**\n\n为什么这种方法是可行的呢？其实这个方法跟方法三和方法二有着某种微妙的联系，what？莫急，先来说跟方法三有何联系，方法三里，扯到了baseline，也扯到了vertical-align，但没有扯一扯它在哪些元素上起作用，是的，对于block级的元素，它们是玩儿不了的，也可见张老师牛奶/果冻/坚果，故而，设置为block，它就干掉了空隙。跟方法二的关系是，不知大家是否注意到行级元素在设置float之后，具备了块级元素所具备的功能，比如设置宽高，内外边距等，所以，浮动，效果跟此法类似。 当然，鉴于block之后会改变它本身inline的表现，有些朋友可能会考虑inline-block，but这样是不凑效的，况且，它本身就存在这样的问题。\n\n**方法五：为父容器设置高度**\n\n现在才说起这个看起来平常的方法可不是我不够坦白，因为很多人可能从来没有遇到过图片空隙这样的问题，会觉得这是个挺难遇到的bug，其实不然，没有遇到右边的空隙是因为，只要它不是裸奔，譬如这样：\n\n    <ul class=\"img_list\">\n        <li><img src=\"images/xiang01.jpg\" alt=\"\">\n            </li>\n        <li><img src=\"images/xiang02.jpg\" alt=\"\">\n            </li>\n        <li><img src=\"images/xiang03.jpg\" alt=\"\">\n            </li>\n        <li><img src=\"images/xiang04.jpg\" alt=\"\">\n            </li>\n        <li><img src=\"images/xiang05.jpg\" alt=\"\">\n            </li>\n    </ul>\n\nimg被一个容器包裹起来，这里是li，还可以是别的，那么右边的空隙就没了，因为它是存在于img之间，这里有一层容器将其隔开。当然了，可能还会因为设置了margin值，从视觉上直接忽略了空隙的存在，不在讨论之列哈~ 没有遇到过下面的空隙，可能是无意间使用了能够消除掉它的方法，最平常和自然的就是设置父容器高度了。\n\n**方法六：无缝排列**\n\n这个方法和消除inline-block空隙同理，让它们紧密排列即可，不过同样，从代码的格式上来说不宜采取。\n\n讨论了这么多，貌似这种现象是img所独有的，是么？聪明如你可能又猜对，no！~ 可能大家都知道html的元素中有一类元素叫做替换元素，什么是替换元素呢，咱拿规范说说事儿吧；以img为例：\n\nThe IMG element embeds an image in the current document at the location of the element’s definition. The IMG element has no content; it is usually replaced inline by the image designated by the src attribute。\n\n这是规范里对img的描述，简单说来img元素没有内容，它是把来自src属性值的那个图片嵌入页面中。\n\n说到这里，是不是想起还有不少元素是这样的？比如input、textarea、select等等？\n\n是的，它们同样存在着缝隙问题，为什么呢，看图\n\n![](img-ele-gap/4.png)\n\n是否有秒懂的感觉？\n\n好吧，扯了不少了，里面提到了好几个东东，没有细谈，因为每一个挑出来都够喝一壶的，所以，不细聊了，重点还是帮助有遇到类似问题的朋友找到较合适的解决方法。文中可能有不当之处，还望指教。\n\n欢迎来这里交流：152128548 \n欢迎关注微信公众号：前端周末 ","tags":["CSS"],"categories":["CSS"]},{"title":"小谈inline-block的那点空隙","url":"/2015/04/11/inline-block-gap/","content":"\n最近有朋友遇到了这个问题，然后他百思不得其解：我没有设置边距呀，这中间怎么有空隙呢？我一看便知它用了inline-block。或许你会问，这个问题应该知道的啊，比较平常的问题。好吧，在两种情况下这是不易察觉的。\n\n**1、设置了父元素背景而子元素没有背景**\n\n**2、子元素本身就设置了外边距，而且远比可能出现的空隙要大**\n\n因为inline-block所引起的空隙本来就很小，没有“像素眼”的话，在这两种情况下就不易察觉了。\n\n## 那么inline-block是什么？\n\n大家应该都知道html元素从表现上来看，可分为“行级”和“块级”。\n\n那么inline-block就是兼具二者咯？yes，回答正确。不过好像又不完全对。\n\n这是w3c的定义：\n\nThis value causes an element to generate an inline-level block container. The inside of an inline-block is formatted as a block box, and the element itself is formatted as an atomic inline-level box.\n\n简而言之，元素自身仍然表现为行级，内部被格式化为具有块级盒特性，比如，可设置宽高，上下外边距等。\n\n回归正题，inline-block的元素间隙，间隙从何而来呢？\n\n是的，我们的确无需做任何的设置，它“自带”的就有。\n\n咱们先从解决办法入手：\n\n**1、除掉空白符**\n\n来看两张图\n\nhtml结构代码\n\n![](inline-block-gap/1.jpg)\n![](inline-block-gap/2.jpg)\n![](inline-block-gap/3.jpg)\n\n好的，看出来不同了么？两个ul中的li都使用了display:inline-block;But!!为什么第一个没有空隙而第二个有呢？ok，差别很明显，第一个列表中li全都是在同一行，没有换行，也没有任何的空隙，没有换行很明显，为什么强调没有空隙呢？因为的确是不能有空隙的，哪怕一个空格都不行，加上它就又成了下面那个死样子~额，等等，为什么加上一个空格就成了下面那个样子？Because 通常情况下，对于多个连续的空白符（空格，换行符，回车符等），浏览器会将他们合并为一个空白符。所以，一行空白和一个空白，效果上是一样滴。\n\n虽然如此，它可以解决，但是也不是我们推荐的方法，我想没多少人会为了表现去牺牲结构吧。\n\n**2、font-size：0;**\n\n咦？等会儿，吃错药了么，为什么会提到font-size，这里跟字体大小有什么关系？好的，上面提到空白符，那么它归根到底还是字符，既然这样，它就会受到font-size的影响？是的，设置为零它就没了？是的，那太哈皮了。停，有两点疑问，既然设置为0它会消失，那么设置不同大小，它也有不同大小？你真聪明，来看\n\nfont-size:14px;\n\n![](inline-block-gap/4.jpg)\n\nfont-size:20px;\n\n![](inline-block-gap/5.jpg)\n\n是不是明显看出差别了？\n\n嗯嗯~\n\n不过还是有两点需要考虑，父元素font-size设置为0，那就是还要为子元素重新设置font-size，还有就是，不要忘了有些浏览器目前是不支持font-size设置为0的，比如低版本chrome，还好，我们可以用 -webkit-text-size-adjust 这个私有属性来控制，当设为 none 时就支持字体大小为 0 了。\n\n**3、word-spacing**\n\n不要忘了letter-spacing和word-spacing这两个法宝，它们可是专门负责干这事儿的，从可行性上来说，二者皆可胜任去除空隙的重任，但是推荐使用 word-spacing，因为letter-spacing的绝对值如果大于间隙，内部内容会出现重叠，至于是怎么个重叠法，可以看看我做过的这个东东text-rotate，哈哈.当给word-spacing设置了一定的值之后，就会去除了间隙，这里需要设置的值同样跟字体大小相关。当然，不要忘了，上面字体大小在子元素中需要重置，这里也不例外，否则，就会出问题。\n\n**4、margin负值修复**\n\n相比其他几种方案，这种方案可能会被鄙视了~因为，怎么看都像是很勉强的去达到一种视觉效果，好吧我承认这么干过，不过很痛苦~\n\n**5、去掉中间的闭合标签**\n\n比如这样\n\n![](inline-block-gap/6.jpg)\n\n此处应有砖声~这也太不择手段了吧，但是这样的确是可以达到目的滴。但是为什么呢？我猜测，它是把后面的那些空隙算作了li的内部，而不是外部，这样它们之间就不会产生空隙。不过，同第一种方法一样，个人不推荐，对于有强迫症的人来说简直不可忍受有木有！！~\n\n上面说了这么多，可能还会有人提出不同的意见，比如说，为什么不使用float？\n\n好的，那什么时候适合用inline-block呢？\n\n一、float元素脱离了文档流，会对其周围的元素造成影响，而inline-block不会有这些问题。 二、想要通过设置父容器text-align：center让元素居中，这显然用浮动无法做到，这个在我另一篇谈不定宽居中方案的文章中提过。 三、使元素垂直居中，inline-block元素是沿着默认的基线对齐。浮动元素紧贴顶部。你可以通过vertical属性设置这个默认基线，但对浮动元素这种方法就不行了。\n\n好了，就说到这里了，欢迎大家补充其他的方法。也可以来这里跟我们一起学习交流：152128548\n\n另附两篇文章给大家作为参考\n\n[inline-block前世今生](http://www.iyunlu.com/view/css-xhtml/64.html)\n\n[去除inline-block元素间间距的N种方法](http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/)","tags":["CSS"],"categories":["CSS"]},{"title":"《web前端最佳实践》—高性能css","url":"/2015/03/30/《web前端最佳实践》—高性能css/","content":"\n性能，这个词如今被炒的很热，也是每个开发者，由“知道”、“会做”之后必经的一个“怎样做好”的阶段。性能关乎用户在不同设备和不同网络状态下的体验。也被多方面因素所影响。此文说说css方面怎样做到高性能。\n\n## 高性能css\n\nHtml和css本身的性能问题并不突出，在提高可读性和可维护性的前提下，如果能让代码运行和解析的速度更快，则是锦上添花了。\n\n**一、使用高效css选择器**\n\n简单来说，能被浏览器快速解析和匹配的css选择器，就是高效的选择器。\n\n首先要知道浏览器如何解析css\n\n举个例子：\n\n    .nav ul.list li div{}\n\n我们常见的思维是，先去找到nav这个类，再找类包含的ul，再找ul中类为list的后代所有li中所有的div，简而言之，就是从左到右。可事实是这样么？么？么？~\n\n事实是相反的！意味着什么呢？就是说它不是从第一个开始去慢慢的缩小范围，而是从div这个“裸奔”的盒子开始，相当于遍历，然后再找到li，以此类推，好吧不用我形容你应该知道这当中的消耗。理解这一原理非常重要，高效的选择器意味着匹配更快，查找次数更少。所以我们定义选择器时，应该让第一次匹配时的数量达到最少，并且让整体的匹配查找次数最少。\n\n以上这些解释恰恰遵循了这样一些原则\n\n（1）避免使用通配符\n\n（2）避免使用标签选择器和单个属性选择器作为关键选择器\n\n（3）不要在id选择器前加标签名\n\n（4）尽量不要在选择符定义过多层级，层级越少，同时也降低了css和dom结构的耦合程度，提高样式的可维护性\n\n（ps：老实说上面的这些“禁忌”你是不是都有犯过？~）\n\n做个小结，以上所说，有两点需要知道，第一点在开头就已经提到，css的性能问题表现的并不突出，特别是在小项目中，所以，可维护性为先；第二点是虽然定义id选择器，有唯一性的优势，但是一个页面只能定义唯一id，定义过多id会使重用性降低，维护更困难，所以不建议多用id。\n\n**二、css相关的图片处理**\n\n现在的网页当中，图片所占的比重以及它的重要性大家都知道。那么如何处理好图片以及如何为图片设置样式，才能让用户打开网页时体验更好呢？下面给出一些意见：\n\n（1）不给图片设置尺寸\n\n在我个人的从业经历当中，有过这样的情况，我按照设计稿做好了页面，交给后台去测试，他就突然跑过来跟我说：hi，你看，这儿出状况了，我一看，坏菜，图片出格了，我才想起没有给图片定义宽高（直接从设计稿里切的也不需要），然后就犯错了似的在css样式里定义了宽高。以至于后来我把这个作为下次再做页面时候的注意事项。当我看到这一条意见的时候，才更知一二。\n\n来看解释，第一、设计人员为了画面的精美，会制作一些超出需求尺寸的图片；第二、同一张图片可能会在页面不同地方多次使用，比如缩略图、正常图、大图。问题来了，如果图片原始尺寸和实际需求不同，在使用过程中就会存在性能问题，利用样式缩放会带来cpu的额外计算过程，增加了图片在浏览器的渲染时间，网络传输过程也会占更多带宽，增加下载时间。因此，最佳做法是，为需要的部分单独做一套图片，初始页面加载时就能更快展示。\n\n（2）使用css“雪碧图“\n\n是将零散的图片合并成一张大图，在利用css进行背景定位。好处是减少请求数，提高了图片整体的加载速度。\n\n但它也存在一些缺点：\n\n比如，多张图片合并成大图，需要精确计算，仔细的调整位置，单纯手工制作是一件很复杂的事情。（所幸现在有一些工具可以帮我们做）\n\n另外，维护过程复杂，要尽量让已有的图片保持原来的位置不变，如果是背景图的尺寸发生变化导致原有区域无法放置，那就只好放弃，如果非要在原有位置修改，则剩余的图片样式都需要修改，是很繁琐的过程。新加的图片最好放在最后面。\n\n还有就是使用不当会导致性能问题，最大的问题就是内存消耗。如果制作过程不做任何的规划，随意摆放，则可能会使图片变得相当大，从而很占内存。\n\n下面是一些最佳实践：\n\n1、在项目后期应用css sprite技术\n\n因为一般在开发过程中，会比较频繁的修改或者更换图片，如果这个时候使用sprite技术，就会增加很多开发成本。\n\n2、合理组织“雪碧”图\n\n如果要把所有的图片放在一张图上面，也会有不妥，维护方面也不会很方便。组织背景图主要按照模块和背景图的风格来划分。比如，作为展示的缩略图放在一起，评论、点赞、上下箭头等图标放在一起等。\n\n3、控制“雪碧”图的尺寸和大小\n\n因为大尺寸的图片会占用大量的内存，所以要控制在合理尺寸，推荐长宽相乘不超过2500，大小在200kb内\n\n4、合理控制背景图单元间的距离及背景图位置\n\n这个原则是为了防止在背景图比元素大小更小的时候，区域出现别的无关背景图\n\n5、借助相关工具处理sprite\n\n**三、减少css的代码量**\n\n提高网站整体加载速度的一个重要手段，就是提高代码文件的网络传输速度。除了代码压缩，精简代码也是一种手段。\n\n（1）定义简洁的css规则\n\n合并相关规则，定义简洁的属性值\n\n合并规则是指比如font-family、font-size、font-weight等等，可以合并为font。 简洁属性值，比如颜色值：color，#33AAFF可以简化为#3AF等。\n\n（2）合并相同定义\n\n网页中总会有一些模块有较高相似度，则可把同样的部分共用一次定义，不同的部分再单独定义。而且在css中，很多属性是可以继承的，则只需要在合适的地方定义一次即可。\n\n（3）删除无效的定义\n\n无效的定义，并不会影响页面功能显示，但会影响页面展示的性能，增加代码量的同时，也增加了浏览器解析代码的时间。无效的定义包括无效的规则及无效的样式属性，一般是开发过程中引入的，而从直观上无法判断，这情况，可以用工具，chrome自带的工具就可以查找css中的无效样式。。\n\n**其他css高性能实践**\n\n（1）避免使用@import\n\n@import导入的新样式文件会阻止页面的并行下载，这样增加了文件的整体加载时间。\n\n（2）避免使用IE浏览器独有样式：图片滤镜和css表达式\n\n图片滤镜的使用会在图片加载时阻塞浏览器的加载和渲染，并会增加额外的内存开销。 Css表达式的作用是动态设置css属性，表达式不只是有兼容性问题，还有性能问题，例如浏览器大小改动、窗口改动时，会使得浏览器频繁计算，性能消耗极大。同样的效果可以用javascript来实现。\n\n## css3最佳实践\n\n**查看浏览器支持情况**\n\n在我们使用css3的过程中，问的最多的一个问题可能就是：兼容性如何？没办法，随着css的发展，它可以为我们之前遇到的很多不好解决的问题提供一个更好的方案，让我们忍不住去想能不能那样去做。PC端有饱受诟病的IE系列，到了移动端会好很多，但有些还是不太好。所以，查看浏览器支持情况几乎成了必备动作。 如果使用的特性仅仅是装饰点缀性的效果，不影响大局，则不需要考虑太多兼容问题，如果是出于设计要求，必须支持所有浏览器，则要特别的关注一下了。 开发者可以选择比如：caniuse.com、css3 Click Chart、css contents and browser compatibility这些在线工具来查看兼容性。\n\n**添加必要的浏览器前缀**\n\n对于刚使用css不久的朋友来说，如果偶尔在某网站源码当中看到诸如：“-webkit-、-moz-”等，可能会觉得很奇怪，这是什么？它们是对应不同的浏览器厂商所加上的前缀。\n\n因为浏览器在支持css3时，可能仅仅实现了标准定义的一个早期版本，所以，尚不支持标准写法，给代码添加浏览器前缀也是无奈之举，会使得代码更多，更难维护。\n\n但也不是为了“完美”而一定要去兼容所有的浏览器，一般可以按照浏览器或者系统的版本的市场占有率和目标用户使用浏览器的比例，来决定加不加前缀以及加几种前缀。而且相信随着逐步的发展，系统、浏览器的不断升级、更新，需要使用前缀的情况会减少。\n\n问题又来了，既然需要添加必要的前缀，说明有些时候还是很有必要，那不得不加的情况下，那不是挺麻烦的？同样的一条规则要写三四遍，可能很多地方都要用，如何是好？别急，下面是几个对策：\n\n1、使用工具来添加css属性的浏览器前缀\n\nPrefixr，可以在开发的后期对代码进行处理。它会自动的添加需要的前缀和删去不必要的前缀。\n\nAutoprefixer，如果想要在开发过程中更多的自主性，可以使用这个工具，开发者可以自定义浏览器支持范围，它也有多种使用方式，可以集成到多个开发环境中。 此外还有几种工具可供使用：cssFx、*css Agent*和-prefix-free。\n\n2、借助css预处理技术\n\n目前流行的有sass、less，具体方法是，针对css3样式特性定义一份模板样式。 优点是：避免大量重复代码，只需要维护一份定义。\n\n3、不要过度添加浏览器前缀\n\n有些开发者为了兼容所有浏览器，不管什么情况都为css代码加上了所有浏览器的前缀，这是一种消极的编码方式，增加了太多的重复代码，降低了浏览器的解析性能，增加了复杂度，同时某些前缀的属性可能没有被浏览器支持过。\n\n4、添加css3标准属性定义\n\n何为标准属性定义呢？就是不需要任何浏览器前缀，大家可能都会注意到，很多使用css3的地方都会在最后的地方写标准属性定义，为什么呢？因为当浏览器支持标准属性时，它可以覆盖前面添加了前缀的定义，css3中的属性标准定义才是符合规范的定义，添加了浏览器前缀的定义会随着浏览器的更新逐渐被淘汰。\n\n当然，还有一点需要注意的是，某些属性，目前是属于Only webkit或者Only firefox的，那么就没有必要再写上标准定义及其他浏览器前缀了。\n\n**做好css3中新特性的兼容处理**\n\n说到兼容，就会提到低版本IE，比如很常见的圆角、透明图片等，有时候我们会给它们降级的处理，比如filter或者javascript，使用box-sizing、transform，推荐使用Modernizr,这个框架中包含了很多css3新特性的兼容方案。\n\n无论是哪种方案，都会带来性能上的损耗，不能毫无章法的滥用，仍然是需要大家去权衡和选择。推荐一个如何更有效率的使用HTML5的建议网站：html5please。网站按照使用的方式把css3中的新特性分成了三类：\n\n（1）直接使用\n\n包含了大部分新特性，有些特性本身不会影响兼容性，如border-radius、media queries等，有些需要添加降级处理，如多背景图，要设置一个单背景图或者背景色作为备选。\n\n（2）谨慎使用\n\n这部分主要是性能问题，例如框阴影应用于占用很大区域的元素，页面滚动或鼠标悬停时，会引起不小性能问题。\n\n（3）避免使用\n\n这部分因为它们可能仅支持某个浏览器，比如倒影，则需要避免使用。\n\n综上所述，css能够用来提高性能的方法还是蛮多的，但我们很容易忽略它们，因为它们所带来的影响似乎没有那么明显，而且，很多人可能为了图方便，任意挥洒着自己的才华，想怎么写就怎么写，能达到效果就行，这也有点小消极哈，忘了你的优秀工程师目标了麻？！~~css规则虽不不难，真正写好也不易，还是要有些追求极致的精神滴。诸君且写且珍惜吧！~\n\n欢迎来这里交流： 152128548","tags":["CSS"],"categories":["CSS"]},{"title":"《web前端最佳实践》—HTML篇","url":"/2015/03/28/《web前端最佳实践》—HTML篇/","content":"\n## 一、web标准\n\n很多人把web标准挂在嘴边，却没有引起足够重视，只关注页面外在的表现而忽略页面本身代码的质量。\n\n**标准的页面具有哪些优点？**\n\n* 保证浏览器正确渲染 最大限度的保证页面在不同浏览器正常解析，同时还能最大限度保证在未来的各种客户端中正常解析。\n\n* 更容易被搜索引擎搜寻，提高网站搜索排名。标准的页面基本完成了一半的搜索引擎优化工作，搜索引擎的网络“爬虫”目的是读懂网站的内容，并找出网站关键字。合理使用标签和属性，可以帮助搜索引擎准确理解网站内容。\n\n* 提高网站易用性。让网站能被更多用户访问，比如视力或肢体障碍用户。\n\n* 更好的维护和扩展。 多个开发者如果遵循统一的标准，则会更好的理解和维护已有的页面。标签、样式、以及行为分离的标准页面显然具有更好的扩展性。\n\n**如何做到标准？**\n\n* 标准的HTML页面结构，比如文档类型声明、head（title和引入的文件）、body等。\n\n* 正确闭合标签。\n\n* 停止使用不标准的标签和属性，简化代码。\n\n* 样式和结构分离。\n\n* 添加javascript禁用的提示信息。\n\n* 添加必要的`<addr>`标签，比如常用的keywords、description，设置IE浏览器的兼容模式，设置页面在移动设备中的显示等。\n\n## 二、高可读性HTML\n\n**一些小原则**\n\n* 注意标签语义化，网页的外观看起来怎样跟浏览器的解析以及搜索引擎的抓取毫无关系，高可读性的html代码除了使开发者自身更易看懂和维护之外，最重要还是给机器去读的。\n\n* 没必要使用的标签就不要用，可以利用其它的方法去做到同样的效果，比如伪元素。 比较常见的使用不当之处有“分隔符”和“空标签清除浮动”等。\n\n* 使用一些非文字内容的时候，虽然看似使用空标签配合css就可以完成，但搜索引擎却不能得知它的作用，可以添加一些文字说明，然后再用css将其隐藏。这样做也便于第三方阅读工具的识别。\n\n* 熟悉各标签上规范的属性，给html标签添加必要的属性 比如常见的：alt、title、for等。\n\n* `<br>`应仅用于文本内容的换行，不应用于行级元素的换行。\n\n* 网页中的图片是使用`<img>`还是background？ 若作为页面内容的一部分，则使用img，若仅用于装饰，使用background。\n\n\n**常用几类标签的正确使用方式**\n\n**网页标题层级**\n\n标题标签指的是h1~h6这6个标签，统称hx标签，相比其他的语义标签，<hx>标签会受到搜索引擎的“特殊照顾。\n\n（1）在标题处应使用。\n\n（2）页面中只使用一个h1标签，搜索引擎会给予它最高权重。其他模块标题标签从h2开始。\n\n（3）`<hx>`标签使用过程中不要跳级，保持层级连贯性。\n\n（4）不要单纯使用`<hx>`标签给内容设置样式。\n\n**正确设计表单**\n\n（1）不要使用`<table>`。\n\n（2）不要用`<span>`展示表单的文本，应使用`<label>`（用于为输入控件定义文本）；指定关联控件只需把相关控件的id赋予`<label>`的for属性，这样做不仅把`<label>`元素触发的事件指向了相关表单元素，扩大了可操作范围，也从语义上绑定了两者。 （3）使用`<fieldset>`给表单控件分组，`<legend>`用来定义控件组的标题，另外还可以通过设置`<fieldset>`的disable属性禁用包含的表单控件。\n\n（4）给输入控件设置合适的水印提示，所谓水印提示，即在未填写之前里面所显示的内容，当控件获取焦点，或者用户开始输入时消失。可使用placeholder属性，IE9以下可使用jquery-placeholder插件模拟。\n\n（5）如有必要，设置tab顺序。很多用户会有使用键盘tab键来切换到下一个输入框的习惯，默认情况下，会安装界面上的分布顺序来处理，如需要特殊设定，可设置tabindex属性值。\n\n（6）使用html5中新引入的表单控件类型，如url、email、search等。高级浏览器有很好的支持，不支持它们的浏览器会以text类型控件展现。\n\n**精简html代码**\n\n1、删除多余容器，比较典型的是`<div>`和`<span>`，这是两个没有任何语义，常被滥用的标签。\n\n2、装饰性元素使用css实现。如背景、伪元素等。\n\n3、避免使用table布局，是代码更少，更清晰，避免因重绘或重排而降低性能。\n\n**过时的块级和行内元素**\n\n每个使用css的人都了解过这两个概念，但是，却都是从样式的角度去理解原生的元素，有点不妥，而且它本身跟“结构与表现分离”的思路有违背，html5中淡化了二者的定义，更具体的分成了7类。 它们是：元数据式内容、流式内容、章节式内容、标题式内容、段落式内容、嵌入式内容和交互式内容。\n\n从内容模型来说，以前对于块级和行内元素中内容有一些限制，html5结束了这种复杂的局面，从实际需求出发重新定义了内容模型。比如`<a>`元素可以包含块状元素了。还有其他的很多差异，需要大家有重新的认识。\n\n## 三、小叙Html5\n\n先来看几个时间点。\n\n2012年12月17日，HTML5定义完成。\n\n2014年6月17日，发布标准草案的最终征求意见稿。\n\n2014年10月28日，W3C发布HTML5正式推荐标准。\n\n**新特性的使用**\n\n近几年，HTML5的概念被炒的过头了，给人感觉是酷炫，甚至“无所不能”，然而它只是一个新的web标准。是对几个应用比较广泛的特性的讨论。\n\n**1、简化定义方式**\n\n避免不必要的复杂性，比如文档类型声明、定义页面编码、样式和脚步的引用方式等。\n\n**2、使用新标签和新属性**\n\n新标签：\n\n语义化标签：`<header>`、`<nav>`等\n\n功能性标签：`<svg>`、`<canvas>`、`<video>`等\n\n新的输入控件类型：tel、search、email等\n\n新属性：\n\n`<script>`的async属性\n\n`<base>`的target属性\n\n`<input>`和`<textarea>`里面的placeholder、required、autofocus属性\n\n标签自定义属性data-*，用于保存自定义数据，同时添加对应API：dataset\n\n**小tips**\n\n**不要使用HTML5中已经弃用的标签和属性**\n\n1、没有任何语义，仅为了设置外观 `<basefont>`、`<big>`、`<center>`、`<font>`、`<strike>`、`<tt>`等 2、破坏了可用性的标签 `<frame>`、`<frameset>`、`<noframes>`\n\n3、移除的标签属性 align、valign、bgcolor等\n\n**如何处理兼容性**\n\n（1）通过document.creatElement产生标签\n\n（2）使用成熟的框架，如：html5shim\n\n注：此处仅为让浏览器识别新标签的兼容方法，其他还有很多兼容问题，此处不赘述。\n\n此文为读了党建前辈所著《web前端开发最佳实践》HTML部分之后所记录，内容仅仅是冰山一角。阅读过程中意识到了自身的很多不足，受益匪浅。希望大家都能读一下。","tags":["HTML"],"categories":["HTML"]},{"title":"《web前端最佳实践》—高维护性css","url":"/2015/03/28/《web前端最佳实践》—高维护性css/","content":"\n有人说html很简单，它甚至不被认为是一种真正的编程语言，当然还有另一个技术同样被类似的看待，它就是css。说实话，css的代码的确不复杂，如要要会简单的使用你只需要知道它是什么，然后任何一个人都能够轻松的用它来控制一个元素的宽高，内容字体的类型、大小、颜色等等。但它真的不只是一些规则。 就像是同样认识字，会写字，但总有人能写出更好的文章一样。会用和科学的用，灵活的用仍然有距离。这篇文章来谈谈css中一些可能的最佳实践方法。\n\n## 高维护性css\n\n**Css有些什么特点？**\n\n简单来说，使用方式：内联、内嵌、外联、import。为元素设置样式的方式：元素标签名、类名、id、各种选择器，以及它们的组合。所以，它是很灵活的，如果不做任何的规范的限制，就肯定会导致css代码的混乱和难以维护。\n\n**如何高效组织css代码？**\n\n结构清晰、模块分明，合理的代码组织结构可提高代码的重用性和可维护性，降低开发复杂度。那怎样组织呢？\n\n首先是组织代码文件，可分为两大类：通用类和业务类。 然后，有一个文件用来重置，常见命名是reset或者default、normalize等。\n\n有一个文件用来存放通用模块和一些基础样式，常命名为mod、common等，如页面对话框，提示框，头部，底部，侧边栏等，会在多个页面用到，这样方面各页面引用，提高代码复用度。\n\n另外需要一个文件存在兼容旧版IE浏览器的样式，这样做的好处有二：\n\n一、减少非IE浏览器加载样式文件的负担\n\n二、如果未来决定不再支持旧版的IE浏览器，则只需要去修改一个文件，不需要多个文件到处找去修改。当然，在处理浏览器兼容问题上，有个原则是，是否有其他不存在兼容问题的方案，如果没有，则把要做兼容的部分单独放在一个文件中。\n\n其余的css样式文件则用于业务模块，不同模块的样式文件放置于不同的文件夹中，原则上每个模块的样式文件不宜太大。\n\n这样可能会造成一个问题，一个页面不是要引入很多文件了？页面加载的时候http请求不是多很多？其实并不矛盾，文件的划分只是为了方便开发和维护，发布的时候会使用工具把多个文件压缩合并成一个文件，所以不用担心引入多个文件的问题。\n\n上面说的是文件的组织，那么在文件中也要按照一定规则来组织样式的声明。 比如，按照模块中元素的层级，如果是同级，则按照元素在页面中的位置，从上到下，或者从左到右，若存在多个元素共用相同声明，则应先声明共通样式。 如果觉得这样还不够，则可以使用一些更高级的方式，如less、sass，它们将css赋予了动态语言的特性，如变量、继承、运算、函数等。\n\n以上是从几个大的方向去说的，下面涉及某几个点谈一谈\n\n**使用css reset 统一浏览器显示效果**\n\n首先，html的标签是有原始样式的，但问题是在不同浏览器中，标签的默认样式不尽相同，其中的某些差异给开发造成了麻烦，早在2004年，就有人开发了第一个重置样式文件，叫undohtml.Css,后续又有了多种重置方案，其中有个方案“火爆一时”，此方案总共就一行代码*{margin：0；padding：0；}。重置了所有标签默认的margin、padding样式，但有一个弊端是增加了后续开发的复杂度，并不能很有效的提高整体开发的效率。另外，此方案性能也不佳，当页面元素很多时就会影响页面渲染的性能。所以，人们还在逐渐的探索更好的重置方式，目前有多个流行的重置方案，有Eric Meyer开发的Reset CSS和雅虎公司前端技术团队开发的YUI Reset CSS。其实并不存在一种方案适合所有项目，所以最好还是选择参考别人的方案然后设计一套适合自己项目的方案。\n\n需要考虑如下几点：\n\n（1）HTML5新标签 需要重置它们的display样式，因为在低版本IE中没有定义它们的默认display样式。\n\n（2）padding、margin、border 标签在浏览器中的差异主要是与这三个样式有关的默认样式产生的，但也不是需要重置全部元素的margin、padding、border，应根据实际情况。\n\n（3）字体设置 `<h1>`~`<h6>`、`<strong>`、`<em>`等语义化标签都有默认字体，但实际当中所需要的字体大小或者粗细都跟默认不同，所以一般项目中都会对他们进行重置。\n\n（4）其他元素的样式重置 典型的有li默认的列表项样式，table的单元格之间默认空间，a链接的下划线等。\n\n**给css定义排序**\n\nCss的逻辑性不强，随意的书写也不影响其作用，如果不借助工具对其排序也会很繁琐，所以，很少有人会在意，但是排序还是有好处的。\n\n比如：\n\n1、更整洁\n\n2、防止重复定义\n\n3、能够清晰查看定义\n\n4、后续维护能快速定位\n\n排序方式：\n\n1、按类型 如，显示和浮动、定位、尺寸、字体等\n\n2、按字母 按字母顺序排列，优点是规则简单\n\n3、按定义长度 按照样式定义的字符长度排列\n\n各有优劣，实际应用中，推荐使用第一种。 但是如果单靠前端工程师在编写过程中这么做的话也是很难的，可以在写的过程中按照效率最高的方式写，提交代码时使用工具为css排序。既提高效率，又方便后续代码阅读和维护。有一款免费工具是 CSScomb。\n\n**合理利用css的权重，提高代码重用性**\n\n何为权重，即css众多类型选择符的优先级，优先级高的样式会覆盖优先级低的样式。权重的更具体规则，大家可以查阅资料，这里不赘述。\n\n这里说说如何依照选择符的权重定义合适的选择符：\n\n（1）尽量不使用ID选择器\n\n一个页面中不允许定义两个同样的ID，而且ID选择器权重很高，如果要覆盖使用了ID选择器的元素样式，就必须在其元素上添加新的选择符，或使用！important，这样的结果会使无法重用的样式代码变得更多。最佳实践是尽可能使用较低权重的选择符作为基础样式。\n\n（2）减少子选择器的层级\n\n也是降低子选择符整体权重的过程，同时，层级越少，对html结构的依赖就越低。引起Css层级过多的另外一个原因是sass、less等工具的滥用，这也是我本人在使用之初就有意识到的问题，因为你可以使用嵌套和引用等方式来定义样式了，这样以来给自己省了很多功夫，但文件最终还是要编译出来，我们不用反复的敲那么多代码了，但生成的代码依然还是会很多，所以，方便了自己的同时依然要特别注意减少选择器层级。\n\n（3）使用组合的css类选择器\n\n使用这种方式，开发者可以不用考虑css样式覆盖的问题，避开了计算选择符权重的过程，同时提高了代码的重用性，组合的概念是把一个复杂的父类中的可变部分和稳定部分分割开来，稳定部分作为主体类，可变部分分成几个简单的类，类与类之间没有继承，同样可以起到减少对html结构的依赖，提高代码重用性的作用。\n\n**如何兼容IE浏览器？**\n\nIE8及以下版本的IE浏览器一直是前端开发人员心中的痛。为了兼容它们做额外添加的代码成为hack代码，往往人们都不想去写那些代码。以下是兼容IE浏览器的一些实践方法。\n\n（1）熟悉IE浏览器中常见的样式兼容问题\n\n一类是浏览器本身的bug，一类是和标准不兼容或还不支持标准。\n\n（2）分离样式兼容代码\n\n按照浏览器的不同版本组织代码文件，然后使用判断语句，按需加载\n\n**em、px还是%？**\n\n谈及这个话题的原因是，如今页面功能变得越来越多，用来访问页面的设备越来越多，页面的布局就是一个颇具挑战的事情，而页面当中的元素的尺寸和字体、图片的大小等也跟布局息息相关。鉴于此，前端开发开始重视如何提高页面布局，核心思想是将页面元素的尺寸和字体大小设置为相对值。字体相对单位包括：em、ex、ch、rem。更多内容无需赘述，有更多的资料来讲解。下面给出几个最佳实践：\n\n（1）尽量设置相对尺寸\n\n所谓设置相对尺寸，并不是说页面整体的布局是自适应的，整体的尺寸可以是固定尺寸也可以是自适应的尺寸，这取决于页面的设计。\n\n（2）只有在可预知元素尺寸的情况下才使用绝对尺寸\n\n比如设计上要求使用绝对宽度，比如整体宽度，侧边栏宽度，页头页尾的高度固定等，在展示图片、视频的时候，合适的固定尺寸会让这些多媒体元素展示获得最佳的效果。\n\n（3）使用em设置字体大小\n\n使用px设置字体大小的可扩展性不好，使用百分比设置字体大小也不符合习惯，最佳方式是使用em设置字体大小，但随着字体设置的层级增多，这种方式反而增加了维护的成本，对于此，css3引入了rem单位，是相对于根元素的字体大小计算的，就避免了这个问题，目前除了IE8及以下，大部分浏览器都支持它。\n\n此文很多东西都是点到为止，希望对一些新手来说有一定的引导作用，带来一定的帮助。每个人在自己逐步的实践当中都会有一些这样那样的感触和经验、教训等，经常的总结和放入到自己的下一步实践当中，相信是会很有好处的。大家一起加油！~","tags":["CSS"],"categories":["CSS"]},{"title":"图文浅谈css3","url":"/2015/03/14/front-homes-picture-overview-CSS3/","content":"![](front-homes-picture-overview-CSS3/1.jpg)\ncss3已经“出来”挺久了，由最初的新奇，尝试，到现在慢慢的被习以为常的应用，特别是移动端需求的暴增，对css3更好的支持，吸引更多的人走了进来，但是，对于刚开始接触它的人来说，或许会有很多的混沌之处，毕竟它是个大宝藏，而多数人因应用的局限，了解的面也相对局限。本文就试图给出一个稍大范围的概括性展现。当然，也只是一部分。\n\n一谈起css3，多数人可能首先想到的是各种炫酷的效果。的确，css3的出现的确是使得css的世界有了焕然一新，被解放了的感觉。以前需要用图片的，需要多个标签进行堆叠的，需要用js的，需要用flash的等等，甚至是几乎想不到办法去做的东西，css3都给了我们相应的补偿。\n\n但是，今天我不去从那些方面开始谈，我会按照某种分类把css3来个整体浏览。目的是让对css3不太了解的人能有个大概的了解，我自己也算是复习一下。另外，此文不会列出一堆代码给你看。\n\n## 布局\n\nCss最重要的一个作用，就是布局，而初学css3的朋友可能会因为种种原因忽视掉它，原因有二。\n\n被各种酷炫的新“功能”给蒙蔽了，觉得那就是css3~\n没觉得之前的css布局方法有什么不好，觉得够用了，不遇到新的问题或者没人提起，就不会去在意。人总是容易知足的~\n灵活的Flexbox\n\n小谈一下float，很多解析float的文章都提到float本身在设计之初并不是用来布局的，而是用于图文混排。而且浮动的元素会脱离正常的文档流，要闭合浮动。目前的很多网页都是滥用浮动，如之前的滥用div般，随处可见fl、fr，然后来个clearfix，万事大吉！这种现象已经被人批过很多次了。\n\n## Flexbox能干嘛呢？\n\n当你给父容器应用了display：flex；（注：flexbox在发展过程中有多个版本，此写法为最新版本） 那么它的子元素经过简单的相应设置可实现： 横/竖排\n\n整体左中右（水平）、整体上中下（垂直）\n倒序排列、任意顺序排列（在不改动html结构的情况下）\n多余空间分配，元素超出处理。\n子元素可单独设置自身的属性。 等等 如下\n\n![](front-homes-picture-overview-CSS3/2.png)\n\n## 多栏布局Multi columns\n\n顾名思义，就是多栏，它的灵活之处在于，可以随意设置栏数、栏宽、栏间隔、栏分割线等，同时你不需要用同样数目的容器去放内容，它会按照你所设置的那样乖乖的排布，一个用的最多的形容便是像报刊、杂志那样的排版方式。如下 \n\n![](front-homes-picture-overview-CSS3/2.png)\n\n## Calc()\n\ncalc是英文单词calculate(计算)的缩写，可以使用calc()给元素的border、margin、pading、font-size和width等属性设置动态值。为何说是动态值呢?因为我们使用的表达式来得到的值。calc()最大的好处就是用在流体布局上，可以通过calc()计算得到元素的宽度。 为什么需要计算呢？有个问题大多数人应该都遇到过，那就是元素设置的有border、padding等，而且是具体的值，比如px或者em、rem等。但元素本身是不定宽，这个时候，那么还怎么去设置元素的宽？ calc()就是给我们开发者提供了方便，把问题交给了浏览器。 比如这样：width:calc(100% - (10px + 5px) * 2); 当然，你应该想到了，它能解决定宽不定宽并存的问题。\n\n## Grid Layout（网格布局）\n\n这种布局方式，跟flexbox有相似之处，也有人拿二者作比较，这段就简要介绍一下它。 乍一看，它会很像表格，但它不是由html所写出的表格，而是由css来进行设置。 它可以依赖于媒体查询根据不同的上下文重新定义布局，还可以让我们摆脱现在布局中存在的文档流限制，你的结构不需要根据设计稿从上往上布置了。这也意味着您可以自由地更改页面元素位置。\n\n## 摆脱图片，代码来搞定\n\n**阴影**\n\n包括text-shadow、box-shadow\n\n**圆角border-radius**\n\n突破了以往只能是方形盒子，或者需要用多余标签和图片来制作圆角效果的情况。\n\n**渐变gradient**\n\n渐变在网页设计中随处可见，常用在背景上，以前遇到渐变，只能通过切图，哪怕是一张很小的图进行平铺。有了这个属性，提供了多一种用代码解决的方案。\n\n## 给图片加上“翅膀”\n\n**图像边框border-images**\n\n以前，边框只能是有限的几种线性，想做出更丰富的效果是做不到的，但有了这个属性之后，你的创造力+合适的方式，便成创造出很好的效果。\n\n**多背景图backgrounds**\n\n在之前，一个元素同时添加两张背景图是做不到的，但有了这个属性，就解决了这个问题，你不仅可以添加多张图作为背景，还可以控制它们的位置。\n\n**遮罩mask和滤镜filter**\n\n这两个用过ps的都知道会是什么效果，但现在为止，浏览器对它们支持的不是很好，在网页上应用的也很少，就不多说了。\n\n## 媒体查询 Media query\n\n这个东西也是很多人开始接触css3就了解的东西，它算是一个亮点，给开发者提供了一个为不同设备应用不同样式的方式。特别在现在这种移动设备多种多样的情况下，更加的体现价值。\n\n## 选择器\n\n这是css3一大亮点，相比之下，以前的选择器显得很单调了，也直接导致了页面当中会出现很多为了效果而加的钩子，多了之后会进一步导致命名的困难，如果类和元素关联的比较密切，或者规划的不好，就会出现要嵌套很多层去增加权重，性能也随之降低等，所以，这是个系列问题。Css3新增的选择器则有了诸多筛选的标准，比如第几个，偶数、奇数个，否定，空元素，属性选择等等。\n\n## 盒模型 Box-sizing\n\n或许每个人都会犯过这样一个错误，给一个元素设置了宽度之后，再设置padding，呀？！怎么溢出了？这是为什么？就是盒模型在作怪。目前这些版本的浏览器默认设置的width是不包括padding的，你可以通过box-sizing来改变它。\n\n## Rem\n\n提供了一种相对于根元素定义大小或者长度的方式。\n\n自定义字体 @font-face\n\n这个规则同样是css3的亮点，每位做前端开发的人都碰到过这个问题——视觉稿里面的字体好好看，可自己的电脑上面没有那种字体，好，索性找设计师要那种字体然后装在自己的电脑上，可问题又来了，我自己能看到了，用户怎么办？@font-face为我们带了曙光。\n\n## Css3的那些炫技\n\n好吧，虽然这篇文章好像在故意的“避谈”这些东西，还是不得不谈~为什么避谈呢，在文章的第一段已经做了说明，就像是有一种行为总是被批一样——“哇，这个做得看起来很不错哦，html5做的吧？”其实可能一点html5的东西都没有用，只是用了css3或者js，同样，对于看到一些动画，就联想到css3，仿佛css3=动画的看法，也是错误的，css3的宝藏还有很多。\n\n**Transform、translate、transition，傻傻分不清楚？**\n\n这几个东西对于初学者来说还是可能会迷糊，当然，如果看了上面我提供的那张图应该不会了。\n\nTansform是用来控制几种形变或位置变化，比如rotate（旋转）、skew（扭曲）、scale（缩放）等，很多动画都离不开它。Translate（平移）也是其中一种。\n\nTransition为对象的状态变化提供一个过渡的过程，而不是像以前一样突变。当然，它可以用来做动画效果。\n\n**Animation**\n\n一说到动画，以前都是结合着js或者Flash来做的，html5的canvas也不例外。但到了css3，引入了animation，再配合一些其他一些可以控制元素位置和形状以及外观的属性，就能做出动画来。\n\n它还有许多有用的小东西，比如shapes，可以让你在图文混排时做出圆弧边缘或者各种不规则形状等等。\n\n## css3给我们带来了什么？\n\n至少从目前看来，某种程度上提高了制作某些效果的效率、提供了多一些方案、使代码的维护更加方便，性能也得到了提升。也让css的世界变得更加丰富多彩。\n\n当然，一项技术能用好，光是知道这些东西远远不够，起码要做到几点：功能性、完整性、灵活性、实用性、合理性。若能做到这几点，那便是很高的境界，能够挥洒自如。\n\n此文只是提供了一些粗线条的东西，虽然参考了一些资料，比如\n\n[w3cplus](http://www.w3cplus.com/),[CSS手册](css.doyoe.com/),[webkitcss](ued.ctrip.com/webkitcss/)\n\n但难免有不当之处，欢迎交流。\n \n","tags":["CSS"],"categories":["CSS"]},{"title":"第八届webrebuild年会总结暨“如何做一个理想主义者”","url":"/2014/12/27/webrebuild_2015/","content":"\n今天参加了webrebuild年会，一个多月没有写过文章了，之前是换工作，换完工作适应新的环境，接受新的任务，其实很想按照当初的想法，每周更新一篇来给自己作总结，做知识分享，可是，最近一个多月来有一种奇怪的感觉。每天还是像以前一样查资料，看书等等，却没有感觉到一点新的进步，一来二去仿佛进入了一个圈子，或许这是所谓的“瓶颈”吧，不光是技术上，还有心理。\n\n这次webrebuild年会的主题是“初心”，那我为什么加上了后面的“如何做一个理想主义者”呢，其实是想写一篇文章总结一下这次年会，也总结一下自己。\n \n## 一、开篇\n\n当然是彪叔~大概也就他能hold住这样一个主题的开篇，谈到的话题也是涉及思想，心态，追求方面的东西。\n\n![](webrebuild_2015/1.jpg)\n\n![](webrebuild_2015/2.jpg)\n\n![](webrebuild_2015/3.jpg) \n\n![](webrebuild_2015/4.jpg)\n\n初学者的心，最初的工匠之心。重构从“对设计稿的还原”，上升到“设计理念的还原”。\n\n说实话，虽然我职业经历不长，但也已经在时刻提醒着自己，保持初心，因为人难免在生活、工作、社会、家庭等等诸多事务的浪潮之中迷失，妥协等等，渐渐的，时间过去了，青春过去了，整天也忙忙碌碌，可是能不能收获到我们当初想要的东西呢？我的QQ签名里也是写有“保持一颗纯粹的心”，就是为了提醒自己，不要因为生活，人情世故等等，扰乱了自己的心绪，改变了自己的初衷和前进方向。当然，这也只能是美好的愿望，因为生活是丰富的，你明天需要做什么或许自己也不知道，我们唯独能够把握的是大方向不变，心里那股劲儿一直在。\n\n这个话题除了引发我对“初心”的思考，另一个就是“工匠“精神，彪叔举了他自己和公司的一些例子，很生动形象，也给了我很大触动，提醒了我们平时在工作的时候，眼光不要太局限，我们要做的事情很多，需要我们会做的东西很多，but谁都不是什么都通，做什么就一定会成功，但宝贵的是探索、实践的这么一个过程，尝试就有收获，就有可能。\n\n## 二、十年（贺彬）\n\n由来自腾讯互娱的前辈，讲述了一下他的十年，内容记得不是很清楚了，因为每个人的十年都不是简简单单，特别是这种对自己人生，工作经历的讲述，更是可能丰富多彩，伴随着很多的故事。其实每次听到台上的嘉宾在讲说，哪一年做了什么，哪一年来到腾讯，我也同时在想那年我在干嘛，在读初中、高中？互联网的历史不长，在中国的历史更短，也就十几年时间，但就是这十几年彻底改变了人们的生活，还记得当时上电脑课，我们就是去玩儿，玩儿的最多的无非是扑克，扫雷这些，而我当时见到电脑的机会很少，键盘上的按键什么的还认不全，就喜欢打字，那时候比较时兴”智能ABC“、五笔等等，曾经背过几次五笔的字根，背一次没学会，也没电脑，过个一两年忘了，又有老师教，又背，又忘，每次都是滚瓜烂熟的，但每次又忘的一干二净，这么循环几次.....现在依然是忘记了。这段历史除了用来回忆，其实还有一点可以说明的是，技术不是用来死记概念，语法这些东西，还是要落到实处应用，加强实践，不然也是在背天书。\n\n慢慢的，街上的网吧多了些，替代了我也曾经痴迷的”街机“，出了一些游戏，比如拳皇，半条命，红色警戒等等，今天的会上还有嘉宾用”红色警戒“来鉴定”80后“身份，难道都过去那么久了吗？~对了，还有不能不说的QQ，那时候号码也是不好拿的，貌似后来看传记有写那时候的账号是有些问题，然后，知道了谁有号码就好羡慕啊，有人说可以买，我也没能买到。后来知道姐姐有，就跟着她一起去看她玩，怎样聊天等等。一晃十年有余了~\n\n## 三、css3动画（陈在真）\n\n文章的开头我也说了，最近虽然也是一直在学习，可是却觉得止步不前，css3就算是其中一个，我从去年底开始慢慢接触比较多css3的东西，那时候是刚起步阶段，到了今年的上半年接触和自己动手玩的稍微多了一些，也又买两本书看，过渡到下半年，觉得整体上都算了解了，其中当然也包括css3动画，在真所列出的那些东西自己还算觉得蛮熟悉，只是可能运用和理解尚需加强。当然了，技术只是手段，做出一样东西至少还是需要你懂得该怎么去做。在真列出了他所总结的”十四条“。\n\n![](webrebuild_2015/5.jpg)\n\n![](webrebuild_2015/6.jpg)\n\n当时他还给出了几个demo和一些用于说明原委的动画让大家去感受，我就不列出来了。\n\n我自己可以总结出这么几点：\n\n1、仿真，略带夸张手法。比如人在做一个动作的时候，肢体动作应该是什么样的？人的行为习惯是什么样的，怎样能让人明白你的动画要传达什么，也就是在真所说的”重点“。然后就是平时的一些很细微的东西，稍加放大，比如一个物体从上往下落，落到最下面的时候，现实中，是会稍微的动一下，没人会去在意，但放在动画里，它就成为了一个视觉的焦点，动的幅度就要稍微加大，或者至少发生一点点形变再恢复原样；\n\n2、物理原理。比如抛物线，很少有东西能够绝对的直上直下，所以，抛物线应该是比较重要的，在动画中运用的东西，会牵扯到物理的原理和计算。\n\n总之，动画要想做好，逼真比较重要，然后就是过渡让人感觉很自然，或者有灵感可以尝试比较创新的效果。 有时间或者有需求的话玩玩研究一下还是很不错的。\n\n## 四、走进canvas——实战方法体系（迅雷——覃卓堂）\n\n这块的内容，不能说不精彩，但是，由于平时做的东西没有涉及这方面，也只是一些初步的了解和做过一些小的尝试，所以，所讲到的内容并没有能完全的吸收到，或者说也算给我指出了一点要努力的方向吧。上几张效果不怎么好的图给大家看。\n\n![](webrebuild_2015/7.jpg) \n\n![](webrebuild_2015/8.jpg) \n\n![](webrebuild_2015/9.jpg) \n\n![](webrebuild_2015/10.jpg) \n\n![](webrebuild_2015/11.jpg) \n\n![](webrebuild_2015/12.jpg) \n\n![](webrebuild_2015/13.jpg) \n\n![](webrebuild_2015/14.jpg) \n\n简单来说，canvas就是html来提供一个空间，js在上面翩翩起舞~\n\n## 五、”惟志、惟勤“（ISUX——”张仁寿、贝俊达、梁志杰“）\n\n下午的第一段是由ISUX的同事们开启的，三个人讲了三段故事，当然，一时间吸收不了那么多，大概是讲了一下关于手Q，关于动画解决方案，关于图片解决方案，还有一些个人的职业经历，其中介绍了一种可以拿视觉稿用ps直接生成页面的”神奇“工具，其他没有记太清楚，但是关于这个题目倒是知道了一些，出自习主席的一句话。这部分的营养没有吸收到，要检讨了~\n\n## 六、”源于优化，始于带宽“（吴珍妮）\n\n对于这个主讲者早有耳闻，博客也看过几次，给人的感觉很好，博文也有不少的干货。这次稍微近距离的看到，觉得跟想象的几乎没有差别。更有意思的是，她到腾讯之前是在珍爱网工作过，而我之前也是应聘过珍爱的前端职位（好吧这里允许拍砖，又往自己脸上贴金了），我这样说，其实差距相当大了。废话不多说了~\n她讲到比较多的其实也是有关图片，因为她好像现在是在负责Qzone，而Qzone是有不少图片需要去处理的，讲到了一些图片格式和压缩图片的方法，也介绍了一个内部团队在用的图片工具和动画素材网。\n\n## 七、寻找适合重构的理论（张癸鑫）\n\n说了这么多，终于到了鬼哥的环节，仰慕鬼哥已久，这次终于有机会近距离的聆听，给我的第一感觉是，看起来很年轻（其实也只是30出头），说实话，这次鬼哥所分享的内容之前在他的博客或者电子书里看到过大部分，而且那些也是有些时间了，不知道为什么他怎么又拿出来讲。我并没有因为这样就去怀疑他所讲的内容，而是引起了对自身的一种思考。\n\n首先，鬼哥所讲的内容肯定不是今天才有，也不是大家都一点都不懂，那么就要问”说了很多次的东西就代表你会用了吗？你完全领悟了吗？正确的东西，好的方式，好的思想，怎么就不值得反复的去讲，去回味？“好吧，问了自己几个这样的问题之后，再无半点疑惑。我们往往不是败给了别人对我们的要求，也不是败给了困难，而是败给了自己。至于他到底讲了些什么，大家可以到他的博客去看看。\n\n好吧，说了这么多，好像都是在说今天的会议，那么就拿我自己举例子来说，要怎样做一个理想主义者呢？一个理想主义者，是幸福的，也是痛苦的，幸福在于，是有”理想“的，痛苦在于，理想何处安放？何时实现？怎样实现？我们总会遇到各种问题，工作不顺利，生活琐事，和人沟通合作的不顺利，想做的事情被迫停下，被迫改掉，要学习新的技术，那种攻坚的煎熬等等。 那还要坚持我们的理想吗？答案是肯定的，刚说了哪些痛苦，其实理想主义者因为敢于站在残酷的现实面前去想象美好，敢于把一件事情从无到有的去做，就说明了他们的坚强和不服输，所以提到的那些困难都只是暂时的，外界的条件和人我们左右不了，我们能做到的就是自己不断的努力，不断的反思，积累，以期我们能做得越来越好，最终取得一个比较好的结果。\n\n写了这么多，算是给自己这段时间，到今天参加完会议之后的一个小结。没有多少直接的技术干货，咱们下次再详聊~大家一起加油！~\n \n","tags":["分享交流"],"categories":["分享交流"]},{"title":"《前端圈技术论坛-腾讯互娱专场》观后感","url":"/2014/11/23/fequan_2014/","content":"\n自从知道了[前端圈](http://www.fequan.com/)会有走进名企的论坛，就期待什么时候能够去参加，10月份有一次在广州vip，不算远，本来要去的，但某种原因未能去。接下来偶然知道了走进互娱，而且是讲重构和H5游戏方面，再加上刚来到企鹅做重构，似乎没理由不去了~\n\n整个过程是这样的：\n\n1、TGideas副总监PANTHER致辞\n2、TGideas重构四组（重构工程师）黄勇尤：**Can I use webp？**\n\n首先不得不坦诚的说第一次到互娱去，而且交通问题，所以迟到了，很遗憾的错过了前两个部分，等我去了之后已经到了第三个话题的提问环节。立即坐下专心听。第二个部分的如果后面有资料放出，会做个弥补。\n\n3、TGideas重构一组（重构工程师）谭杰俊：**逐帧动画-让魔法小精灵在你的页面上起舞**\n\n这个部分只听到了提问的环节，也稍有遗憾，提问的时候有问到图片压缩和代码压缩的问题，做动画的时候，如何选择css3和js，要把文件最好控制到多大。这方面之前也有了解，讲师主张优先选择css3，低版本的浏览器做一些降级的处理。还有提到了Gpu加速的问题，是有些css3的属性可以自动触发gpu加速的。\n\n4、TGideas多媒体开发组（多媒体开发工程师） 罗飞虎\n\n这段是我不熟悉的部分，不熟悉才要去了解和学习。 当然，平时也爱玩他们做的酷跑~游戏没有做过，所以，还是有一些收获，比如游戏大概要做的几个部分，加载状态、欢迎状态、新手引导、游戏中、结算分数、分享战绩等等，突然一下子使得对于游戏的几个部分变得明朗起来，然后提到了一些游戏开发需要注意的东西。还见识到了一款游戏当中要用到多少种类和状态的图片，提到了两种引擎，cocos2d-html5和createjs。但我个人对这方面的了解不多，以后要加强了。 提问环节有人问到了如何做到手机上和ipad上的适配问题，当时他未做过多的解释，后来另一位嘉宾补充说，可以做两套方案，根据不同设备使用不同的css或图片。\n\n5、TGideas重构二组（重构工程师）丁亮亮：**重构代码修炼之道**\n\n这一段是中间休息之后的，说实话，从这一个话题加上最后一个，是跟我平时工作最贴切的。smallni的博客平时也常看，whycss网址导航应该也是他做的，都很不错，这次有幸听到他讲解一些代码相关的东西也很荣幸。语速适中，不是那种让人想睡着的感觉，挺好~\n\n他提了一个问题，什么是优雅的代码，他采用了代码截图作对比的方法，展示了不同格式，比如缩进，不同类命名方法之下的html和css，也就是不仅仅做到标签语义化，同样类的命名也要语义化，利用好基类，扩展类，实例类这些技巧。怎样写代码更一目了然，更清晰，可读性更强，代码组织的更好，便能让代码更优雅。还要注意对代码进行注释，提出好的代码其实可以不要注释，但为了更好的维护或者团队协作，要加上合理的注释。确认设计稿中交互是否完整，比如是否具有了各种状态下应有的UI，确认固定标题字数、固定图片位大小规范等等。也提到了代码的模块化，比如两个部分看起来是相似的，标题和内容，那如果另一个部分只有跟它相似的标题，而另外还有一部分只有跟它相似的内容，这个时候，去把整个一大块模块化明显就行不通了，也做不到很好的复用。由此引出了到底怎样去划分，以怎样的标准去划分，提到了颗粒化，就是把你要模块化的东西范围缩小，另外的部分划分成一个颗粒，这样子就像是颗粒和模块进行组合协作一样去完成不同部分。比较好的一个思路。\n\n6、TGideas重构二组（重构工程师）肖鑫裕：**前端爬坑指南**\n\n此人风格幽默诙谐，自我介绍是css森林群里面的“怪兽”，PPT背景是粉红色，自我调侃比较“骚”。没有代码展示，不会显得很闷。介绍了一下自己的从业经历，提出了几个问题，比如说，是不是一定要兼容IE？这个问题相关你的用户群到底是哪部分，他们使用的是什么浏览器。还有讲到说如果重构比较早的进入到了项目的规划，在没有拿到设计稿之前，如何去确定公用或者可复用和扩展的部分，这个是之前一个童鞋提的问题，他做了补充解答，当然了，他给的建议，不能确定的情况下就把所有的都做成公用部分~呵呵，在实际中是否可行还是要自己去考量了。然后还举了几个不同的产品例子比如Qzone，我友网和其他的一款产品记不大清楚了，来举例子去分析在不同复杂度和不用量级用户群，不同产品迭代速度，不同规模的情况下，怎样取舍。在跟同事之间的合作也是不能“言听即从”，为什么这么说呢，别人让你改你就改，别人让你加班重做，你就加班重做，这样对于个人和团队都不一定是好事情，有些时候要会适当的为自己去争取而拒绝一些要求。还举了一个例子去说明，很多时候想象中的东西跟做出来的东西不同，做出来的东西跟客户真正想要的可能又有很大不同，这就需要更好的沟通，或者更多的去关注用户，关注数据分析等。另外一点就是要做到有理有据，比如产品认为该怎么做，或者设计认为该怎么做，你不同意，他们问你为什么，你回答：我就是觉得那样比这样好。这显然是不能够有说服力的，讨论也不会很快有结果，最好是拿出实例或者实际的市场数据，这样就很明显的看出孰优孰劣。\n这个话题所讲的是一些爬坑，内容不止这么多的，但由于信息量稍大，当时又去晚了坐在后排，所以也没拍照，后期前端群应该会有PPT发布出来到时再回味一下。\n\n好吧，这次的分享就先到这里，虽然没有完整的把论坛的内容都听完，但收获也是蛮大的。见到了一些比较有经验的牛人们。当然了，也参加了最后的游戏环节并拿到了一份礼物哦！下面奉上照片。\n\n集体合照留念（女生后面那排中间左手拿礼物的格格短袖男生就是我哦~）\n\n![大合影](fequan-2014/1.jpg)\n得到的小礼物\n\n![充电宝](fequan-2014/2.jpg) \n \n\n","tags":["分享交流"],"categories":["分享交流"]},{"title":"导航类“不定宽水平居中”的几种思路","url":"/2014/11/14/导航类“不定宽水平居中”的几种思路/","content":"\n定宽居中我们见的很多，可以用width、text-align、margin等来实现，但是如果没有宽度呢？\n下面提供几种思路供大家参考，给出基本的html结构和思路，当然了，也不一定是这样的结构，道理搞懂了相信大家能够灵活变通。另外，里面的项是有固定宽和高的。\n\n  <header>\n    <nav>\n        <ul>\n       <li>a</li>\n             <li>b</li>         \n       <li>c</li>         \n      </ul>\n    </nav>\n  </header>\n\n## 方法一：绝对、相对定位或者translateX\n\n    nav{position:absolute;left:50%;}\n    nav ul{position:relative;left:-50%;overflow:hidden;}\n    nav ul li{width:150px;height: 300px;float: left;background: #0F0;}\n\nheader默认宽度100%，把nav绝对定位，left:50%;然后里面的ul进行相对定位，left:-50%;在这点上绝对定位是办不到的，因为它把布局破坏掉了，容器宽度没有的情况下，它就面目全非，也无从谈起left:-50%。可能有人说，margin-left:-50%:也是可以的吧，这个在现有条件下是不行滴，它需要父容器宽度固定。那还有其他的么，当然，使用translateX（-50%）同样可以达到效果，因为它也不需要父容器的宽度。\n\n这种方法有一点需要注意，因为你定的外层容器left:50%;如果你加了很多项进去，或者每一项的宽度过宽，导致那个“隐形”的容器（nav）右侧超过了浏览器的宽度，溢出了的话，里面的内容是会被挤下去的，这个时候，就违背初衷了，使用的时候要小心哦！~\n\n## 方法二：使用Flexbox来实现\n\n如果有过一定了解的人会知道，这个方法实现起来so easy，只不过需要浏览器支持它罢了，使用此法，则不需要定位了。\n\ncss如下\n\n    ul{\n         display: -webkit-flex;\n         -webkit-flex-direction: row;\n         -webkit-justify-content: center;\n        }\n\n此法可以说是干净利落不留痕呐，just低版本IE不兼容~此处仅加了webkit前缀，不了解的童鞋且勿直接照搬使用哦。\n\n更多flexbox相关可参考[flexbox](http://www.w3cplus.com/blog/tags/157.html)\n\n## 方法三：js获取项目数设置宽度\n\n这种方法可以说是有点笨，只是绕了个弯子，仍然使用的是常规固定宽度水平居中的方法，通过js获取li，得到一个数组，然后数组长度乘以单项宽度，得到应有的总宽度，把总宽度值赋给外层ul即可，虽然此法略显笨拙，但如果在你不了解其他方法的情况下，不失为一种可行方案。\n\n## 方法四：传说中的float：center\n\n    nav{\n         text-align:center;\n         overflow:hidden;\n    }\n    nav ul{\n         position:relative;\n         left:50%;\n         float:left;\n    }\n    nav ul li{\n         float:left;\n         width:150px;\n         height: 300px;\n         position:relative;\n         right:50%;\n    }\n\n这种方法是一位前辈介绍的“古老”的方法，简单说来，是用了两次相对定位,ul相对定位，left:50%;li相对定位，right:50%或left:-50%也可。用我的话概括一下就是：整体右移，逐项左移。咦？这听起来似乎跟第一种方法有异曲同工之处。呵呵。就是这样的，本人能力有限，更深刻的道理也讲不出来。如果有其他玄机，还请高手不吝赐教。\n\n到最后了，说说我是怎么想起谈这个话题的吧，是一个企鹅的前辈考我的，当时，我本来是可以想到第二、三种方法，但顾及到浏览器兼容性和“笨”方法的缘故，我用了第一种方法，可惜还紧张没写对~所以，一直在寻求更多解决方案，以上是目前为止所知的几种。当然，只是提供了思路，可能有瑕疵还有细节没有说到，大家自己研究一下吧。会收获更多。欢迎交流！~","tags":["CSS"],"categories":["CSS"]},{"title":"section和article,向左还是向右？","url":"/2014/11/12/section和article,向左还是向右？ /","content":"\nhtml5的出现，让前端人员眼前一亮，大喊方便的同时，也空前重视标签使用的语义化，人们恨不得一下就去改变由div+css所带来满眼的div。新增的结构性标签有很多，比如header、nav、footer、aside、section、article等。\n\n但有个问题还是令不少人犯难，前面的几个都还比较好理解，后面两个到底是什么意思呢，如果按照直译过来的意思。section：“部分”，article：“文章”。这显然无法很好的去区分，为什么呢，因为“部分”这个词儿，意思太模糊，“文章”里面也可以有“部分”，“部分”里面也可以有“文章”。权威指南里是这么进行说明的。\n\narticle：代表文档、页面或应用程序中独立的、完整的、可以独自被外界引用的内容。\nsection：用于对网站或应用程序中页面上的内容进行分块。\n\n大家注意两个字眼就可以较好去区分它们的用法：“独立、完整”和“分块”。\n在实际应用中，的确像上面所说它们俩可以互相包含，但这并不代表是可以替换，完全是两个概念。还是举例子看的更直观。\n\n     <article>\n      <header>\n        <h1>苹果</h1>\n      </header>\n      <p>苹果是一种很好的水果。</p>\n      <section>\n        <h2>评论</h2>\n        <article>\n          <header>\n            <h3>发表者：张三</h3>\n          </header>\n          <p>苹果好吃</p>\n        </article>\n        <article>\n          <header>\n            <h3>发表者：李四</h3>\n          </header>\n          <p>苹果对身体好</p>\n        </article>\n      </section>\n    </article>\n\n这里是个简单的示例，首先，这里有一段话是描述苹果的，下面的评论也是关于这篇文章，整个是一体的，此所谓“独立，完整”，而section在这里负责的是评论区这一块儿，把评论这个区块儿给分了出来，跟上面的标题和正文做个区分。那或许有人又要问了，上面说的是挺合理的，那下面的评论区，怎么还用到了article呢？就那么一小块儿，这里就要消除一个可能走进的误区了，标签不是按内容的多少和看起来占的块儿大小来分的，语义的意思是，它代表着什么，要表示的是什么，而评论区里用article，是因为，李四所发表的评论，跟张三毫无关联，互不影响，它们是独立的，完整的。\n\n可以再来看一个例子\n\n    <article>\n      <h1>苹果</h1>\n      <section>\n        <h2>红富士</h2>\n        <p> 红富士是从普通的富士选育出的着色系富的统称 </p>\n      </section>\n      <section>\n        <h2>国光</h2>\n        <p> 又名小国光、万寿 </p>\n      </section>\n    </article>\n\n在这个例子中，section并没有用来区分文章主体和其他，而是用来对文章进行段落划分，大家可能也注意到，里面是包含了一个标题和一段文字。下面说注意事项。\n\n说了这么多，大家可能还是觉得二者区别不大，其实，article这个标签，可以看做是section的特殊种类，它同样是分出了一个部分，不同的是这部分的“独立性”。\n\nsection使用的几点禁忌：\n\n1、不要将它作为设置样式的页面容器，那个是div要做的事。\n2、如果其他的元素，比如article、aside、nav等更合适，就不要用section。\n3、不要为没有标题的内容区块使用section。（上面代码处有提过哦~）\n\n好了，关于这兄弟俩的用法问题就先说到这儿了，希望对你有所帮助。欢迎交流。","tags":["HTML"],"categories":["HTML"]},{"title":"在不是终点的”终点“，等风来~","url":"/2014/11/09/在不是终点的”终点“，等风来~/","content":"\n雄霸天下，成也风云，败也风云！\n为什么留，为什么走？\n\n是的，我又走了，第一次走是5个月前，每次离开，我都挺纠结的，虽然内心的答案是清晰的，但我对每一份工作都是有感情的，当希望变成了失望，无力再挽回。\n\n知道的都会问我：为什么换工作这么频繁？是的，我两份工作所持续的时间或许还没大多数人一份工作的时间久，可我又何曾不想有一份长期稳定的工作来好好发展呢？至于原因，在这里也就不多说了。我自认为是个有耐性的人，不到迫不得已不会做出告别的决定。既从我心，便也无悔！\n\n这一年多以来，我很少给自己放假，真正的放假。由于一些不堪回首的往事，给我造成了很多需要去弥补的东西，有太多不足，太多营养需要吸取，觉得哪怕一天48小时也吃不饱，所以，就一直这么过来了，五一、中秋、十一。。所有，但这次，刚过了十一，11月我决定给自己放个假，趁这个时间给脑子减减负，整理一下头绪，因为接下来的任务，不会比之前的更轻松，或者说，只会更重。但，既已选择，便欣然前往！~\n\n在不算长时间里，我经历了两家创业公司，第一家给了我入行的机会，虽然薪水不高，但意义很大，第一次踏入职场，感受职场氛围，第一次正式做网站.......很多的第一次，所以，不管最后我离开的原因是什么，对它的感谢是不会变的。第二家，虽短暂，情感也复杂，我曾为自己的选择感到庆幸，觉得公司太好了，老板太好了，什么都不用说，都给办的很齐备，为每个人的方便办公提供了能提供的最好条件，薪水也比之前的高，团队成员也多样化，设计，后台，前端，安卓，ios，看起来是一只蛮有战斗力，触角伸到全平台的团队。但是，随着一些事情的发生，一切都悄悄改变，直到，变化到我无法承受之重。虽然压力不大，工作不忙，但内心告诉我那不是我希望看到的，项目更换，人员流失，看不到一丝会好转的迹象。就到了不得不说再见的时候。同样很感谢这家公司，前端由我一个人全权负责，有句话叫”能力越大，责任就越大“，而我恰相反，因为责任大了，我不得不让自己看起来很有能力，顶着压力去一次次的攻克难题，初次接触移动端页面制作，靠自己摸索，很多次都觉得要完了，但后来都挺过来了，在提升了技术能力，积累了经验的同时，也很好的锻炼了抗压能力。\n\n之前几次假期，都有朋友或者家人让我好好放松一下，出去玩儿玩儿，可我满脑子都是技术，书籍，代码，事业。也就没有考虑什么大的游玩儿计划，现在，我却给自己放假了~\n\n等风来，是几个月前一个朋友给我推荐的一部电影，说好看，我一直没看，也想象着，到底是有多好看？动作片？特效很炫？情节很精彩？或者很搞笑？当我这次有时间也有心思去看了，才发现，都不是，讲了一个什么故事呢？几种不同类型的人，共同到了尼泊尔，去洗涤灵魂，叙述了几段往事和内心独白，这社会多残酷，人面有多假，人有多无奈~或许这部走进原生态的电影，真的是一部好电影吧。剧中有句话：别瞎折腾，没什么用~（对我这类人说的么，呵呵）\n\n”你可知道什么原因有人羡慕你  只因为他们曾经也年轻，你可明白什么道理有人嫉妒你 只因为他们不能抓得紧“\n\n要开始一段新的未知旅程了，是的，我还年轻，我也要抓紧！期待出发！~","tags":["思考"],"categories":["思考"]},{"title":"为标签正名之“也谈语义化”","url":"/2014/11/03/为标签正名之“也谈语义化”/","content":"\n标签语义化这个词儿，很多人提，也提了很久，至于好处呢，也都至少能罗列个两三条，譬如：有利于seo（这条快被说坏了~）、代码结构更清晰，增强了可读性等等。那为什么提了这么久，很多网站的代码语义化做得还是很不够呢，当然了，这个某种程度上也“归咎”于浏览器，为什么这么说呢，谁它不管三七二十一只要认识，哪怕不规范不标准的东西，都尽量好好显示出来呢？这是它的好，却也纵容了页面仔的坏习惯。除了这个呢，下面两个估计也是很重要的原因。\n\n## 一、元素渲染方式简单\n\n按大的类来分，涉及到结构，就两种，“块级”和“行内”，这样导致什么呢，只要能正常的，按照想要的方式给显示出来，没有多少人会去太在意是不是语义合适，或许很多人说，我能做好代码的组织和优化，能做好浏览器良好兼容性就行了，结构不必那么较真，交给css去自由发挥呗，呵呵，其实远远不够，下面就来“审讯”CSS~。\n\n## 二、结构、表现分离\n\n这同样是除了小白是个人都知道的东西，但有没有想过多少人因为这句话，就分离了自己的“价值观”？~为什么分离？分离了之后我们就只需要去维护css？css功力够好就万事大吉了么？我曾经跟一个人聊天，当时挺正常的聊天，然后，那时公司也准备招人，我就问他有没有意向，然后问了一点技术上的问题，令我感到诧异的是，在没有给出任何要求和提示的情况下，他就跟我说了一堆怎么居中，哪块儿浮动到哪边，再然后，几句话的过程，一个页面就被它“说”出来了，当时我在想，网页真如它所说的可以信“嘴”拈来？他真的很厉害？我当然相信他能写出网页，但是，我肯定不相信它能把html给写好。结构和表现分离并没有错，写好css更没有错，但是，咱能不能先把结构写好呢？一个好的结构不仅增强了代码可读性，同时也大大减轻了css的压力，你是否常常因为要加强一条样式规则的权重而去增加嵌套层级？你是否因为一个容器里包含了太多的p或者span，但你却要为其中一部分应用不同的样式，无奈之下多定义一个类？增加了html代码的“补丁‘不说，还要为起个类名想半宿（都懂的，很蛋疼）。其实用好了标签的语义，就相当于为它省掉了一个类，省去了二次说明。随着css3选择器的增强，这种情况是会有所缓解，但是否能让更多的人重视结构还有待观察。\n\n## html简单？\n\n圈儿里流行这么个说法——“html很简单，常用的标签不多”。这句话一般用来安慰和鼓励没什么基础，又有恐英语初学者，可是，人的思想总是习惯性往前走，也是会自动发散的，当试用了那仅有的几个标签就能满足自己的常见需求，紧接着css，当又遇到了js，jq......偶My God！这似乎一个比一个高端大气上档次，也一个比一个难啃，于是倾力为之，陶醉其中，也迷失其中，久而久之，忘了看看来时的路，以至于在跟别人聊起前端技术的时候，三言两语带过了html，大谈css，js，特别是现在“新”技术盛行，css3，各种css，js框架，哪有功夫去理html？人们更加注意的是，一个工具多么牛掰，一个效果炫到多么不可思议。html真的简单么？答案是否定的，特别是，正在进入的html5时代，它就更不简单，现在重视起来还来得及。\n\n那么问题来了（不是挖掘机哈！~）\n\n当要在网页中放入一个插件要用什么标签？播放多媒体文件呢？图象热区呢？文章标题除了h1~h6还能用什么？联系人信息要用什么？<em>和<strong>的区别是？你知道存在<code>和<var>这样的标签么？表格除了<table>,<tr>,<td>,<th>你还知道哪些呢？你知道<p>是吧？那<q>是神马？你知道某些标签已经被抛弃了但是它的功能被加入了css3的属性么？好吧，这些咱以后慢慢聊。\n\n最后一个问题，html总共多少标签？（自己慢慢数去吧~）","tags":["HTML"],"categories":["HTML"]},{"title":"轻松入门css3之border-image","url":"/2014/10/05/border-image/","content":"\n话说大家不管用过没用过，对border-image应该都有所耳闻，相比css2.1，css3的新东西那么多，为什么要挑这个来说呢，因为我个人经验来说，这个相对来说较难理解。那它到底是什么，又怎么用呢，有哪些需要注意的地方？这方面也有书籍和文章讲，如果你看过，却觉得没搞懂，也没弄明白怎么回事，那么希望这篇文章可以帮到你！我不会按常理出牌~\n\n首先要跟大家说的是，不要先入为主的走入一个死胡同，不然很难走出来，图片边框，跟使用线型边框的时候不一样，这个思维要转换过来，使用线型边框的时候，你只需要设置“边框宽度”、“类型”和“颜色”。那么边框就出来了，使用图片的时候你可不能照搬，它有自己的一套规则，所以，请清空你的脑袋，忘却才能更好的学习（这话好像在武侠片里比较常用）~\n\n你需要掌握的要领只有两点：\n\n一、图片裁剪的方式\n二、为什么要裁剪，裁剪完之后做了哪些动作？\n\n## 先来说第一点\n\n不要觉得这是有多麻烦，多深奥，大家都玩儿过一种智力游戏吧，叫做“你能用几刀把一个正方形切成九块？”或者说“只用几刀你能把什么切成多少块”，等等。图片裁剪是一个道理，是不是瞬间觉得亲切很多？它就是横竖各两刀来把你所选取的图片切成九份，就是很多资料里说的“九宫格”模样，是怎么切的呢？注意，切的次数是4，这个数字蛮熟悉的吧，margin、padding、border等这些都是有四个方向的规则吧，此处也一样，遵循上、右、下、左，那是怎么测量的呢？你应该猜到了，是从边缘向里测量，也就是上边缘向下，右边缘向左，依次类推。像其他规则一样，你同样可以简写之，写一个，两个、三个都没问题，有注意事项会在下面奉上！~\n\n## 再说第二点\n\n或许会有人说，我看你说怎么测量，怎么裁剪，头都大了，到底是要干嘛啊？我就用个边框还搞这么复杂。相信我，并不复杂，为了更好的说明裁剪完成之后干嘛，来拿张图片，这也是w3c教程网的图片\n\n![](border-image/1.png)\n\n先这么粗糙的给大家画一幅，已经切成九块了对吧，那接下来，要干嘛呢，要发功了！呵呵，开玩笑。\n\n图片边框的绘制进入了最后一步，也是最关键的一步：\n\n切记，四个角是不动的，也就是说，当你应用了这个图片作为边框，四个角还是红色菱形，你也控制不了它（除了尺寸）。那中间呢，中间也是不显示的，大漠哥的文章里把它称为“盲区”，是的，拿掉！就只剩四个黄色菱形了。接下来，我们就来正经的讲一下，会发生什么。我做一个形象的比喻吧，给元素加上这么一个边框，就相当于找了一个图片，然后按你想要的区域把中间掏空，接下来向四周撑开！\n\n来看一下格式：\nborder-image:url(图片路径)    裁剪尺寸   裁剪过后的显示方式（就上图来说，就是四个黄色菱形的排列方式）\n\n排列方式有三种round、repeat、stretch分别来看一下是什么效果\n\nround（平铺）\n\n    .box{border-image:url(\"../images/border.png\") 27 round;border-width:27px;width:800px;height:100px;background:#0CC;}\n  \n效果\n\n![](border-image/2.png) \n\nrepeat（重复）\n\n    .box{border-image:url(\"../images/border.png\") 27 repeat;border-width:27px;width:800px;height:100px;background:#0CC;}\n\n效果\n\n![](border-image/3.png) \n\nstretch（拉伸）\n\n    .box{border-image:url(\"../images/border.png\") 27 stretch;border-width:27px;width:800px;height:100px;background:#0CC;}\n\n效果\n\n![](border-image/4.png)\n\n注：IE开发者平台还给出了另一种方式：space，据我测试，跟repeat没看出来有什么区别，你可以试试，如果有新发现欢迎交流~\n\n好吧，三种展示完了，相信用过背景图片或者设置过电脑桌面图片的人，对平铺和拉伸都很熟悉吧，这个不难理解。现在该说注意事项了。\n\n短短的一段代码到底藏有多少玄机呢？（故弄玄虚了哈~）\n\n1、图片路径一定不要错，可为绝对或相对路径\n2、大家应该注意到裁剪的数值，用了27，这是因为图片的宽高均为81，使用27能把它的边进行三等分，剪出三个完整菱形，说白了就是好看，你想用多大用多大，这个不影响你成功的使用它，当然，要在原图尺寸范围内，你也可以尝试0或者81是什么效果~另外，它没带单位，是的，它默认单位就是“px”，带上单位反而会错！！\n3、使用显示方式的时候你可以只写一个，就像我上面那样，也可以写两个，但切记，你不能以此类推的说，可不可以写三个或者四个呢？不行！不仅诸如 round repeat stretch这样的不行，round repeat round和round repeat round repeat这样看似合理的也是不行的！！当然，你不写也可以，默认值是 stretch。\n\n给出stretch round 结合的效果，注意，前面一个控制上下，后面一个控制左右。\n\n![](border-image/5.png)\n\n4、边框的宽度，首先这个是必须设置的，不然是不会有任何反应的，另外，边框的宽度和原始图片无关，原始图片只是你用来做选取的，你所设置的边框宽度比选取的部分更大或者更小都没有关系，可以是任意的正常数值，你所选取的部分图片会等比例缩放以正常显示\n\n以上四点，便是需要注意的基本的东西，任何一点出错你都将看不到任何效果，如果你在练习的时候出现问题，可以先检查一下，另外，注意单词的拼写这样的低级错误不要犯。\n\n其实，你还是会有一些困惑的，不是么\n\n## 一、repeat和round怎么那么像呢，有什么区别呢？\n\n是的，这哥俩是很像，你也可以看出来，repeat似乎不像round那么完美，是会在两端留有瑕疵的，我们可以看做是它仅仅承担了重复的任务，而且是有中间向两端进行重复，而round不仅承担了重复的任务，还平衡了一下总宽度和所选取部分图片的宽度，让图片刚刚好能完整的平铺。\n\n## 二、为什么不能直接选择一个图片，控制大小，控制水平、垂直方向的显示方式就完事儿了呢？\n\n 如果真的是那样的话，也没什么不可以，但是现在这种做法能完成更多更有意思的东西，而且，使用好边框图片需要做好两件事情，第一是做出一张好的图片，第二是以你想要的方式进行裁剪，这样赋予了它更多的灵活性，而且，如果你有足够的好奇心和创造力，它的强大超乎你想象！上面只是一个简单的实例，如果你想，你可以把四条边和四角换成任意图象，这都由你来决定！~比如上例，你把菱形全都做成红色或者黄色，那么就是一个四边完全一致的图片边框了，so easy！~\n\n说了这么多，上面是要做出边框的必备事物，该献上border-image的完整格式了\n\nborder-image: url(\"图片路径\") 裁剪尺寸 /边框宽度 /边框图象超出边框的量 显示方式;\n\n看到这个你会说，怎么比刚才多出两个呢，是的，这个是把所有的都缩写到一条规则里了，而且要按照格式来，比如“/”是\n不能去掉的，不然整条规则又一命呜呼了，那边框图象超出边框的量是什么意思呢？我们所设定的边框图象是占据了所定\n义的固定宽度的空间，默认超出为0；下面给出超出5px的样子。\n\n    .box{border-image:url(\"../images/border.png\") 27 /30px /5px stretch round;\n\n![](border-image/6.png)\n\n看到区别了么？四边都超出去了5px，作为常理，像这种用来控制距离的东西，可以正\n就可以负咯？不好意思，这个真没有！~但是它可以遵循上、右、下、左的规则，也可以简写。\n\n总结，如果你想简写\n\nborder-image: url(\"图片路径\") 裁剪尺寸 /边框宽度;\n\n这个组合就是必须的了。其他用来锦上添花。\n\n说了这么多，不知你是否已经明了？如果还是没明白，那么请动手做一下吧，只要提到的那四条注意事项不出错，基本就没问题了。另附大漠哥文章[css3-border-image](http://www.w3cplus.com/content/css3-border-image)，个人认为，你先能做出来基本的效果再看收获会更大，还有惊喜，不然可能很晕。\n\nIE开发人员中心[相关内容](http://msdn.microsoft.com/library/ie/dn384064.aspx)\n\n欢迎一起交流学习，加入我的企鹅群你将得到更多哦！~web前端~美是编出来的：152128548","tags":["CSS"],"categories":["CSS"]},{"title":"你不该忽视的小问题之margin叠加篇","url":"/2014/10/03/你不该忽视的小问题之margin叠加篇/","content":"\n在我刚开始学习html的时候，几乎所有会的人都说最多一个星期就学会了。当我学习css到了一定阶段的时候，觉得也挺容易的呀，为什么有那么多人都做了那么久，还在那儿研究什么呢？与此同时，还有很多人去吐槽jquery，说它就是设计师玩儿的东西，前端敲代码的你应该去研究js以及各种框架诸如此类等等，反正你要让自己在搞的东西别人听了觉得高大上、不明觉厉就对了。这样的现象也不能说不好，因为毕竟还是在不断的学习，可是，不得不说也是浮躁的表现，高手用树叶都能杀人，你却一直只想要绝世好剑，在鄙视自己的道路上前进不止~问题是你也顺便鄙视了别人，呵呵。\n\n每种技术确实都存在着一些不足，但亮点也绝对是大于不足的，还远没到被你说烂的地步，不然它也不会那么流行并且被你知道和愿意学习。\n不多说了，回到正题——margin。\n\n我们平时在写代码的时候，经常会拿一个词用来形容显示异常，叫“bug”。bug它也分为“人为”和浏览器。margin的这个叠加算不算呢？~在遇到这些问题的时候，你绝不能仅仅是觉得不对劲，或者以一句“应该是浏览器的问题吧“去敷衍过去，而是要进一步寻求真相。\n\n## margin的叠加有三种方式\n\n第一种方式我觉得大家都不会去忽视，那就是两个上下相邻的元素，上边元素的下外边距会与下边元素的上外边距叠加，叠加的意思不是二者相加，而是取更大者。\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n\n绿色边框是h2标题，未消除底外边距，计算之后近似12px，但红色箭头所标出的外边距为30px，是蓝色边框容器所添加的上外边距。此为不同元素间的上下重合。\n \n第二种是有容器之间的嵌套，父元素和子元素外边距也会相叠加，有一个条件是，中间没有边框和外边距存在，那到底是谁没有边框或者内边距呢，父元素还是子元素？\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n\n 此图中，蓝色边框30px上外边距未变。红色边框元素添加了50px上外边距，看起来很正常，\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n\n 把红色边框的上边框去掉了，也正常\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n\n 此图中，蓝色边框去除，哇偶，父子紧紧贴在了一起亲密无间~而且父元素和上面的元素的边距变成了50px！由此可见，取决于父元素的边框~那么，加个内边距试试呢？\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n\n咱给父元素加了10px的内边距，好吧，父子又分离了。由此可见，内边距也是取决于父元素。\n子元素加内边距和去除边框的情况就不在这里跟大家展示了，已测对边距叠加无影响。\n\n第三种呢，那就是，自己跟自己打架。同样要求无边框和内边距。\n为了方便（也就是方便我自己罢了，哈哈），咱在刚才那个红色边框容器里加上个容器\n\n你不该忽视的小问题之margin叠加篇 - 灵感 - linggan\n \n 再澄清一下纯属为了方便哈，跟另外俩容器没任何关系，当然，可以用来对比。不过。。咦，你加的是啥？容器呢？你这么做可不好，什么都看不到怎么能明白呢？！\n好吧，千万不要怪我，下面分开解释\n\n一、自己跟自己打架是有个前提的，那就是，元素为空，空是什么意思呢，内容为空，而且没有高度，这样上下外边距就碰面了，就可以打了~所以你什么都看不到了。\n\n二、你说什么都看不到，但我明明看到了啊，红色容器不是被撑开了么，这就是奥妙所在，其实我在里面放了俩容器，而且，都加了外边距，什么？是的，都各加了30px的上下边距，什么？！是的，你没看错，理论上讲，这里应该有120px像素的高度出来，就算加上上面说的上下元素的边距会发生叠加，那也有90px吧？好吧，咱就算再退一步讲，中间30px也没了，那咱得有60px吧至少，可结果就是，只有30px了，这是见人杀人，见佛杀佛的节奏啊，这么一个小小的空白信息量也太丰富了吧？是不是醉了？~如果，你还是不相信它的残忍，再加几个也没关系，结果相同，还是30px。\n\n友情提示，这种外边距叠加只是在普通流的块框元素才存在，而且是垂直外边距！行内框、浮动框、绝对定位框，没有这些叠加的出现。\n\n好了，margin叠加的事儿咱就先说到这儿，其中奇妙还得各位自己去感受了。\n\n第三种情况应该是极少会碰到的，因为一般不会出现这种用途的空元素，如果你只知道第一种而不知道第二种，那请相信你早晚会碰到第二种的，碰到的时候你会怎么办？索性不用外边距了？这的确是一种方法，可是，你不会总是能躲过去一些问题。\n\n就像是文章开头所说的那样，这个话题只是一个引子。其实一个人的技术水平的提高就在于，不要勤于去说”知了“，而是要勤于发问，为什么？真的是这样么？还可以怎样？然后去实践、验证。再者，每个人都不会是全面系统的学习了之后才开始做页面的，都会时常带着一种兴奋去尝试，这样就难免只看到了知识的一面而漏掉了其他，或者理解不到位。时间长了就会遇到所谓的”瓶颈“~时常的去回顾，或者多找资料多方学习，才能让自己不断发现自身不足，不断进步，更全面，功夫更深。与大家共勉！~欢迎一起交流。\n\n另推荐《精通css：高级web标准解决方案(第2版)》这本书，更适合有一定css编写经验的人看，收获会更大\n\n因朋友提醒，又参考了一下别人的资料，在margin叠加的条件方面做如下修正：\n[相关链接](http://www.smallni.com/collapsing-margin/)\n\n## 1.父子元素（分2种情况）之间发生margin叠加的条件：\n\n父元素和第一个子元素发生margin-top叠加\n父元素没有创建BFC（文章底部对BFC有简要介绍）\n父元素和第一个子元素之间没有非空内容\n父元素没有border-top\n父元素没有padding-top\n\n父元素和最后一个子元素发生margin-bottom叠加\n父元素没有创建BFC\n父元素height为auto、min-height为0\n父元素和最后一个子元素之间没有非空内容\n父元素没有border-bottom\n父元素没有padding-bottom\n\n2种情况都总结了，那么让他们不发生外边距叠加也就显得很容易了：\n\n为父元素创建BFC\n为父元素设置相应的padding或者border\n\n## 2.兄弟元素之间发生外边距叠加的条件：\n\n兄弟元素都不是float元素\n兄弟元素都不是absolute元素\n兄弟元素都不是inline-block元素\n\n## 什么情况下会创建BFC ——Block Formatting Context （块格式化上下文）？\n\nCSS 规范说明了在下列这些情况下会创建新的 block formatting context： \n浮动元素（float: left | right）； \n 绝对定位元素（position: absolute | fixed）；          行内块元素（display: inline-block）； \n表格的单元格（display: table-cells，TD、TH）；  表格的标题（display: table-captions，CAPTION）； \n'overflow' 特性不为 visible 的元素（除非该值已经传播到viewport）； 表格元素创建的 \"匿名框\"  \n\n注意，\"display:table\" 本身并不产生 \"block formatting contexts\"。但是，它可以产生匿名框 6， 其中包含 \"display:table-cell\" 的框会产生块格式化上下文。 总之，对于 \"display:table\" 的元素，产生块格式化上下文的是匿名框而不是 \"display:table\" \n注意，是这些元素创建了块格式化上下文，它们本身不是块格式化上下文。\n\n修正告一段落，具体大家可以自行验证，欢迎学习交流！~","tags":["CSS"],"categories":["CSS"]},{"title":"万丈高楼平地起——实践为王，应需而生","url":"/2014/08/30/need-practice/","content":"\n在文章开头，按照惯例（哪儿来的惯例~），先闲聊一下抒发一点点感想吧。\n\n此次文章的想法来源于我正在做的项目当中的作品评论功能，此前我是没做过的，当时拿到设计稿之后，感觉，挺简单，不就一个列表而已，后来，到最后，也真的挺简单，可是，也真的，相当复杂。做的过程中遇到过很多问题，反复的去查看手册，向同行、前辈们请教，在此一并感谢了~当然，还有同行说：不是有插件么，实现起来挺方便的。在这里我要说为什么我没有用那些插件，首先就是，初看觉得挺简单的，自己应该能搞定，再者，我真的不想再去搬代码，然后要去研究，去把它改成自己项目当中要的样子，多余的还要去掉等等等等。所以，我就这么上路了，也就有了现在满满的收获。技术圈永远那么和谐又充满爱对吧，so，拿来跟大家分享一下。当然，此文只涉及前端实现，不涉及后台。顺序是：案例功能分析、所用技术罗列（jq）、注意事项、结束语~\n\n先来说功能，按区域一一道来：\n\n## 一、输入框\n\n![](need-practice/1.png)\n\n![](need-practice/2.png)\n\n借用一下大家灰常熟悉的QQ空间评论框，当然，我们要谈的功能不会这么多，只要输入，发表，即可，你要记得我这里说的是“即可”哦。\n\n第一步，输入框我们要用什么做呢，你觉得这不是个需要考虑的事儿？是的，可以用textarea，但是，div可不可以呢，这也可以吗？！如果你不知道，那么就去看看“contenteditable”这个属性，点到为止。然后你会觉得，本以为我知道的差不多了，到底还有多少我不知道的啊？\n\n第二步，它里面好像有字呢 ——“说点什么吧”，这个怎么实现呢，你知道QQ怎么实现的吗？这哥们儿用了两个div，my god！当时我那个对它满满的钦佩，点击之前是一个div里面装的是“说点什么吧”，点击之后隐藏之，显示另外一个空的div。说实话我用的也是这种方法。只因那一瞬间的震撼，方法千百种，只要你敢想呐，不过后来我就悟到，其实没必要这样，你可以只用一个div，给里面填上几个字，获取焦点的时候清空即可，注意，这里就有一个小陷阱哦，我说的是获取焦点的时候清空，那，如果我输入了文字，鼠标点击了其他地方再回来，oh，它也空了，这可不行，所以，需要做条件判断，判断什么？内容，怎么判断，可爱的——if！粉末登场咯！点到为止！~哦，对了，忘了一个，你需要获取文本内容！~\n\n第三步，如果我点击了之后，啥也没输入，又点了出来，这是再正常不过的操作，这里可能会涉及两个东东，一、点击此物一个反应，点击除此物之外的区域，另一个反应。二、获得焦点的时候一个反应，失去焦点的时候另一个反应。\n点到为止！~\n\n第四步，我点击了，也输入内容了，那就发表吧，爽歪歪，很多童鞋都知道下面要干嘛，评论嘛，一个列表嘛，点击发表新建列表项，插入嘛！停！because，哪里来的列表？是的，还没有评论的时候，是木有列表滴，是的，你需要新建列表！建完之后，你得把它插入，这里有两个插入，列表插入和列表项插入，问题又来了，怎么插入，内部还是外部？最前还是最后，还是在某个特定位置？都可以，点到为止！~oh，停！我怎么知道列表在不在呀，难道每次发表的时候都去新建啊？当然不是，那，你还需要判断ul是否存在，方法不止一种，可以结束了，oh，好像还漏了一点，到底有完没完啊？！~我发表之后，输入框怎么办呢，文字要赋给新建列表项，然后呢，将其清空还是怎样，或许你突然觉得，我点击完发表，那输入框不就算是失去焦点了吗？那点击事件和失去焦点事件，到底哪个说了算啊？它是不是会自动的回到\"说点什么吧\"呢？能不能呢，你去试试吧！~\n\n到此，关于输入框的东西告一段落，可能还没完，可能~额，还记得之前说的那个”即可“么，别打我哈！\n\n## 二、列表\n\n![](need-practice/3.png)\n \n为了不暴露他人隐私，我就拿我和韬哥的一段来给大家看看吧，他应该不会介意~先说明我们做的不一定是这个样子，随你做成什么样，但道理都一样。\n\n第一步、首先，列表项大家都懂对吧，而且，形式一样，功能一样，长得一样，那既然都一样，我们会想到两个东西，一个是可以对其中的样式都用”类“定义，另一个就是”克隆“，而且如果你用克隆（clone），里面的一个参数取”true“的时候，那简直是，你可能就不用再掉进下面我要说的一个大坑里了，我说的是可能，我的项目里并没有用，至于原因我记不起了，大家可以自己试试。\n\n第二步、每条评论都是可以操作的是吧，比如，你发表的评论，别人是可以回复的，如果，诸如：回复、删除等等不显示出来，移入哪条评论区，那条评论的操作才显示出来，移出就消失掉呢？这个不难，加上移入移出事件。\n点到。。\n\n第三步、怎么回复呢，需要输入框，.......又是输入框，没错，这个倒霉蛋又被我们碰到了,输入文字之前，我们需要处理好这样几件事情，首先，，那如果我要回复的输入框一开始不显示，点击回复才显示，再点击就又不显示了呢？好办，加个交替点击事件，这里也有坑，下面讲。那，输入框是让它直接显示隐藏呢，还是淡入淡出呢，还是展开收起呢？好多方法啊，那个高兴，可也，那个纠结，嘿嘿，随你喜欢哪种，或者用户喜欢哪种！~\n\n第四步，补上第三步里面该说的一点，放在第四步说是因为点太小了~那就是，输入框在三种情况下收起，交替点击时，取消回复时，发表回复时，如果你漏了，你自己都会觉得那么别扭，当然三种情况是不同的，这就是第四步要讲的重点。首先，回复的框也是要有预填文字的，比如：”回复@XX“，先说点击回复，点击回复的时候，展开，里面有文字，输入框获取和失去焦点跟评论一样，这里不再说。点击取消，则清空输入框并收起，其他不需要任何操作。点击发表，那，是不是相当于我们又在重复发表评论时候的那一套呢？我知道你不想回到那条路~但就是那样，你需要判断，插入等等等。当然，这是在列表为二级的情况下，如果评论和回复都在同一个列表中，那就不必了，因为如果没有列表，你是不可能回复的，so不需要判断，然后你要把框内文字赋给新建的列表项，然后清空它，收起输入框！~\n\n第五步，为什么要有第五步，这不是大功告成了么，既可以发表评论，又可以对评论发表回复，破费科特呀！~哥们儿，还记得我们的回复是怎么来的么，是新建来的，那么既然如此，我要告诉你一件不幸的事情，那就是，你所加的事件，在动态创建的新元素里，相当于没了，这可怎么办呐！要命啊！~别急，还有个东西叫——”事件代理“，代理可用方法种种，\n点到。。~\n\n第六步，是的，你没看错，还有第六步，你可以想象平时自己使用的时候，出现过两个输入框同时打开使用的情况？对的，当有多个列表项，你操作了一个输入框并输入了文字，没发表之前，又去操作别的东西，比如打开另一个输入框，这个时候，会有提示你——”是否放弃当前正在编辑的文字“，选择放弃或者不放弃，那又是两种不同的操作，jq里提示框大概有三类——直接警示、给提示语可确定或取消、你要输入文字进行确认。这里当然是第二种，如果确定，则清空之前输入框并收起，取消则原封不动。\n\n貌似，功能分析可以告一段落了。\n\n下面开始罗列所用技术，分类罗列（这里只是部分，具体自行查看手册了解）：\n\n显示隐藏：css：display——block/none       show()/hide(),   fadeIn()/fadeOut()   slideDown()/slideUp()\n焦点：focus()/blur()\n获取(代码/文本)：html() / text()\n新建：$(\"代码\")\n插入：append()/appendTo()    insertBefore()/insertAfter()\n移入移出：mouseenter()/mouseleave()  可用hover(fn(),fn())替代\n交替点击：toggle(fn(),fn());\n克隆：clone();\n事件代理：live()   delegate()   on()\n同辈元素选择：sibling()\n提示框：alert()  confirm()   prompt()\n当前项选择：$(this)\n筛选：next()/nextAll()    prev()/prevAll   parent()/parents()/parentsUntil()  closest()   children()\n判断是否：is()\n以上简要列出，供大家参考而已，方法可以多种，用法也各异。\n\n## 注意事项——群坑荟萃：\n\n一、千万，千万，千万（我要有这么多钱就好了~），千万别把变量给弄成字符串！（除非特殊情况，你就是要知道它的名字）编程里面有个很有用，特别有用的东东叫变量，因为它就是个无限大的盒子，想往里装什么就装什么，它可以帮你做很多事情，但是如果你总是习惯于诸如 alert(\"变量\");这么happy的写法，那你会很不happy~\n\n二、接着上面一个顺便说一下，当做选择器的时候，诸如，类，id这些要把”.“和\"#\"加上，但如果仅仅是要用到它们的名字，则不要加了，否则你又不happy了\n\n三、还记得我们之前谈到列表项时，因为很多的”一样“，而给列表项里面的所有都用\"类\"来给样式吗？这样子当然没问题，可是当我们要给它们加事件的时候，就必须给它们规定作用域了，不然，你会看到它们队形整齐的全都动起来，虽壮观、但悲催呀~这时候$(this)就是个很好用，也很必要的东东，当然，要结合其他的筛选方法才能精准定位作用对象哦！~\n\n四、关于事件代理，不要被这个词儿给吓到，只需关注它的意思和是干嘛的就行了。在这里它是用来解决动态创建元素的事件问题，那它的原理是什么呢，有人说是事件冒泡，我简单解释一下，我们都知道元素可以嵌套，那么我们要动态创建的元素是在里层，要加的事件也是在里层，代理的意思是，你先把事件交给外层，等到你操作了要加事件的元素时，会由外往里去”寻找“匹配元素，找到即生效。这里我要告诉你一百个注意！如果不注意，你在这个坑里挂掉可别找我——你交给的这个外层不能也是新创建的元素！！！所以，这个外层不能简单理解为是它爸，而是它的固有祖先元素，因为它爸，甚至它爷爷都可能是新创建出来的，那就无效了！为什么我要着重强调这一点，因为我就是在这个坑里待过很久，说多了都是泪！~\n\n五、事件冒泡，太多说它的资料了，我不详述了，就是多层嵌套的元素，里层元素的事件层层向外扩散，导致很多事件重复执行或者看起来是无效的，具体大家自己找资料研究一下，我就偷个懒~\n\n六、jquery有很多版本，对里面的选择器，筛选方法和事件的支持可能会有所不同，有时候，如果你用了某个东西，而它压根儿就没生效，在排除了其他错误之后，那就是版本支持问题了，比如toggle()的点击,在jquery-1.9版本就不同了，当然，是有弥补措施的，可自行查阅。\n\n本文所谈内容尚浅，但你应该看出来了，我要说的不仅是评论这个东东。更多的在于从功能方面去做何考虑，跟所需技术是怎样联系起来的，你也可以感受到jq，甚至js是怎么运用到网页当中，什么时候该定义变量，如何理清各元素之间关系，使用合适的选择器和筛选方法去找到作用对象，什么样的效果用什么方法，等等。而做好这些的前提是正确认识概念和用法！！\n\n该结束了，再说一段儿吧，写程序就像是写文章，都是需要逻辑，组织的好了，则结构清晰、行云流水、感人肺腑，而且你不会去管多少字，万丈高楼也是从地基开始一砖一瓦堆砌起来的。当然，程序也要求必要的精简，通用性等，此不详述。另一个理解是，程序的执行和人的思想、行为是挂钩的，要求很严格，不允许出任何的疏漏，人的行为到了哪里，那你的考虑范围就要到哪里，没有到就出问题了，当然你也可以去挖掘新的东西。这里就要回归到本文的标题——实践为王，应需而生！\n\n啰嗦了这么一大堆，问题再所难免，还望谅解。事实证明，我是没办法也没能力把所有事情都告诉你们，呵呵，不过，说过的给你们惊喜，没让你们失望吧？技术这个东西就像我们以前对学习的形容一样，看似内容很多，先把”厚书“读薄，再读厚，就能有所小成。多实践，坚持！让我们一起加油吧！~关于此文，有兴趣可以直接找我交流","tags":["思考，技术栈"],"categories":["思考"]},{"title":"初谈怎样更好的去规划CSS","url":"/2014/08/16/初谈怎样更好的去规划CSS/","content":"\n我是个什么都谈不上的不合格的前端~但还算是个有点追求、不断前进的前端，我希望自己的代码更合理、更高效、更优美。为了照顾一下基础稍微薄弱一些的人，我会从浅到深的逐步去说这个事儿。\n\n学习前端技术，基本上都要从html、css、js这么一条线走过来，那么最先写的就是html了，没有结构和内容，网页就是一片空白，就无从谈起它长什么样子（css），初学时，不会去写整个页面，而是从一个个能实现效果的小例子去写，每当这些小例子乖乖的呈现在网页中的时候，新童鞋都会兴奋异常是吧~什么各种粗体的，斜体的，居中的，大小写字母的，换行的，水平线，跑马灯的，背景音乐的，都想去试试（其实都差不多~），到后来可能会知道这样不好是吧，不符合结构和表现分离的原则，\n\n然后就跟着某些初级教程去类似的这样写\n\n\t<div style=\"\";></div>\n\n这种叫内联式，这个时候，其他的方法相对比较遥远，初学者眼里的安全区就是<title></title>和<body></body>,一个负责在浏览器的头部显示标题，一个负责在网页内容区填充。其他地方似乎都不敢动，随着学习的深入，会接触到内嵌式\n\n就是把样式表整个用<style></style>包裹起来放在<head></head>里：\n\n\n这里就开始接触到“为标签设置样式”、“定义类”、“定义ID”等等，这个后面谈。学完了这部分可能觉得这种方法不错嘛，比内联的好（也可能需要适应一段时间），同时，这些也都还不太符合分离的原则，一看还有外联的。。。额，怎么这么多，人一般会问个“为什么”，这样的好处是啥啊，好吧，外联的好处就是你用在网页里的时候用上这么一句话就可以了，\n\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css文件路径\"/>\n\n相同的样式表只要写一次可以用在不同的文件当中，这不论在简单还是复杂的网站中好处都是很大的，也实现了结构和表现的完全分离，当然，这么一来就要注意到类或者id的命名和避免层叠覆盖等等，后面讲。既然有这么好的，这下总可以了吧，当时我就是这么想的，但后来，你懂的，人总是要为自己的无知付出代价，还有一种就是在样式表中引入外部样式文件@import，使用方法如：\n\n\t<style>@import url('a.css');</style>\n\n也是一种引入样式表的方式，但跟link不同，它专为css而生，link却能做比较多的事情。不过，，随便请一个高手都能说出使用这种方法的一些不利，比如必须写在所有样式上面，加载速度慢，js的dom操作不了，等等。总之这种方法使用不多，在此先不详述。\n\n顺带说一下优先级的事儿吧，如果你定义的是同一个东西的样式，那么对它起作用的样式优先特点就是，距离最近的起作用，比如，内嵌大于外联，内联大于外嵌，当然，这里所说的只是以程序作者所写样式范围，客户端设置和代理、默认样式就不说了。特殊性则另当别论，怎样去增加特殊性呢，比如定义了一个标签的样式，那么就是指定了这个标签，如果有多个同类的标签，你为其中一个定义了“类”，那么定义的类规则就只对这一个起作用，定义“id”同样，但不同的是，一个页面同样名称的“id”只能出现一次，类可以多处出现，除了这些单一定义，一个元素也可以同时定义类和“id”，也就是说，不管是标签也好，类也好，“id”也好，都是我们对一个元素附加样式能用到的工具，只不过特点稍有不同，这个不同也是为我们定义样式提供方便的，当然，这些是一层的情况，还能运用包含关系去多层设置，这样可以在定义了标签和类之后去增加特殊性的方法，毕竟范围越小越有针对性，还是比较合理且容易理解的。除了这些，还有比较多的其他方式，比如伪类，子节点选择器，兄弟节点选择器，属性选择器，css3也提供了更丰富的选择器，说了这么多，如果你都还没了解到，可能会觉得怎么那么麻烦，你要明白一点，定那些标准的人不是傻子，程序员也不是傻子，去找麻烦，这些功能特殊的选择器只会给你带去便利。只有把这些方法利用好各自的特点，巧妙的结合起来，你才能写出更精简，高效的代码，而不用到处的定义类，或者多层嵌套的去定义后代样式。有些书籍会去根据标签，id，类这些去解释权重这个概念，并且教你怎么计算权重，或许你绕来绕去也绕不明白，那些东西也不用去死记，去计算，多实践，有了经验之后，你所理解的和掌握的其实和按照权重计算出来的是一样的。好了，这些只是出于单纯的css方法方面考虑，具体到一个网站来说，该怎么去规划呢？\n\n你至少需要考虑下面几点，当然，是需要你仔细的对设计稿和要实现的效果以及交互去考虑，而不是凭空考虑。\n\n## 一、全局的定义、继承\n\n这是优化css的第一步，也是很重要的一步，可以为你省去很多事情。这就需要你去仔细的看，哪些地方具有共性，这个共性的范围是多大，是否可以一次定义，多处生效。还要知道哪些是可以继承的，比如，字体类型、大小、颜色（有默认设置的除外，那些需要另外定义去覆盖），这样做往往已经是必须的了，因为页面内这类的样式不会有太多种，除非设计师那啥了~\n\n## 二、可重用css\n\n上面两点提到的是针对一个项目里面可以怎样去构思优化，这个就是又多些考虑了，哪些可以重用呢？还真有不少，比如：居中、浮动、清除浮动、清除默认样式，如果更细致一些的话，还可以到字体类型，字体大小，控制元素的显示或隐藏，一段固定高度的空白等等，但我个人认为，也不需要太细，有时候在样式的定义里多加上一个规则的设置或许会比在标签上多加一个类更好，如果一个标签上面有四五个甚至更多的类，至少我是受不了的~\n这样做的好处还是很大的，至少你不用再每次写样式的时候都去定义body、一堆hx、ul、ol此类的东东，只需要引入一个事先写好的样式表即可。需要居中的元素你看情况是直接定义还是加上事先定义好的类，只定义宽度，所有这些都是为了代码的简洁和编写效率去考虑，哪种比较好就选哪种。\n我现在是这样做的，用一个重置css文件，一个公共css文件，加一个站点css文件，至于很多人采用过的特殊功能或者版块儿单独出来一个文件，我暂时没有去采用，并不是说不好，或许当我觉得有必要或者有好处的时候，也会采用。\n另外一点需要提醒，当然，可能是多余的提醒，可重用，并不是说完全的照搬过来，可以根据项目需要进行删减，或者更改，重用文件可以写一份，用到项目里的时候复制一份根据需要设置即可。\n\n## 三、模块化\n\n刚刚学会写css人，都会有个不大好的习惯吧，怎么形容呢，思维像脱缰的野马？还是荒野游魂？呵呵，反正就是想到哪儿写到哪儿，写着写着觉得不对了，再回头改，觉得缺点什么再往上加，等等诸如此类，这都是缺少事先的规划，没有先动脑后动手的结果。一个网页里面有很多内容，它们各不相同，去区分它们不仅仅能使内容更结构化、具可读性，更是为了之后定义css或者后期做修改的时候去查找提供了很大便利，也牵扯到了命名的语义化，不能只是为了不同而随意命名，如果是新闻，命名个“xw”，你当时倒是知道了，过一段时间你还知道么，别人看的时候知道么，这些东西在没形成习惯或者没有在业界达成共识并普遍运用之前，就不要去用。\n\n## 四、效果实现\n\n比如一个页面有多处的阴影，或者多处的遮罩层，它们仅仅是存在于不同的内容里，效果和定位方式都一样，大小尺寸不同而已，特别是在现在这种需要顾及多浏览器兼容的情况下，一定义可能就是带着各种前缀的一大坨，这个时候，你何不只定义一个类呢，我称之为“效果类”，把定位方式，效果实现的代码都写好在一个类，如果哪里需要，就在那里加上这个类，另外再利用特殊性去选择它，定义专有尺寸或者位置即可。这种思想有点类似于其他程序语言里面的封装，然后传参，呵呵。想懒省劲儿就多动动脑吧！~\n\n关于这方面还有一个不错的资料推荐给大家，鬼哥写的[《页面重构的设计模式》](http://blog.cssforest.org/2014/07/01/%E9%A1%B5%E9%9D%A2%E9%87%8D%E6%9E%84%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html)\n\n以上说的这些都是我个人在工作过程中的体会总结，也不是全部，只涉及一些基本的，对大家都有些用处的方法。别的地方可能也有类似的东西，我也是在不断的学习，借鉴，如果说我这篇文章有什么特别之处，那就是我结合了一些别人问过我的问题和自己遇到过的问题，得到的教训等把从初接触写网页的职场新人到具备了一定css基础的人的情况，较完整的过了一遍吧，比较有顺序和逻辑的去看，会看到更多哦。\n\n其他不多说了，先写这么多，欢迎交流，以后有新的收获或者觉得这篇文章里有不足的地方我会再写一篇加以修正补充！~","tags":["CSS"],"categories":["CSS"]},{"title":"你还在坚持吗？","url":"/2014/08/09/你还在坚持吗？~/","content":"\n近期的工作依然是在不断尝试新事物，很多次觉得压力山大，但基本都挺过来了，这就是成长的必经之路。各方面的学习仍在持续着，但似乎仍然敌不过时间对耐性的考验~还好，我还在坚持，而且会一直坚持下去。\n\n跟一些前辈专家经常交流，向他们请教，觉得收益很多，包括之前认识的小志、阿当，大白、大漠、鬼哥、鬼，后来认识的一丝、韬哥等等，为什么要把他们的“名字”列出来呢，第一是表示感谢，第二是表达一种钦佩，能在行业里做技术这么多年，而且依然保持着旺盛精力，热情不减的去学习，研究，分享，真的不是说说那么简单，很难能可贵。\n\n很多人都会认同一种观点，学得越多，接触到的领域也越广，意识到自身的不足也越多，整个人也就会越谦逊。\n\n时不时有着一种虚荣心驱使想尝试加入知名的公司，但鉴于能力和经验上的不足，暂时尚未如愿，不过我希望在不久的将来，当我真的能加入它们的时候，不带有任何感情色彩，而仅仅抱着作为一名技术员，一名前端工程师的心，去创造好的产品！~\n\n走上这条路，就需要你去不断的学习，能坚持越久的人，光芒越是耀眼，你还在坚持吗？跟我一起坚持下去吧！\n\n\n大漠博客：[w3cplus](http://www.w3cplus.com/)一个好多年，很不错的博客，博主也特别勤奋，值得大家学习！","tags":["思考"],"categories":["思考"]},{"title":"再谈移动页面之移动开发方面新的小收获","url":"/2014/08/09/再谈移动页面之移动开发方面新的小收获/","content":"\n上一个移动项目已经是前段时间的事了，这篇文章本想那时候就趁热写出来，但由于心绪各种波折，耽搁到现在。争取能够最大可能的去挖掘记忆把它们挖出来吧！~\n\n一、再次强调分辨率\n用一句话来色彩鲜明的描述一下这个问题，PC屏幕很大，iphone屏幕很小，可是前者的分辨率却可能没有后者那么大。这一点要特别的去注意，不然很容易钻进死胡同走不出来。\n\n二、如何更好的在PC上调试移动端网页？\n很多人觉得用谷歌浏览器可以模拟，这当然是一种方法，不过，还有另外的很直观也挺方便的方法，那就是把自己的浏览器“变成”手机屏幕，怎么变呢？直接调屏幕分辩率就是了，就这么简单。不过只是相似效果哦！（还要忍受所有图标都变大，眼睛会不舒服~）。肯定还有很多方法，再介绍一种吧，用DW，如果你对它的印象仅仅是用来编码，估计你还不知道这个功能，\n再谈移动页面之移动开发方面新的小收获 - 灵感 - linggan\n是的，它就在你所熟悉的浏览器预览按钮的前面，虽然这里列出来的分辨率可选项有限，还是能提供到一些参照性。\n我相信还有很多更好的方法，如果您知道，请不吝赐教，定十分感谢！~\n\n三、当心你所用的是“百分比”！\n\n既然是百分比，那请告诉我决定了它的宽度和直觉效果的是什么？对，就是总宽，那就不要指望能一次性定义所有设备显示效果一样了，或许你之前对此一点都不怀疑，举个很简单的例子。\n再谈移动页面之移动开发方面新的小收获 - 灵感 - linggan\n再谈移动页面之移动开发方面新的小收获 - 灵感 - linggan\n 这两张图代码的区别是什么呢？呵呵，仅仅红色部分宽度不同而已（可能你会觉得怎么高度和字体大小也变了，好吧是我图截的不好，你们可以自己做试验），这里只是微调，如果是两款分辨率相差很多的设备，视觉效果还会相差很多。所以，一次定义打遍天下是不大可能了~\n\n四、px、em、rem和62.5%\n很多人或者会觉得px很常用，都知道是什么，也可能很多人用过em，肯定也有人会把em当做rem的性质去用了一段时间之后还没有察觉，而rem和62.5%就有着密切联系了。\nem是按比例来的，那px是绝对单位么？如果你很迅速并且很响亮的回答：是的！ 那恭喜你！\n\npx是一个相对单位，相对的是设备像素(device pixel)。\n比如iPhone 5使用的是Retina视网膜屏幕，使用2px x 2px的 device pixel 代表 1px x 1px 的 css pixel，所以设备像素数为640 x 1136px，而CSS逻辑像素数为320 x 568px。\n比较正确的工作方式是：由设计师按照设备像素(device pixel)为单位制作设计稿。前端工程师，参照相关的设备像素比(device pixel ratio)，进行换算以及编码。\n\n那em呢？大家都知道字体的类型和大小是会继承的，而em是和当前元素的父元素去比较，非body所定义的根元素或浏览器默认大小。\n\n如果想计算方便，那62.5%和rem就派上用场了，不必怕，为什么定义62.5%？——16*0.625=10！哇，好好的数字，是的，为了\n 方便，而rem则是相对于浏览器默认或者body定义字体大小。在body里定义了62.5%之后，你下面想定义多大的字体根本就用不着计算器了直接加个小数点后面跟rem就欧了！~不过要说的一点是，我们通常要照顾浏览器的兼容性去多写一些代码，以防在不支持的情况下死得很惨，想必大家都习惯了吧？~\n\n五、媒体查询和js判断屏幕\n\n要想真的适应各种屏幕，媒体查询是不可少的了，当然，有时候js对屏幕的判断也是比较有用的，如果一个页面其他方面都挺合适的，就因为部分内容的高度或者宽度显得很别扭，那你就有必要把它单独拿出来处理，而不是把整个页面都重新定义\n ，单独进行大小尺寸的调整，或者必要的时候可以只保留主要部分，次要的可以拿掉，可用第一，不能有明显的bug，不然你就玩完了！~\n\n先这么多吧，脑细胞已经挂了不少了，以后有了会继续！~","tags":["移动端"],"categories":["移动端"]},{"title":"初接触移动开发可能遇到的一部分问题（一无所知的可以看看）","url":"/2014/07/05/初接触移动开发可能遇到的一部分问题（一无所知的可以看看）/","content":"\n## 一、以前都是在电脑上的网页，现在要在手机上看了，可怎么搞？\n\n是的，电脑上面我们需要做的大致是背景宽度100%，主体内容居中，分栏布局浮动，再结合内外边距等便可解决，但到了移动端呢？屏幕本来就很小，你别告诉我要把图片和文字都调整到很小然后把网页上的经验再全部搬过来，显然不靠谱，本身手机网页有着屏幕小的特性，俺就意味着空间非常宝贵，没有那么多地方给你留白，绝大部分区域要么可操作，要么用来展示内容，而且在此同时，给用户比较好的感官和操作便利。\n\n## 二、知道了第一点，那接下来该怎么做呢，设备多种多样，不同品牌，不同尺寸，不同默认显示方式等等...\n\n首先就是很重要的百分比，百分比宽度和高度，这样是为了设置自适应的容器大小，但有了容器大小，内容区域怎么处理？这就涉及到字体和图片，你猜对了，字体也需要使用相对大小，如果用惯了像素（px），那么让你用em，或者rem之类，可能会一下很不习惯，但有一个参考标准还是给你带来了福音，一般默认大小16px是1em，这样，你准备个计算器，然后把像素计算一下一转换，好吧，看样子这样是凑合解决了问题，之所以说是凑合是因为你总会遇到一些“莫名”的问题，比如字体大小的继承性，使用px的时候，你想设置多少就是多少对吧？任你摆布，它就是个统一标准（px）绝对大小，而你使用了相对大小，比如父元素设置的2em，相当于32px大小，子元素你再设置个2em，不好意思，这里好像2em≠2em了，具体自己去实验吧~如果我这么说你觉得本身就是合情合理，那说明你比较聪明，但当你摆脱不掉px带来的习惯而遇到问题的时候回来看或许会发现点儿价值。\n\n## 三、文字已经做了相对大小处理了，那么图片呢？\n\n你会堂而皇之的去跟设计说，我需要适应各种尺寸，你给我设计不同大小的图片吧，你确定要这么做？可事实是，如果你这么做能解决问题也行啊~只可惜，用户的图片可大都是从后台自行上传的，你怎么处理？只能用代码了，我只告诉你，代码的核心只用到一点：max-width：100%，至于需不需要加上max-height:100%,或者height：auto。朋友，自己去试验吧，或许我说的就是错的呢？多尝试才能接近真理。\n\n## 四、使用了百分比就万事大吉了吗？\n\n事实好像不尽然，因为，你知道怎么正确计算百分比吗？有这么一个公式：目标元素宽度/上下文元素宽度=百分比宽度。简而言之，它也是相对的，比如父元素只占到了60%，那么你想它其中一个子元素占到它的一半，那就除以2吗？呵呵，或许聪明的你想到了，是50%，而不是想当然的30%，这一点上和em同理。\n\n## 五、屏幕的尺寸跟你用肉眼看的一样吗？\n\n确实存在着这样一个坏习惯，那就是你已经习惯了某种屏幕的分辨率，那么在你脑海中就有了那个分辨率下相应数值所对应的宽度，你再去看手机或者平板电脑，你就会觉得，这个宽度大概也就300px左右，那个宽度也就500px左右吧。童鞋，我们真的要很谨慎这个错误，眼见不为实，经验不可信了，为什么要提到这一点呢，跟下面要说的有关~\n\n## 六、不想设置百分比怎么办？\n\n如果你实在不想那么费劲的去设置和计算百分比和相对大小，该怎么办？当然可以，不过你要搞清楚网页要在哪些设备上使用，以及分辨率范围，记住是分辨率，而不是让你去犯“第五点”里提到的错误。然后你可以用一个看起来很方便的东西，那就是媒体查询：@media screen and （max-width:xx px）{}.是的，如果你这么做了，那么在你定义的xx宽度以内，就可以使用绝对宽度和大小了，我没骗你，就是这么直接，你可以在html文件的头部加入它，然后引用不同的样式表，也可以在样式表里直接这样写，然后覆盖掉之前定义的样式。但它带给我们的不只是好处，还有不便利，因为，如果你要考虑的设备不多还好，如果很多或者你追求达到某种特殊效果，比如每小10px，字体大小就变，那你要写多少查询语句才能满足呢？~\n\n或许有人没看完就想忍不住在心里发出声音，完全可以用jquery mobile之类的解决问题啊，什么都不用管了多好。好吧我承认目前为止我对它了解的还不是很多，只是做了一些简单的实验，它的确不需要让你考虑布局方面的问题了，可是如果你的设计师做的东西让你很难下手去套用它你又该怎么办呢~\n\n最后我想说，这里提到的只是很少一部分，还有流式布局、根据内容重要程度改变顺序等等，看起来问题还很多，等你去不断探索吧！~","tags":["移动端"],"categories":["移动端"]},{"title":"inser工作一月","url":"/2014/07/04/inser工作一月/","content":"\n辞去旧的工作之后，没想过再次加入一个创业型公司，因为没人不想去追求行业里的“高富帅”甚至巨头，想去一个更好的环境给自己镀金。但事实是，好的环境和待遇，永远都是只给足够优秀的人准备的，当你满怀信心和热忱的去，甚至背后已经做了不为人知的努力去想为自己争取哪怕一点希望，其实大都起不了多大作用，公司不是收养所，如果你站在老板或者HR的角度去想，他们的职位名额也是有限而且宝贵的，理应不对任何不达要求的人手软。而如果你被拒绝了，也不应该有太多的郁闷和抱怨，那是合理的。也曾有朋友托我介绍工作，最常听的一句话就是：“让我去就行，做什么都可以”。那且问，究竟让你做什么呢~没公司会提供这么一个模糊的职位，给“做什么都行”的人，所以，第一步还是想好你到底要干嘛吧~\n\n扯的有点远，我之所以加入这家公司，不是因为待遇有多么的好，业务前景多么的好，公司多有影响力等等。首先我承认的确是看上了它的业务前景，但更多的是，老板的价值观和开展业务的方式，以及跟一群年轻的、有干劲儿的、富有激情和创意的同事一起共事，这本身就蛮有吸引力。\n\n工作了一个月，困难倒是遇到过不少，但每次困难都是推着自己前行的助推器，因为你只能前行，别无他法，每次解决了问题或者战胜了困难，都有一种由衷的欣慰和鼓舞，它会让我觉得，原来这样我也可以做到，它不是那么深奥那么神奇的。\n\n我会继续沿着这条路走下去，下一个路口在何方现在不知道，但这段路一定要走的漂亮！~为自己，也为同样走在奋斗路上的你，加油！~","tags":["经历"],"categories":["经历"]},{"title":"新工作一个月，深圳工作一周年记","url":"/2014/07/04/新工作一个月，深圳工作一周年记/","content":"\n前几天错过了毕业和来深圳一周年，今天一看时间，恰是工作一周年的日子，好吧，这次不能再错过了~\n\n一年仍是职场新人的阶段，我常向别人这么描述：“我毕业的第二天下午就来到了深圳”。其实这么简单的一句话我想表达的是，我对外面的世界，对深圳，对工作，对我热爱的前端，是多么坚定和期待。不知是否曾有人感受到过，呵呵。\n\n依然记得那天是怎么来的，一个人又背又拖的拿着三个重重的行李，我当时要转一趟火车，行李重不重的倒是在其次了。最担心的是，包千万别被撑破或者背包的袋子千万别断掉啊，不然我真的不知道该怎么拿那些东西了，如果出什么意外，那也等我上了直达终点的车再到来吧，就这样一边着急的赶，一边还小心翼翼。还好一切顺利。到了深圳来不及去任何地方去逛，去玩儿，很热，要搬东西到租房的9楼，没有电梯，要整理房间，接下来要准备找工作，因为我说了毕业后不再找家里要钱，虽然人说到做不到很正常，也有朋友说这个时候找家里要点钱是应该的，以后稳定了可以靠自己，可是，这次我想证明自己可以。那段时间其实真谈不上苦（个人认为~），没有饿过一顿，但生活中的诸多事情仍然不是那么轻松的，我一一克服着，也并没感觉多累，或许，这就是年轻的好处，我都不会太在乎，再说了，我来的是深圳，那股兴奋劲儿也能支撑我好一阵儿吧~\n\n我曾经去过北京找实习，这次是来深圳工作，每次找工作都没用多久，这次也一样，一个星期，在我即将不抱什么希望找到自己称心工作的时候，我找到了自己上一家公司，才华网络，我完全可以说，很感谢它，也感谢春哥，也很感谢小聪，春哥“收留”了我，而小聪，年龄比我小，却成了我的主管，算是我职场第一个师傅吧。依然清晰的记得，我看到小聪在操作那密密麻麻的代码时候我头大的感觉，是的，那时候我跟不懂代码的人感觉是差不多的，然后，我忍不住问了他一句：“那么多代码，你怎么知道哪个是哪个呀？”这样的问题，估计也只有菜鸟才问得出吧。接下来，就是每天都进步的让人兴奋的日子，当然，兴奋是后话，兴奋之前，是接连不断的郁闷，那时候我最常说的一句话是：”我都想死“。这是句玩笑话，可是你能想象到有多郁闷，郁闷在于，有些你根本检查不出或意识不到的超低级错误，别人给你指出之后，你唯一会做的事情就是怀疑自己的智商。\n\n第一次总是让人印象深刻的，做的第二个网站记不清了，但我独立做的第一个网站却记得很清楚，虽然那次我做一个简单的首页就用了两天，呵呵。\n\n才华带给我的成长是全方位的，公司初创的困难，业务开展、业务量增长的困难，各种销售、沟通技巧，人员管理，时间管理等等，很多很多。可是由于某些个人原因，我不得不选择离去。还记得我们玩儿过很多游戏，在年会舞台上表演排练了两个月的舞蹈，很多次加班到近12点，第一次去漂流，一起出去到景点游玩。。。很多美好记忆。\n\n我想用这一年经历来分享给后来的没经历过那么多的人：青春宝贵，不管是上没上过大学，是不是认为自己的大学白上了，等等。这些都是过去的事，20左右，人生才刚刚开始，一切都不晚，你首先找到自己喜欢的事情，然后去把喜欢的变成擅长的，有个目标，奔着这个目标去努力，不要人云亦云，不要盲目跟风，也不要只看重眼前利益、只看到眼前的苦，要有所追求，当你挺了过来，有了足够多的积累，你就会笑对自己的过往，也能笑对那些曾说你不现实的人。\n\n有不少年轻人图轻松，图能赚钱，觉得一个月三四千的薪水就可以了，工作又不难，一边这么想着，一边又在空闲的时候跟人聊天有气无力的说”我好无聊啊“”能怎么样呢，还那样呗“，当你是这样描述着自己的生活和工作的时候，虽然你不累，虽然你能养活自己了，但这样的青春你敢保证是无悔的吗？~\n\n大四考研失败之后，我果断放弃了二战，同学和家人都曾问过我甚至劝过我，再来一年吧，我拒绝了，就像当初选择考研一样没犹豫。因为我已经知道了自己想要什么，那何不全身心投入于它？我们需要的不是考研本身，这里也想对不管是一战还是二战成功的同学好友说，你们一定要加油好好干，发挥好它的最大价值，同时也对二战仍然失利的同学说，失败并不可怕，不过是来到了另一个起点而已，找到自己想做的事情，专注的去做，几年以后或许你并不会对当年的落榜感到遗憾~\n\n新公司叫inser 影致科技，新工作是做微电影app和微电影平台的，我本身也比较喜欢微电影，老板人很好，同事很年轻，富有朝气，关注前沿，有激情和创造力。一个月的时间，遇到了不少困难，但克服困难后的收获更让我兴奋。当然，来到这里的主要原因只有一个——前端，其他的是锦上添花，我到底有多喜欢前端呢，或许我喜欢的不只是前端，而是创造优秀的产品，创造美感，给人们提供简单、快捷、富有美感的使用体验。我建了QQ群，名字叫”美是编出来的“，并在里面分享了我搜集一年多的好资料，我买了很多本大大小小的书，结识了在深圳、上海、北京等地工作的行业大牛，我会去腾讯听讲座并认真记笔记。好吧，即便如此，我仍然是个前端菜鸟，纯屌丝。可那又怎样，谁能保证在不久的将来不会上演屌丝逆袭？~\n\n谨以此文，纪念工作一周年，深圳一周年，我不确定以后会不会有”二周年“ 、”三周年“..不去管它，走好脚下每一步，把握自己。当然，还要对一直以来关心支持我的家人、朋友说声感谢。我会继续努力！~ ","tags":["经历"],"categories":["经历"]},{"title":"五天面试（5.24—5.28）","url":"/2014/05/28/五天面试（5.24—5.28）/","content":"\n## 天安数码城：\n\n从车公庙下车，挥汗如雨，走了不少弯路，到了楼下，乘电梯上去，扭头一看对面是猎聘网，着实惊讶了一下。然后就进去了，一个xx总，一个技术老大。笑容可掬的看着我，提问的套路从专业到工作经历，到为什么换工作，年龄等等，然后提问了技术员相关：图片处理、前端、后台。具体是一张照片中把一个玻璃缸挖出来用什么方法，然后一束花，不动叶子，怎么把花从红色变成变成黄色。。。（这也是前端的事儿么~），虽然不难，但是有点偏了，没答出来，后来知道其实也是可以抠出来改颜色的，擦。。。再然后，谈了公司的其他情况，才六个人，技术部成立一个月左右，做婚庆平台的，好吧。技术这块儿算是没顺利过关。接着侃侃而谈公司和网站方面，倒是引起了他们的好感，好吧，哥身上还算有点亮点么（哈哈）。没拒绝也没同意，待定。\n\n## 珍爱旗下缘来网：\n\n这个，在科技园同方信息港三楼，办公环境蛮好。团队年轻有活力，只一个事业部就60多人，做了一下试题，好吧，可怜的两道css题，剩下几乎全是js，还有一题html5，简而言之，公司很重视的js我给。。说多了都是泪。刚询问到结果，希望破灭了。\n\n## 福斯康姆：\n\n你没听过这名字吧，我也没听过。可是它就是那样的存在于科技园威新软件园1栋，二楼，那么骄傲，皎洁、高贵（我怎么没去当作家，哈哈）。去到前台先让我填表，公司人来人往的，人事是我老乡，那个突然亲近呐，聊了聊，然后就是技术来了，依然那么年轻，而且，好像还挺厉害，厉害到什么程度呢，提的问题我所给的答案好像是在背招聘广告，问我兼容性、前端除了css、html、js还需要掌握什么，问我添加浏览器插件方面，，，好吧，我想说，整个过程他也没看我几眼，就两页简历来来回回的翻着。然后，说完了就让我再坐一会儿让人事过来跟我聊，人事过来了（其实我知道结果）。他倒是显得比我还不好意思，哈哈，我很大度（不然能怎么样。。）的说，没关系，就当是一次经历，学习的机会。他安慰和鼓励了我几句之后，我就潇洒走一回了，跟美女前台道了个别，她还惊讶说怎么这么快，咱能不表现的像被秒杀一样吗？！~\n\n## 谷美：\n\n这是一家外包公司，来之前有些犹豫，要不要再做外包啊，可它们官网告诉我，貌似还不错，我就去了，南山，新能源大厦，外面看起来真不怎样，里面倒也还行吧。去到挺顺利见到了面试官，一个四十岁上下的女士，人家可是执行总监，又到了一个小屋里，每家公司面试的地方都是小屋。。。面对面坐下，简历奉上，然后开聊。经过几次面试后，早就更加的老练和自然（补充一下，之前工作都是一次面试成功的~），坐下挥洒着我的“才华”，跟她交流碰撞出挺多的火花，达成了若干共识。并且，看起来她比我自己都更相信我能做好。我没用什么魔法吧，这是怎么做到的，哈哈！然后，她让我看什么时候可以入职。我去，时间也不长呐，一个是被秒杀，一个却是直接晋级。这差距，境界啊，格局啊！~好吧，不说那么多浮夸的话了。\n以上只是近几天面试的结果，后续如果有更精彩的，再奉上吧！~\n\n注明一句：无论受过多少打击，被轻视多少次，我依然会每天行走在前进的路上，never stop！~","tags":["经历"],"categories":["经历"]},{"title":"“看起来不错”其实挺重要！","url":"/2014/05/03/“看起来不错”其实挺重要！/","content":"\n生活中，我们对很多事物的第一印象甚至决定性印象都是通过视觉来传递，也就是用眼去感觉，那么“看起来不错”就显得相当重要！可这时常被人忽略，认为那何必呢，都是表面功夫，本质好就行了，其实大错~\n\n一个长得漂亮的姑娘，是人都想多看一眼，凑近些；你去见一个客户，穿着休闲跟穿着整齐、职业，完全是两个概念；一份工作资料，是整整齐齐，干干净净还是比较随便的排版，给人的感觉差别很大，一个就是一张纸上面写有字而已，另一个则显得正规和职业化；一个网站是做工精细还是粗糙，完全决定了访问者对你网站的喜爱度甚至愿不愿意在你的网页逗留。\n\n诸如此类吧，很多“表面”的东西其实就决定了你能否成功，不要小看它哦！~","tags":["思考"],"categories":["思考"]},{"title":"逃离舒适区(转)","url":"/2014/03/23/逃离舒适区(转)/","content":"\n很早读的逃离舒适区\n很早就开始试了\n\n八年\n三家公司\n\n从UI设计到网站设计\n从网站设计到前端\n从前端到管理\n从管理到产品\n从产品到项目组\n从熟悉下来稳定的项目组空降到陌生的不稳定的团队\n\n每当日子好起来，舒舒服服的时候，就忍不住折腾\n每次都异常艰辛\n降薪跳槽\n降职调岗\n从“发号施令”到“求人办事”\n从“坐着数钱”到“熬夜的大苦逼”\n\n没有谁是天才\n无非就是拼时间硬扛罢了\n扛下来就是好日子\n扛不下来就怂逼一阵子\n不加薪\n罢了\n\n再复盘\n仍会如此\n认真对待每一次选择\n别让自己太舒服","tags":["思考"],"categories":["思考"]},{"title":"你的位置和你应有的态度（给所有刚开始努力的人）","url":"/2014/03/21/你的位置和你应有的态度（给所有刚开始努力的人）/","content":"\n最近跟同事一起去健身，结果两个星期不到，绝大部分同事都掉队了，经常去的就只有我和另一个同事，最常去的就只有我了，很多人会说，人少了去没意思，甚至是我一个人去有什么意思。我只想这么说，我们是办的年卡，半个月都撑不到就不去了，那不仅仅说明是一个人懒，不想去健身，其实反映出一个人对待一件事情的态度和风格，一个人对自己的选择是否够负责，对自己已经决定了的东西够不够坚持。还有就是，今天有个健身教练才跟我说，初期阶段也得有一两个月时间，可想而知，在前进的道路上有多少人连初期阶段还没完成就放弃了。我早就说过，放弃是世界上最容易的事情，只要不去做就是了,执行力和毅力决定了太多的东西，做一件事情有没有结果，能不能保持下去达到最好的效果，达到最终的目的，从一个人做一两件小事就能看出来了，这也就是为什么有时候看人就知道能不能成事的原因吧。\n\n还有就是我们在前进的道路上应该有一个什么样的态度。我们可能觉得自己足够努力，想要达到某个程度或者水平，但是又觉得自己仿佛没有在前进，问题出在哪儿呢？其实就是因为我们急于求成，却没有付出足够的实际行动，总是想的比做得多，想象里的自己和实际的自己有很大差距，记住：永远不要试图在想象当中让自己变强，不要去幻想得到没有实际付出去积累的东西。你想有什么样的能力，那就去做，做了才会发现问题，解决问题了才能进步！\n\n这两点看似普通，其实，是阻挡很多人去路的两个致命因素，与大家共勉！~","tags":["思考"],"categories":["思考"]},{"title":"重复和渐进，让复杂的东西变简单，简单的变神奇！","url":"/2014/03/20/重复和渐进，让复杂的东西变简单，简单的变神奇！/","content":"\n没有哪一项知识不是浩如烟海的，我们对它的认知也会从陌生熟悉，再到感觉它无限大。\n\n可是什么才是让它“为我所用”，散发光芒的方法呢？\n\n重复能使我们打破原有思维去明白以前从没接触过的看似复杂的东西。那又如何渐进呢？所谓渐进，就不是简单的重复，上升到以变应对变。\n\n比如，变量，所有学习编程或者计算机的人都知道，这个东西说小很小，但是谁都无法去否认它巨大的作用。用活了能起到很大作用，并不是只是控制语句，函数，方法什么的才很伟大，当你把复杂的东西由重复的搞懂，到渐进的灵活，才是到了另一番境界。\n\n然后，另一种是什么呢？从规则到不规则，处理颜色，图片，方形，到圆形，到不方不圆，这些都是要突破的，总是让你在觉得还可以的时候告诉你，你还有东西是做不出来的。\n永远不要觉得展现在自己眼前的或者自己经历过的就是所有了，那只不过是冰山一角。\n\n坚持的学习和练习，才能让原本看起来复杂的东西任你调遣，变得神奇！~","tags":["思考"],"categories":["思考"]},{"title":"什么在阻止你前进？“应该的”和“想的”","url":"/2014/03/09/什么在阻止你前进？“应该的”和“想的”/","content":"\n一个人的生活质量从一天的开始就显现，早上你是早早的起来洗洗刷刷，舒展一下四肢，吃点营养早餐，还是。。。。在被窝里呼呼大睡到半中午才爬起来，睡眼朦胧的看着这个世界？\n\n生活中我们有太多“应该”做的和“想”做的。生活是这样，工作也是这样，学习更是这样，衣服多久洗一次，房间多久打扫一次；今天上班会不会迟到，会不会走神跟同事说说笑笑然后忽然下班时间快到了；会不会想去学一样东西不知道从何入手就放弃了，因为别人说它不容易就放弃了，买了本书回来没看几天懒得翻看了就放弃了。\n\n一件事只有三个大方向，却会有很多种结果，三个方向是，一、立即去做。二、不能立即去做，遗忘了或者一时犹豫了，拖了一段时间后才去做。三、没忘，也知道做了会有好处，但仍然不会，而且永远都不会那样做。结果就是对那件事情的验证，就是你到底有没有收获它的价值，收获了多少。\n\n一件有好处，而你应该做的事，你会不会去做？这是一个很简单的道理，却决定了很多很多东西！不能那样做的人就是在周而复始的发现问题，找解决办法。。。。可什么时候能解决呢，呵呵","tags":["思考"],"categories":["思考"]},{"title":"学习最关键的阶段","url":"/2014/03/05/学习最关键的阶段/","content":"\n很多人都说万事开头难，这也确实是实话，不管后来回过头看多么简单的东西，在第一次接触的时候都会觉得是晦涩难懂的。\n\n这个世界上，天才是极少数的，拥有超强记忆能力和理解能力的人也是极少数，那我们既然没有那么高的禀赋，怎样才能达到同样的优秀？这或许是每个人都想要的答案，首先可以肯定的是辛勤的付出是肯定的。我们没有超高的效率，但我们可以在重复次数和时间上花功夫，以此来达到类似的高度。\n\n人人都有畏难情绪，觉得这个或者那个应该容易些吧，尝试了之后才发现，似乎没什么是容易的，而当我们“被迫”的，出于无奈的去做一件事情一段时间之后就会发现它变得亲切起来，不再那么陌生，越来越听话，其实这个时候就已经过了最初的那个陌生阶段，进入了学习的最关键阶段，有了一定基础，有了好感，但实际上的功力其实还差不少，这个时候是知道自己的不足而没有了恐惧感，剩下的就是通过持续的学习和实践，去积累，去往我们学习的版图中添加缺失的部分，这个阶段是痛苦的，因为已经知道了那么多怎么还有那么多不知道啊？这个阶段又是很享受的，能看到自己一点一滴的进步，知道自己的知识结构越来越全面，功力越来越深，能解决的问题越来越多，离自己的理想情况越来越近了。困难是有，但动力更足！\n\n若成功渡过了这个阶段，那定是另一番境界！","tags":["学习"],"categories":["学习"]},{"title":"关于学习和前端","url":"/2014/02/23/关于学习和前端/","content":"\n学习，是一个大家都非常熟悉的词，当然，因为受教育的原因，首先跃入我们脑海的就是跟读书，做题，考试等等相关。但这是在校园，出了校园之后的学习又是怎样的呢？在这里发表一下陋见。\n\n很多人出了校门还是什么都不会，原因大家都知道，于是乎现在社会上很多的培训机构就成了他们的又一出路，花个几千块，还有先学习后付款，保证能签约到什么企业，看着满满的课程表，似乎就是看到了希望，可最终结果是怎样的呢？老师的授课方式你不喜欢，发的教材比较水，时间长了失去了新鲜感，又没有很严厉的管教，最终能真正学出来的人寥寥无几，想想跟之前那些年的求学无太大区别，退一万步来说，就算你花功夫去学了，像java、C++、嵌入式等等这些，你指望通过三四个月的时间学到多少，理解到多少？能记住一些语法规则、方法、函数，能写几段简短的代码做出几个看起来还行的效果，这样就算学会了么？就像是一个老师曾经对他的学生所说：你们去应聘，会看到诸如此类的要求：了解、会、熟练、精通等等，其实你知道点就叫了解，略懂语法，能写出简单的正确的代码就是会，能写实现稍微复杂功能的代码就叫熟练，熟练的基础上懂点思想会在不同的地方应用，就是精通。。。。中国有太多类似的事情，真正水平高的，能上得了台面的很少。风气暂不谈，大家都知道，国情嘛~\n\n有一句话说的好：兴趣是最好的老师。首先你要选择了自己喜欢甚至是热爱的事情，这样就不会有一种外部强加给你的压迫感，学习就成了一种欲望。再者做技术这类，很多人会问这样的问题，我该学什么，现在学什么前景最好？我是不是学会什么就能怎样了？该看什么书或视频呢？你学的时候用了多久？这么想的人，八成想得多做得少，想象很美好，执行力很差，不踏实，浮躁的表现。\n\n我比较喜欢一个词儿，叫梦想或者理想。而且我喜欢跟有理想的人交朋友。并不是说几个人在一起吹牛，幻想，而是这样的人心里总有一股力量去克服很多困难，比如枯燥，孤独，失败，嘲笑。当然，更重要的是有一种不断前行的动力不断追求更好的动力，以及在领域内做出突出贡献为用户创造好的产品的那份虔诚！也就有了不断学习提升自我的欲望！\n\n天才很少，但是我们大脑的潜力是每个人都有，而且很强大。学习就是一个从陌生到知道，从知道到熟悉，从熟悉到精通。最难的是前两个阶段，陌生的时候，全是新的东西，新到无从下手，找不着北，完全不知所云，这个时候别说是让你博览群书，就是让你看几页都会觉得是一种痛苦，但别忘了这只是一种陌生感带来的短暂的不适应，学习从来都是渐进的过程，没人能一口吃成胖子！从知道到熟悉似乎仍然是个无解的问题，我知道这个，也知道那个，还知道那个，可是，又能怎么样呢？还是很零散，不能逻辑化系统化。这会让人把从未知到知道获得的那点成就感摧残的荡然无存，陷入郁闷和困惑，我还缺点儿什么呢？还要从哪方面得到提高呢？俗话说的好，实践出真知，当你觉得自己还可以的时候，可能随便一个什么问题就把你卡在那里，其实这个时候你需要的就是加强自己知识体系的完整性，把它系统化，加深理解，在实践中积累经验，假以时日，就会达到看起来信手拈来，兵来将挡水来土掩的境界！~\n\n## 前端\n\n是个不那么新的词儿了，在最开始的时候，很多人认为做后台的远比做前端更牛吧（或许现在还是很多人这么认为~），我为什么选择了前端呢？其实我刚开始就是想，要做软件开发，看起来和听起来都挺牛的，也有钱途~那做软件要学什么呢？好吧，用C来打基础，然后做软件好像用java很多很火吧，就学java，可是。。可是最终，哎，自认为没那个天赋，放弃吧。当我认为自己当初选择计算机是对还是错的时候，我灵光一现~html这个东西，好像蛮简单的，也蛮有意思的，你想啊，自己每天上网看到的那些东西，自己也能写出来了，而且所见即为所得，写一点马上就能看到效果，这比整天在那里写C，输出数字，字符串什么的有趣太多了。于是乎，我就开始学了，这就是真实的原因，我觉得它简单，事实证明它确实也相对而言简单，但是。。。。\n\n好吧，我开始了第一个从陌生到知道的过程。过程不再详述，总之自认为挺有毅力的听了若干节视频课程，最后以高级课程需要买光盘而告终。。。这个时候，我就只是会一些简单的html编写，和嵌入以及内联css方法写点简单的页面而已，回想起来，既真实又有趣~后来我开始借书看，边看书边实践，这个阶段我的能力得到了某种程度的提升，但是，现在看来仍然没有达到菜鸟级别。其实学习就像是在拼图，没有任何一个人写的书会完全的知道你需要什么，但总有可能你在某个地方就看到了自己需要的，所以，不断的拓宽自己的视野，多看书或者文章，和能力比自己强的人交流都是能受益匪浅的。关键在于你一直以一种积极的态度去面对问题和困难。\n\n## 前端到底追求的是什么呢？\n\n好的设计：包括功能、风格、颜色、布局、交互等等。\n技术平衡的、科学的运用：暂且不说美感和优雅，把代码放在哪里，怎么样以比较适当的代码量去做比较多的事（不一定少的就是好的），效率和质量的平衡，可重用性，兼容性等等。\n\n## 前端的发展前景怎样？\n\n话说只要你想得到做得到，就有你的一片天下。设计层出不穷，我们总能时不时的感受到网页上面的一些变化，人们对美和便捷的追求不会停下脚步。所以，如果你认清了自己，做出了选择，就要有把它学好的信心和决心，坚持下去定有不凡成果！~\n\n这里就不讲技术方面的事儿了，因为这里不是给大家讲课的，我也还没达到可以讲课的水准，只是给后来者一点点真实情况的披露，希望能带给你点启发也就够了。\n","tags":["前端","学习"],"categories":["思考"]}]